var ctxPath = '/Academy/';

$(document).ready(
				function() {
					$.ajaxSetup({
						cache : false,
						error : function(x, e) {
							ajaxError(x, e);
							removeBgCurtain();
							if($("[id^=save-span]"))
							$("[id^=save-span]").parent().removeAttr('disabled');
							$(".outside-action-btn").removeClass("disabled");
						}
					});
					$("body")
							.append(
									'<div class="err_msg">Oops! We are having trouble. Please try again....</div>');
					$.getScript("/Academy/js/message-resource.js");
					$('[data-toggle="tooltip"]').tooltip();
					
					$('[id^=custom]').off('click');
					$('[id^=custom]').on ('click', function() {
						var idArray = this.id.split("_");
						var funCall = idArray[1];
						var ret = eval(funCall + "(this.id, this,0);");
						return ret;
					});
					/*reInitCkEditorTool();*/
					initMenuObj();
			        organizeNavMenu();
			        initNavDropdownFunc();
			        
			        $(window).on('resize', function(){
			            organizeNavMenu();
			        });
				});

function reInitCkEditorTool() {
    $.fn.modal.Constructor.prototype.enforceFocus = function () {
        modal_this = this
        $(document).on('focusin.modal', function (e) {
            if (modal_this.$element[0] !== e.target && !modal_this.$element.has(e.target).length
            // add whatever conditions you need here:
            && !$(e.target.parentNode).hasClass('cke_dialog_ui_input_select') 
            && !$(e.target.parentNode).hasClass('cke_dialog_ui_input_textarea')
            && !$(e.target.parentNode).hasClass('cke_dialog_ui_input_text')) {
                modal_this.$element.focus();
                //$(document).off('focusin.modal');
            }
        })
    };
}

var elemList;

function initMenuObj() {
    elemList = $('.navbar-nav').eq(0).children().get();
}

function organizeNavMenu() {
    var wrapperWidth = $('.navbar-nav').eq(0).outerWidth();
    var elemWidth = 0;
    var elemCount = elemList.length - 1; 
    
    var moreMenu = '<li class="dropdown">' +
        '<a href="#" class="drpdwn-toggle" data-toggle="drpdwn" role="button"' +
        'aria-haspopup="true" aria-expanded="false" data-url="" name="More"><span class=""></span> More' +
        '<span class="caret"></span></a>' +
        '<div class="drpdwn-menu drpdwn-meditsaveenu-right">' +
        '<ul></ul></div></li>';

    $.each(elemList, function (index, elem) {
        elemWidth += $(elem).outerWidth();
        var currElemWidth = 0; lastElemWidth = 0;
        if ((elemWidth + 57) >= wrapperWidth) {
            if ($('.drpdwn-toggle').length <= 0) $('.navbar-nav').eq(0).append(moreMenu);
            currElemWidth = $(elem).outerWidth();
            $('.drpdwn-menu').children('ul').append(elem);
            elemWidth -= (currElemWidth);
        } 
        
        if(elemWidth >= wrapperWidth && index == elemCount) {
            if ($('.drpdwn-toggle').length > 0) {                
                $('.drpdwn-menu').children('ul').prepend($('.drpdwn-toggle').closest('li').prev());
                elemWidth -= (currElemWidth);
            }
        }
    });

}

function initNavDropdownFunc() {

    $('.drpdwn-menu').find('.dropdown-menu').each(function () {
        $(this).addClass('drpdwn-meditsaveenu-right');
    });

    $('.navbar-nav').find('.dropdown-menu').each(function () {
        var menuLength = $(this).find('ul').children('li').length;
        var columnCount = (Math.ceil(menuLength / 12) <= 4) ? Math.ceil(menuLength / 12) : 4;
        $(this).addClass('col-menu-' + columnCount);
    });

    $('.navbar-nav .dropdown-menu').on('click', function (e) {
        //e.stopImmediatePropagation();
    });

    $(document.body).off('click');
    $(document.body).on('click', function (e) {
        var container = $(".drpdwn-menu");
        var $clicked = $(e.target);
        if (!$clicked.parents().hasClass("drpdwn-menu") && $('[data-toggle="drpdwn"]').attr('aria-expanded') == 'true' && !$clicked.hasClass('drpdwn-menu') || $clicked.parents().hasClass("dropdown-menu")) {
            container.parent().removeClass('open');
            container.siblings('a').attr('aria-expanded', 'false');
        } else if (e.target.className == 'drpdwn-toggle' && $clicked.attr('aria-expanded') == 'false') {
            container.parent().addClass('open');
            container.siblings('a').attr('aria-expanded', 'true');
        }
    });
}

function actionButtonFix(){
	$(".dataTables_scrollBody .btn-group [type='button']").on('click',function (e){
		if($(this).hasClass('dropdown-toggle')){
		}else{
			$(this).next().click();
		}
	});
	var x;
// $('.dataTables_scrollBody .dropdown-toggle').on('click',function (e){
// x= $(this).parent();
// var btnClass = $(this).attr('class');
// var dropDownTop =
// ($(this).offset().top-$(window).scrollTop())+$(this).outerHeight();
// var leftPosition = ($(this).parent().offset().left -$(window).scrollLeft());
// $(this).next().css('top', dropDownTop + "px");
// $(this).next().css('left', leftPosition + "px");
// $(this).next().css('max-width',
// $(this).children('.dropdown-menu').outerWidth() + "px");
// });
	
	$(".dataTables_scrollBody .btn-group").on("shown.bs.dropdown", function () {
        // calculate the required sizes, spaces
        var $ul = $(this).children(".dropdown-menu");
        var $button = $(this).children(".dropdown-toggle");
        var $tbutton = $(this).children('[type="button"]');
        var ulOffset = $ul.offset();
        var ulHeight = $ul.outerHeight();

        var windowHeight = $(window).innerHeight();
        var pageScroll = $('body').scrollTop();

        var dropDownTop = ($tbutton.offset().top-$(window).scrollTop()) - (ulHeight + 2);
        $('.dropdown-menu').removeAttr('style');
        dropDownFixPosition($tbutton, $ul);
        
        var offset = $ul.offset().top;
        var space = windowHeight - ( offset - pageScroll );

        if( space < ulHeight ) {
            $( this ).addClass( "dropup" );
            $ul.css('top', dropDownTop + "px");
        } else  {
            $( this ).removeClass( "dropup" );
        }
	    // });
	     return;
	 }).on("hidden.bs.dropdown", function() {
	     // always reset after close
	     $('.dropdown-menu').removeAttr('style');
	     $(this).removeClass("dropup");
	     return;
	 });
	
// $('.dataTables_scrollBody .btn-group').on('shown.bs.dropdown', function () {
// $(x).addClass("open");
// });
	$(document).scroll(function(){
		chkDdOpen();
	});
	
	$('[class^=dataTables_]').scroll(function(){
		chkDdOpen();
	});
}

function dropDownFixPosition(button,dropdown){
    // autoPopupPosition(button.parent());
	var btnClass = $(button).attr('class');
    var dropDownTop = (button.offset().top-$(window).scrollTop()) + button.outerHeight();
    var leftPosition = (button.parent().offset().left - $(window).scrollLeft()) - (dropdown.outerWidth() - button.parent().outerWidth());
	// var dropDownTop = button.offset().top + button.outerHeight();
	// var leftPosition = button.offset().left + button.outerWidth();
	/* if ($("."+btnClass).parent().hasClass('open')) { */
		dropdown.css('top', dropDownTop + "px");
		dropdown.css('left', leftPosition  + "px");
		dropdown.css('max-width', button.children('.dropdown-menu').outerWidth() + "px");
		// return false;
		// $('[id^=click_]').off('click');
	/* } */
}

function chkDdOpen() {
	
	if($('.btn-group').hasClass('open')) {
		$('.open').children('.dropdown-toggle').attr('aria-expanded', 'false');
		$('.btn-group').removeClass('open');
		$('.btn-group').removeClass('dropup');
	}
	$('.dataTables_scrollBody .dropdown-toggle').each(function(){
		$(this).next().removeAttr('style');
	});
}


function ajaxError(x, e) {
	if (x.status == 999 || x.status ==331 || x.status == 106) {
		removeBgCurtain();
		getErrorConfirmDialog(
				_MESSAGES.sessionExpired_Header,
				_MESSAGES.sessionExpired_Body,
				function() {
					location.href = '/Academy';
				},function() {
					location.href = '/Academy';
				});

	} else if (x.status == 404 || x.status == 500) {
		showErrorMsg();
	}else if(x.status == 0){
		removeBgCurtain();
		getErrorConfirmDialog(
				_MESSAGES.networkError_Header,
				_MESSAGES.networkError_Body,
				function() {
					// location.href = '/Academy';
				});
		
	}
	$(window).off('beforeunload');
}

function showErrorMsg() {
	$('.err_msg').addClass("show");
	setTimeout(function() {
		$('.err_msg').removeClass("show");
	}, 3000);

}




function menuEvents() {
	if (!this.menuId)
		this.menuId = 0;
	var thisAction = this;
	$('#homeMenu a').on('click', function(e, a) {
		e.preventDefault();
		var dataUrl=$(this).attr("data-url");
		if(dataUrl){
		var urlParts = dataUrl.split("/");
		addFiles(urlParts);
		
		if (urlParts.length > 1) {
			var menuId, url, controllerMode, actionType, id, selectedData
			thisAction.menuId = parseInt($(this).attr("id").split("_")[1]);
			thisAction.url = urlParts[0];
			thisAction.controllerMode = parseInt(urlParts[2]);
			thisAction.actionType = parseInt(urlParts[3]);
			thisAction.id = urlParts[4] ? parseInt(urlParts[4]) : 0
			thisAction.selectedData = urlParts[5] ? parseInt(urlParts[5]) : 0;
			handleMenuEvents();
		}
	}

	});
	showCurrentTab();
}

function addFiles(urlParts){
	if (urlParts[0] == "prmsDispatcher") 
		$.getScript("../js/prms.js");
	else if(urlParts[0] == "studentSpirit"){
		$.getScript("../js/studentspirit.js");
		$('head').append('<link href="../css/spirit.css" rel="stylesheet"/>');
	}
		
}
function studentFeatures(){
	
}
/*
 * function showCurrentTab() { $('#homeMenu li ').on( 'click', function() {
 * $(this).removeClass("active"); $(this).addClass("active"); });
 * 
 * 
 * 
 * $('#homeMenu li:first').find(
 * '[data-url^=appAdmin],[data-url^=admissionsApp],[data-url^=prmsDispatcher],a[data-url^=instituteApp],
 * a[data-url^=studentFeatures]').first().trigger( 'click'); }
 */
function showCurrentTab() {
	$('#homeMenu>li a[data-url^=appAdmin],a[data-url^=admissionsApp],a[data-url^=prmsDispatcher],a[data-url^=instituteApp], a[data-url^=studentFeatures]').on(
			'click', function() {
				$('#homeMenu li').each(function() {
					$(this).removeClass("active");
				});
				$(this).parents('li.dropdown').addClass("active");
			});
	if($('#homeMenu li:first').has('ul').length>0)
		$('#homeMenu li:first  ul a').first().trigger('click');
	else{
		$('#homeMenu li:first a').first().trigger('click');
	}
}

function handleMenuEvents() {
	var formData = {
		menuId : this.menuId,
		url : this.url,
		controllerMode : this.controllerMode,
		actionType : this.actionType,
		id : this.id,
		selectedData : this.selectedData
	};
	bgCurtain();
	doAjaxCall(this.url, 'GET', formData, function(data) {
		if (globalDatatable) {
			globalDatatable.destroy();
			globalDatatable = null;
			delete this.prevDatatable;
		}
		$("#adminContent").html(data);
		eval(this.url + "(controllerMode,actionType,id,selectedData);");
		removeBgCurtain();
	});
}

function handle(type, controllerMode, actionType, id, selectedData) {
	switch (parseInt(type)) {
	case 1:
		handleList(controllerMode, actionType, id, selectedData);
		break;
	case 2:
		handleEditShow(controllerMode, actionType, id, selectedData);
		break;
	case 3:
		handleDelete(controllerMode, actionType, id, selectedData);
		break;
	case 4:
		handleAssign(controllerMode, actionType, id, selectedData);
		break;
	case 5:
		handleCommonView(controllerMode, actionType, id, selectedData);
		break;
	case 6:
		handleData(controllerMode, actionType, id, selectedData);
		break;
	case 7:
		handleAssignNoConformation(controllerMode, actionType, id, selectedData);
		break;
	case 8:
		handleMultiEditShow(controllerMode, actionType, id, selectedData);
		break;
	}

}

function handleList(controllerMode, actionType, id, selectedData) {
	bgCurtain();
	var formData = {
		controllerMode : parseInt(controllerMode),
		actionType : parseInt(actionType),
		id : parseInt(id),
		selectedData : parseInt(selectedData),
		menuId : this.menuId
	};

	doAjaxCall(this.url, 'GET', formData, function(data) {
		handleListSuccess(formData, data);
		removeBgCurtain();
	});

}

function beforeGenericSave(formData,obj,value,formId){
	var formContext = $(formId);
	var id = 0;
	var selectedData = 0;
	var postData = formContext.serializeArray();
	var formURL = formContext.attr("action");
	var dataform = new FormData(formContext[0]);
	var that = this;
	var ret=true;
	
	var controlleMode=$('#controllerMode').val();
	var actionType=$('#actionType').val();
	if(controlleMode && actionType){
		
	
	
	switch (parseInt(controlleMode)) {
	case Constants.ControllerMode.UserType:
		
		break;
	case Constants.ControllerMode.Batches:
		switch (parseInt(actionType)) {
		case Constants.ActionType.SAVE:
		case Constants.ActionType.UPDATE:	
			if($('#startDate').val()>$('#endDate').val()){
				showMessage("End Date should be greater than Start Date", "error");
				ret=false;
			}
			break;

		default:
			break;
		}
		break;
	case Constants.ControllerMode.BatchClasses:
		switch (parseInt(actionType)) {
		case Constants.ActionType.SAVE:
		case Constants.ActionType.UPDATE:	
			/*if(!$('#subjectIds').val()){
				showMessage("Select Subjects", "Error");
				ret=false;
			}*/
			break;

		default:
			break;
		}

		break;
	case Constants.ControllerMode.Bill:
		switch (parseInt(actionType)){
		case Constants.ActionType.SAVE:
		case Constants.ActionType.UPDATE:	
			if($('#applicationNo').val()){
				if($('#studapplicationno').val()==undefined){
					showMessage("Student Information Not Available", "error");
					ret=false;
				}else if($('#applicationNo').val()!=$('#studapplicationno').val()){
					showMessage("Student Not Matched With The Application No", "error");
					ret=false;
				}
				
			}else if($('#applicationRefNo').val()){
				if($('#studrefno').val()==undefined){
					showMessage("Student Information Not Available", "error");
					ret=false;
				}else if($('#applicationRefNo').val()!=$('#studrefno').val()){
					showMessage("Student Not Matched With The Reference No", "error");
					ret=false;
				}
				
				
			}else if ($('#usn').val()){
				if($('#userID').val()==undefined &&$('#type').val()!=50 ){
					showMessage("Student Information Not Available", "error");
					ret=false;
				}else if($('#userID').val()==undefined){
					showMessage("Student Information Not Available", "error");
					ret=false;
					studLoginId
				}else if($('#userID').val() && $('#srn').val()!=$('#studLoginId').val()){
					showMessage("Student Not Matched With The USN", "error");
					ret=false;
				}
				
			}
			
			if(!$('#totalAmount').val()){
				showMessage("Add fee", "Error");
				ret=false;
			}else if(($('#ddcheck').val()==1) &&  (!$('#ddamount').val())){
				showMessage("Add DD Details", "error");
				ret=false;
			}else if(($('#cashcheck').val()==1)&&(getInteger($('#cashamount').val(),0)<=0)){
				
				showMessage("Add Cash Details", "error");
				ret=false;
			}else{
				if(!(parseFloat($('#totalAmount').val())==parseFloat($('#grandtotal').val()))){
					showMessage("Grand Total and Total Amount Not Matched", "error");
				ret=false;}
			}
			break;

		default:
			break;
		}
		break;
	case  Constants.ControllerMode.SSMBill:
		switch (parseInt(actionType)){
		case Constants.ActionType.SAVE:
		case Constants.ActionType.UPDATE:	
			if($('#usn').val()){
				if($('#userID').val()==undefined){
					showMessage("Student Information Not Available", "error");
					ret=false;
				}	
				else if($('#usn').val().toUpperCase()!=$('#usnref').val().toUpperCase()){
					showMessage("Student Not Matched With The SRN No", "error");
					ret=false;
				}
				
			}else if($('#studentid').val()){
				if($('#userID').val()==undefined){
					showMessage("Student Information Not Available", "error");
					ret=false;
				}else if($('#userID').val()!=$('#studentid').val()){
					showMessage("Student Not Matched ", "error");
					ret=false;
				}
					
			}else{
				showMessage("Please Enter SRN", "error");
				ret=false;
			}
			
			if(!$('#totalAmount').val()){
				showMessage("Add fee", "Error");
				ret=false;
			}else if(($('#ddcheck').val()==1) &&  (!$('#ddamount').val())){
				showMessage("Add DD Details", "error");
				ret=false;
			}else if(($('#cashcheck').val()==1)&&(getInteger($('#cashamount').val(),0)<=0)){
				
				showMessage("Add Cash Details", "error");
				ret=false;
			}else{
				if(!(parseFloat($('#totalAmount').val())==parseFloat($('#grandtotal').val()))){
					showMessage("Grand Total and Total Amount Not Matched", "error");
				ret=false;}
			}
			break;

		default:
			break;
		}
		break;
	case Constants.ControllerMode.OpenLines:
		switch (parseInt(actionType)){
		case Constants.ActionType.SAVE:
		case Constants.ActionType.UPDATE:	
			$('#sDate').val($('#sDate').val()+' '+$('#sTime').val());
			$('#eDate').val($('#eDate').val()+' '+$('#eTime').val());
			
			var sDate = $('#sDate').val();
			var eDate = $('#eDate').val();
			sDate = sDate.slice(0, -5);
			eDate = eDate.slice(0, -5);
			if(sDate == eDate){
				if(!validateStartAndEndTimes($('#sTime').val(), $('#eTime').val())){ret=false;	}
				break;
			}
			if(!validateStartAndEnddates(new Date(sDate), new Date(eDate))){
				ret=false;	
			}
			break;
		}
		break;
	// Summer Courses Validations
	case Constants.ControllerMode.SummerCourse:
		switch (parseInt(actionType))
		{
		case Constants.ActionType.EXAM_OPEN_LINE:
			if(!validateStartAndEnddates(new Date($('#sDate').val()), new Date($('#eDate').val()))){
				ret=false;	
			}
				
			break;
		case Constants.ActionType.SUMMER_COURSE_HALL_TICKET_OPEN_LINE:	
			if(!validateStartAndEnddates(new Date($('#sDate').val()), new Date($('#eDate').val()))){
				ret=false;
			}
			
			break;
		}
		break;
		
	case InstConstants.ControllerMode.Subjects:
		var wtg=0;
		$("[id^=marks_").each(function(){
			wtg+=parseInt($(this).val());
		});
		if(wtg!=100){
			ret=false;
			showMessage("Total Weightage not matched with %age","error");
		}
		break;
		
	case Constants.ControllerMode.ElectiveGroups:
		switch (parseInt(actionType)){	
			case Constants.ActionType.SAVE:	
				if(validateMaxAndMinSubjects()){
					ret=false;
				}
				break;
			case Constants.ActionType.UPDATE:	
				if(validateMaxAndMinSubjects()){
					ret=false;
				}
				break;
		}
		break;
		
	case Constants.ControllerMode.Notification:
	switch (parseInt(actionType)){
		case Constants.ActionType.SAVE:
		case Constants.ActionType.UPDATE:	
			break;
		}
		break;
	case Constants.ControllerMode.NotificationTemplate:
		switch (parseInt(actionType)){
			case Constants.ActionType.SAVE:
			case Constants.ActionType.UPDATE:	
				break;
			}
			break;
	case Constants.ControllerMode.Assignments:
		/*
		 * case Constants.ActionType.SAVE: case Constants.ActionType.UPDATE:
		 */	
				break;
	case Constants.ControllerMode.Announcements:
		
	    if(validateAnnouncemnet()){
	    	getNumberOfDevice(formData.sendType,formData,obj,value,formId);
	    	
	    	ret=false;
	    }else{
	    	ret=false;
	    }
	    
	   
			break;
			
	case Constants.ControllerMode.GenericScheduler:
		 if($('#scheduletype').val()==3){
			if( !$('#triggerdayofweek').val()){
				showMessage("Please Select  Trigger Day Of Week", "error");
		        return false;
			}
		}else if($('#scheduletype').val()==4){
			if( !$('#triggerdayofmonth').val()){
				showMessage("Please Select  Trigger Day Of Month", "error");
		        return false;
			}
		}else if($('#scheduletype').val()==5){
			if( !$('#triggermonth').val() || !$('#triggerdayofmonth').val()){
				showMessage("Please Select  Trigger Day Of Month & Trigger Month", "error");
		        return false;
			}
		}
		break;
		
	case InstConstants.ControllerMode.TimeTableTemplate:
		timeTableTmpl=[];
		$("#gettemplateData tbody>tr").each(function(){
			console.log($(this));
			var ob={type:$(this).attr("data-type")};
			$(this).children().each(function(){
				if($(this).attr('data-val')=="-1")
					ob[$(this).attr('data-name')]=$(this).children().val();
				else
					ob[$(this).attr('data-name')]=$(this).attr('data-val')

			});
			timeTableTmpl.push(ob);
		});
		$("#timetables").val(JSON.stringify(timeTableTmpl));
		break;
	case InstConstants.ControllerMode.ProgressReport:
		switch (parseInt(actionType)) {
		case Constants.ActionType.SAVE:
		case Constants.ActionType.UPDATE:	
			break;

		default:
			break;
		}
		break;
		
	case Constants.ControllerMode.ManageSyllabus:
		break;
		
	case Constants.ControllerMode.ISA_MARKS_TEMPLATE:
		ret = saveBeforeIsaMarksTemplate();
		break;
		
	case InstConstants.ControllerMode.FacultyDepartment:
		ret = beforeSaveFacultyMailSend();
		break;
		
	case Constants.ControllerMode.StudentPlacement:
		ret = beforeSaveOrUpdatePlacementInformation();
		break;
		
	default:break;
	
	}
	}
	return ret;
}

function validateMaxAndMinSubjects(){
	var maxSubjects  = $('#maxSubjects').val();
	var minSubjects  = $('#minSubjects').val();
	if(maxSubjects == 0){
		showMessage("Max Subjects should be greater than Zero","error");	
		return true;
	}
	else if (maxSubjects < minSubjects){
		showMessage("Max Subjects should be greater than Min Subjects","error");
		return true;
	} else {
		return false;
	}
}

function validateStartAndEnddates(startDate, endDate){
	if (startDate > endDate)
	{
			showMessage("End date should be greater than Start date",'error');
			return false;
	} else {
		return true;
	}
	
}

function validateStartAndEndTimes(startTime, endTime){
	if (startTime >= endTime)
	{
			showMessage("End Time should be greater than Start Time",'error');
			return false;
	} else {
		return true;
	}
	
}

function getControllerModeAndAction(dataform){
	var myObject=[];
	for (var object in dataform.entries())
	{
		if(object[0]==="controllerMode"){
			myObject.push(object[1])
		}
		console.log(j[0]+"===="+j[1]);
	}
}

function handleGenericSave(dataForm,obj,type) {
	var formContext = $("#genericSave");
	var controllerMode = parseInt($('#controllerMode').val());
	var actionType = parseInt($('#actionType').val());
	var id = 0;
	var selectedData = 0;
	var postData = formContext.serializeArray();
	var formURL = formContext.attr("action");
	var formData = new FormData(formContext[0]);
	formData.append("menuId",this.menuId);
	var that = this;
	$("[id^=save-span]").parent().prop('disabled',true);
	switch (parseInt(type)) {
	case 1:
		break;
	case 2:
	case 3:
		/*
		 * if(typeof formData != 'undefined') formData.set('actionType',1);
		 */
		break;
	default:
		break;
	}
	
	doAjaxCall(formURL, 'POST', formData, function(data) {
		var callBack = false;
		var dataArray = data.split("_");
		var status = dataArray[0].toUpperCase();
		var statusResp = dataArray[1];
		if (status == "SUCCESS") {
			callBack = true;
			showMessage(statusResp, "success");
			switch (parseInt(type)) {
			case 1:
				if(modalDialog)
				modalDialog.modal('hide');
				break;
			case 2:
				$(formContext)[0].reset();
				// $(formContext)[0].resetForm();
				resetFormFields();
				$("[id^=save-span]").parent().removeAttr('disabled');

				if(that.offeredTo)
					that.offeredTo={};
				break;
			case 3:
				$("[id^=save-span]").parent().removeAttr('disabled');
				break;
			default:
				break;
			}
		} else if (status == "ERROR") {
			$("[id^=save-span]").parent().removeAttr('disabled');
			showMessage(statusResp, "error");
		}
		
		refreshDatatable();
		if(callBack && obj.callBack) {
			callBackFunction(dataForm.controllerMode, dataForm.actionType, dataForm.id, dataForm.selectedData,formData,that.menuId,data);
		}
	}, false, false);

	return false;
}

function resetFormFields(){
	$('.reset-field[type=radio]').trigger('click');
	$('select.reset-field.remove-inside').html('');
	$('select.reset-field').val(null);
	$('input.reset-field').val(null);
	$('select.reset-validate').removeClass('valid');
}

function handleFormValidation(formId){
	
	var that=this;
	var ret=true;
	var val=null;
	var re =null;
	this.formErrorList=[];
	 $('#'+formId+' input, textarea').each(function(){
		 var dataVal=$(this).attr('data-validate');
		 if(dataVal){
			 var dataVals= dataVal.split(","); 
			 for(var i in dataVals){
			 switch (dataVals[i]) {
			 case Validation.Text.ONLY_ALPHA:
					 $(this).on('keyup focusout',function(){						
						var idx=that.formErrorList.indexOf($(this).attr('name'))
						if(idx>-1)
							that.formErrorList.splice(idx,1);
						val=$(this).val();	
						re = /[^a-zA-Z_ ]/gi;
						 $(this).next().remove();
						 if(re.test(val)) {
							 that.formErrorList.push($(this).attr('name'));
							 $(this).next("span.error").remove();
							 $(this).after('<span class="error">Only Characters allowed</span>');							
							}
						 if(/^\s/.test(val)) {
							 $(this).next("span.error").remove();
							 	that.formErrorList.push($(this).attr('name'));
								$(this).after('<span class="error">First space not allowed</span>');							
	 						}
					});							 			
				 break;
				 
	
			 case Validation.Text.ONLY_NUMERIC:					
					$(this).on('keyup focusout',function(){		
						var idx=that.formErrorList.indexOf($(this).attr('name'))
						if(idx>-1)
							that.formErrorList.splice(idx,1);
						val=$(this).val();
						 re =/[^0-9]/gi;
						 $(this).next().remove();
						 if (re.test(val)) {
							 $(this).next("span.error").remove();
							 $(this).after('<span class="error">Only Numbers allowed</span>');
								that.formErrorList.push($(this).attr('name'));
							}
						 if(/^\s/.test(val)) {
							 $(this).next("span.error").remove();
							 $(this).after('<span class="error">First space not allowed</span>');							
								that.formErrorList.push($(this).attr('name'));
	 						}
					});	
				 break;
			 
			 case  Validation.Text.ONLY_NUMERIC_DOT:
					$(this).on('keyup focusout',function(){
						var idx=that.formErrorList.indexOf($(this).attr('name'))
						if(idx>-1)
							that.formErrorList.splice(idx,1);
						val=$(this).val();
						var re = new RegExp("^(?=.)([+-]?([0-9]*)(\.([0-9]+))?)$")
						$(this).next().remove();
						 if (!(re.test(val))&&!(val=="")) {
							 $(this).next("span.error").remove();
								$(this).after('<span class="error">Enter in Rupee Format</span>');
								that.formErrorList.push($(this).attr('name'));
							}
					});	
				 break;
				
			 case Validation.Text.ALPHA_NUMERIC:
					$(this).on('keyup focusout',function(){
						var idx=that.formErrorList.indexOf($(this).attr('name'))
						if(idx>-1)
							that.formErrorList.splice(idx,1);
						var idx=that.formErrorList.indexOf($(this).attr('name'))
						if(idx>-1)
							that.formErrorList.splice(idx,1);
						
						val=$(this).val();
						 var re = /[^a-zA-Z_ 0-9]/gi;
						 $(this).next().remove();
						 if (re.test(val)) {
							 that.formErrorList.push($(this).attr('name'));
							 $(this).next("span.error").remove();
								$(this).after('<span class="error">Only Characters & Numbers allowed.Ex:123abc,abc123</span>');
								that.formErrorList.push($(this).attr('name'));
							}
							if(/^\s/.test(val)) {
								 $(this).next("span.error").remove();
								$(this).after('<span class="error">First space not allowed</span>');							
								that.formErrorList.push($(this).attr('name'));
	 						}
					});
				 break;
				 
			 case Validation.Text.ALPHA_PLUS:
				 $(this).on('keyup focusout',function(){						
						var idx=that.formErrorList.indexOf($(this).attr('name'))
						if(idx>-1)
							that.formErrorList.splice(idx,1);
						val=$(this).val();	
						re = /[^a-zA-Z\-_ ]/gi;
						 $(this).next().remove();
						 if(re.test(val)) {
							 that.formErrorList.push($(this).attr('name'));
							 $(this).next("span.error").remove();
							 $(this).after('<span class="error">Only Characters and allowed..Ex:123abc,abc-123</span>');							
							}
						 if(/^\s/.test(val)) {
							 $(this).next("span.error").remove();
							 	that.formErrorList.push($(this).attr('name'));
								$(this).after('<span class="error">First space not allowed</span>');							
	 						}
					});							 			
				 break;
				 
				 
			 case Validation.Text.ALPHA_NUMERIC_VALIDSPECIALCHARS:
					$(this).on('keyup focusout',function(){
						var idx=that.formErrorList.indexOf($(this).attr('name'))
						if(idx>-1)
							that.formErrorList.splice(idx,1);
						val=$(this).val();
						 var re = /[\'\"\<]/gi;
						 $(this).next().remove();
							if (re.test(val)) {
								 $(this).next("span.error").remove();
								$(this).after('<span class="error">Special characters [\', \", \<]not allowed</span>');
								that.formErrorList.push($(this).attr('name'));
							}
							if(/^\s/.test(val)) {
								 $(this).next("span.error").remove();
								$(this).after('<span class="error">First space not allowed</span>');							
								that.formErrorList.push($(this).attr('name'));
	 						}
					});
				 break;
			 case Validation.Text.ALPHA_NUMERIC_ALLOWSOMESPECIAL:
				 $(this).on('keyup focusout',function(){
						var idx=that.formErrorList.indexOf($(this).attr('name'))
						if(idx>-1)
							that.formErrorList.splice(idx,1);
						var idx=that.formErrorList.indexOf($(this).attr('name'))
						if(idx>-1)
							that.formErrorList.splice(idx,1);
						
						val=$(this).val();
						 var re = /[^a-zA-Z_ 0-9.&()\-\\]/gi;
						 $(this).next().remove();
						 if (re.test(val)) {
							 that.formErrorList.push($(this).attr('name'));
							 $(this).next("span.error").remove();
								$(this).after('<span class="error">Only Characters & Numbers allowed.Ex:123a&b.c,ab(c)d123</span>');
								that.formErrorList.push($(this).attr('name'));
							}
							if(/^\s/.test(val)) {
								 $(this).next("span.error").remove();
								$(this).after('<span class="error">First space not allowed</span>');							
								that.formErrorList.push($(this).attr('name'));
	 						}
					});
				 break;
				 
			 case Validation.Text.ALPHA_VALIDSPECIALCHARS:
					$(this).on('keyup focusout',function(){
						var idx=that.formErrorList.indexOf($(this).attr('name'))
						if(idx>-1)
							that.formErrorList.splice(idx,1);
						val=$(this).val();
						 var re = /[0-9\'\"\<]/gi;
						 $(this).next().remove();
						 if (re.test(val)) {
							 $(this).next("span.error").remove();
								$(this).after('<span class="error">Number and Special characters [\', \", \<] not allowed</span>');
								that.formErrorList.push($(this).attr('name'));
							}
							if(/^\s/.test(val)) {
								 $(this).next("span.error").remove();
								$(this).after('<span class="error">First space not allowed</span>');							
								that.formErrorList.push($(this).attr('name'));
	 						}
					});
				 break;
			 case Validation.Text.NUMERIC_VALIDSPECIALCHARS:
					$(this).on('keyup focusout',function(){
						var idx=that.formErrorList.indexOf($(this).attr('name'))
						if(idx>-1)
							that.formErrorList.splice(idx,1);
						val=$(this).val();
						 var re = /[a-zA-Z\'\"\<]/gi;
						 $(this).next().remove();
						 if (re.test(val)) {
							 $(this).next("span.error").remove();
								$(this).after('<span class="error">Number and Special characters [\', \", \<] not allowed</span>');
								that.formErrorList.push($(this).attr('name'));
							}
							if(/^\s/.test(val)) {
								 $(this).next("span.error").remove();
								$(this).after('<span class="error">First space not allowed</span>');							
								that.formErrorList.push($(this).attr('name'));
	 						}
					});
				 break;
				 
			 case Validation.Text.NUMERIC_ALPHA_NUMERIC_MANDATORY:
					$(this).on('keyup focusout',function(){
						var idx=that.formErrorList.indexOf($(this).attr('name'))
						if(idx>-1)
							that.formErrorList.splice(idx,1);
						val=$(this).val();
						 var re = /[^a-zA-Z_ 0-9]/gi;
						 $(this).next().remove();
						 if (re.test(val)) {
							 $(this).next("span.error").remove();
								$(this).after('<span class="error">Number and Special characters [\', \", \<] not allowed</span>');
								that.formErrorList.push($(this).attr('name'));
							}
							if(/^\s/.test(val)) {
								 $(this).next("span.error").remove();
								$(this).after('<span class="error">First space not allowed</span>');							
								that.formErrorList.push($(this).attr('name'));
	 						}
						 
					});
				 break;
				 
			 case Validation.Text.NUMERIC_COMMA:
				 $(this).on('keyup focusout',function()
						 {
						var idx=that.formErrorList.indexOf($(this).attr('name'))
						if(idx>-1)
							that.formErrorList.splice(idx,1);
						var idx=that.formErrorList.indexOf($(this).attr('name'))
						if(idx>-1)
							that.formErrorList.splice(idx,1);
						
						val=$(this).val();
						 var re = /[^0-9,]/gi;
						 $(this).next().remove();
						 if (re.test(val)) {
							 that.formErrorList.push($(this).attr('name'));
							 $(this).next("span.error").remove();
								$(this).after('<span class="error">Only Numbers and , allowed');
								that.formErrorList.push($(this).attr('name'));
							}
							if(/^\s/.test(val)) {
								 $(this).next("span.error").remove();
								$(this).after('<span class="error">First space not allowed</span>');							
								that.formErrorList.push($(this).attr('name'));
	 						}
					});
				 break;
			 case Validation.Text.ONLY_NUMERIC_MOBILE_NUMBER:					
				 $(this).on('keyup focusout',function(){		
						var idx=that.formErrorList.indexOf($(this).attr('name'))
						if(idx>-1)
							that.formErrorList.splice(idx,1);
						val=$(this).val();
						re =/[^0-9]/gi;
						 $(this).next().remove();
						 if (parseInt(val.length, 10) >= 10 && parseInt(val.length, 10) <= 10 ) {
							 // $(this).next().remove();
						    } else {
						    	if(val!=""){
						    	 $(this).next("span.error").remove();
								 $(this).after('<span class="error">Only Numbers allowed</span>');
									that.formErrorList.push($(this).attr('name'));
						    	}
						    }
						 
						 if (re.test(val)) {
							 
							 $(this).next("span.error").remove();
							 $(this).after('<span class="error">Only Numbers allowed</span>');
								that.formErrorList.push($(this).attr('name'));
							}
						 
						 
						/*
						 * if(/^\s/.test(val)) {
						 * $(this).next("span.error").remove(); $(this).after('<span
						 * class="error">First space not allowed</span>');
						 * that.formErrorList.push($(this).attr('name')); }
						 */
					});	
				 break;
			 case Validation.Text.DD_CHECK:
				 $(this).on('keyup focusout',function(){	
					 var idx=that.formErrorList.indexOf($(this).attr('name'))
						if(idx>-1)
							that.formErrorList.splice(idx,1);
						val=$(this).val();
						re =/^([0-9]){4,}$/gi;
						$(this).next().remove();
						
							if ((!re.test(val))&& val!='') {
							 
							 $(this).next("span.error").remove();
							 $(this).after('<span class="error">Only Numbers (Min 4 Digits) Allowed</span>');
								that.formErrorList.push($(this).attr('name'));
							}
				 });
				 break;
			 case Validation.Text.GROUP_OF_MAILS:
				 $(this).on('keyup focusout',function(){
						var idx=that.formErrorList.indexOf($(this).attr('name'))
						if(idx>-1)
							that.formErrorList.splice(idx,1);
						var idx=that.formErrorList.indexOf($(this).attr('name'))
						if(idx>-1)
							that.formErrorList.splice(idx,1);
						
						val=$(this).val();
						 var re = /[^a-zA-Z_ 0-9,.@!#$%&'*+-/=?^_`{|}~]/gi;
						 $(this).next().remove();
						 if (re.test(val)) {
							 that.formErrorList.push($(this).attr('name'));
							 $(this).next("span.error").remove();
								$(this).after('<span class="error">Only email format allowed</span>');
								that.formErrorList.push($(this).attr('name'));
							}
							if(/^\s/.test(val)) {
								 $(this).next("span.error").remove();
								$(this).after('<span class="error">First space not allowed</span>');							
								that.formErrorList.push($(this).attr('name'));
	 						}
					});
				 break;
				 
				 
			 case  Validation.Text.ONLY_NUMERIC_PLUS_DOT:
				 $(this).on('keyup focusout',function()
						 {
						var idx=that.formErrorList.indexOf($(this).attr('name'))
						if(idx>-1)
							that.formErrorList.splice(idx,1);
						var idx=that.formErrorList.indexOf($(this).attr('name'))
						if(idx>-1)
							that.formErrorList.splice(idx,1);
						val=$(this).val();
						 var re=/^(?:[0]{1}|[1-9]\d{0,2}|0)?(?:\.\d{0,2})?$/gm;
						 $(this).next().remove();
						 if (!re.test(val)) {
							 that.formErrorList.push($(this).attr('name'));
							 $(this).next("span.error").remove();
							 $(this).after('<span class="error">Only Numbers ( Max 3 Digits And Max 2 Decimal) Allowed');
								that.formErrorList.push($(this).attr('name'));
							}
							if(/^\s/.test(val)) {
								 $(this).next("span.error").remove();
								$(this).after('<span class="error">First space not allowed</span>');							
								that.formErrorList.push($(this).attr('name'));
	 						}
					});
				 break;
				
			
			default:
				break;
			}
		 }
		 }
	 });

}
function callBackFunction(controllerMode, actionType, id, selectedData,formData,menuId,data) {
	
	switch (controllerMode) {
	case Constants.ControllerMode.BatchClasses:
		document.getElementById('showbc').click();
		if(actionType == Constants1.ActionType1.MANAGE_LABS){
			displayListOfSectionBasedonBatchclassId();
			$("[id^=save-span]").parent().prop('disabled',false);
		}
		break;	
	case Constants.ControllerMode.MobileMessages:
		document.getElementById('menuTab_' + menuId).click();
		break;
	case Constants.ControllerMode.ElectiveGroups:
		document.getElementById('menuTab_' + menuId).click();
		break;
	case Constants.ControllerMode.UserRole:
		if(actionType ==  Constants.ActionType.ADD_FACULTY_GROUP){
			loadExistedFaculty();
		}
	case PRMSConstants.ControllerMode.PROBLEMTYPECONTROLLER:
	case PRMSConstants.ControllerMode.CATEGORYCONTROLLER:
	case PRMSConstants.ControllerMode.BUILDINGCONTROLLER:
	case Constants.ControllerMode.Batches:
	case Constants.ControllerMode.Classess:
	case InstConstants.ControllerMode.Institution:
	case Constants.ControllerMode.Department:
	case Constants.ControllerMode.FinancialHead:
	case Constants.ControllerMode.BankMaster:
	case Constants.ControllerMode.Quota:
	case Constants.ControllerMode.AdmissionCycle:
	case Constants.ControllerMode.OpenLines:
	case Constants.ControllerMode.Documents:
	case InstConstants.ControllerMode.CalendarOfEvents:	
	case InstConstants.ControllerMode.CalendarEvent:
	case InstConstants.ControllerMode.EventCalendar:
	case Constants.ControllerMode.AdmissionCategory:
	case Constants.ControllerMode.BranchInfo:
	case Constants.ControllerMode.Education:
	case Constants.ControllerMode.ManageEducationDetails:
	case Constants.ControllerMode.EntranceExam:
	case Constants.ControllerMode.Program:
	case InstConstants.ControllerMode.ESA_Results:
	case Constants.ControllerMode.CustomReport:
	case Constants.ControllerMode.GenericScheduler:
	case Constants.ControllerMode.FrequentlyAskedQuestions:
	case InstConstants.ControllerMode.MANAGE_BUILDING:
	case Constants.ControllerMode.ManageRooms:
	case Constants.ControllerMode.SUPPORTTYPE:	
	case InstConstants.ControllerMode.PLACEMENTCYCLE:
	case InstConstants.ControllerMode.PlacementCompanyController :
		$("#menuTab_" + menuId).trigger("click");
		break;	
	case InstConstants.ControllerMode.SummerCourse:
		document.getElementById('showsc').click();
		break;
	case InstConstants.ControllerMode.Subjects:
		if(parseInt(id)==0){
			var sel=$("#subjectId").val();
			$("#menuTab_" + menuId).trigger("click");
			this.selSubject=$("#subjectId").val();
		}
		else{
			$("#subjectSearchSubmit").submit();
		}
			
		break;
	case Constants.ControllerMode.ISA_MARKS_MASTER:
		$("#menuTab_" + menuId).trigger("click");
		break;		
	case Constants.ControllerMode.ISA_MARKS_TEMPLATE:
		$("#menuTab_" + menuId).trigger("click");
		break;
		
	case Constants.ControllerMode.AdmissionDocuments:
		getAdmissionDocuments(3810, 5);
//		$("#menuTab_" + menuId).trigger("click");
		break;
		
	case Constants.ControllerMode.Bill:
		var dataArray = data.split("_");
		var id = dataArray[2];
		var url="reports/Reports/receipt/0/"+id;
		var w=window.open(url,null);
		w.window.print(); 
		// modalDialog.modal('hide');
	//	$("#menuTab_" + menuId).trigger("click");
		$('#bill-save').removeClass("not-active");
		 resetReceiptForm();
		break;
	case Constants.ControllerMode.Visitor_Management:
		getVisitorsDetailsBySearch();
		var dataArray = data.split("_");
		var id = dataArray[2];
		var url="reports/Reports/receipt/0/"+id;
		var w=window.open(url,null);
		w.window.print(); 
		
		break;
	case  Constants.ControllerMode.SSMBill:
		var dataArray = data.split("_");
		var id = dataArray[2];
		var url="reports/Reports/ssmreceipt/0/"+id;
		var w=window.open(url,null);
		w.window.print(); 
		// modalDialog.modal('hide');
		$("#menuTab_" + menuId).trigger("click");
		$('#bill-save').removeClass("not-active");
		 resetReceiptForm();
		break;
		
	case Constants.ControllerMode.Notification:
		$("#menuTab_" + menuId).trigger("click");
		break;
	case Constants.ControllerMode.NotificationTemplate:
		$("#menuTab_" + menuId).trigger("click");
		break;
	case Constants.ControllerMode.Announcements:
		if(tempModel){
			tempModel.modal('hide');
			tempModel=null;
		}
		$("#menuTab_" + menuId).trigger("click");
		break;
	case Constants.ControllerMode.RecommendedVideo:
		$("#menuTab_" + menuId).trigger("click");
		setTimeout(function(){
			updateCurrentDataTable();
		},100)
		break;
		case Constants.ControllerMode.Assignments:
		switch (parseInt(actionType)){
		case Constants.ActionType.ADD:
		case Constants.ActionType.SHOWEDIT:
				$("#menuTab_" + menuId).trigger("click");
				 modalDialog.modal('hide');
				break;
			}
		break;
		
		case InstConstants.ControllerMode.FacultyDepartment:
			if(actionType == Constants.ActionType.ATTENDANCE1 && menuId == 882) {
				document.getElementById('menuTab_' + menuId).click();
				$('[id^=generic-save-id]').prop('disabled', true);
			}
			if(actionType == Constants.ActionType.FACULTY_MAIL_SEND) {
				modalDialog.modal('hide');
				document.getElementById('menuTab_' + menuId).click();
			}
			break;
			
		case Constants.ControllerMode.StudentAssignments:
			switch (parseInt(actionType)){
			case Constants.ActionType.ADD:
			case Constants.ActionType.EDIT:
		
					/* uploadAssignmentFile(formData,data); */
					$("#menuTab_" + menuId).trigger("click");
					
					
				}
			break;
		case InstConstants.ControllerMode.TimeTableTemplate :
			switch (parseInt(actionType)){
				case Constants.ActionType.ADD:
					document.getElementById('menuTab_' + menuId).click();
					break;
				case Constants.ActionType.EDIT:
					document.getElementById('menuTab_' + menuId).click();
					break;
			}
			
		case InstConstants.ControllerMode.ProgressReport:
			switch (parseInt(actionType)) {
			case Constants.ActionType.ADD:
				document.getElementById('menuTab_' + menuId).click();
				break;
			case Constants.ActionType.EDIT:
				document.getElementById('menuTab_' + menuId).click();
				break;

			default:
				break;
			}
			break;
			
		case InstConstants.ControllerMode.UsersManagement:
			getManagementUsers(id);
			break;
			
		case InstConstants.ControllerMode.AssignmentType:
			$("#menuTab_" + menuId).trigger("click");
			break;

		case Constants.ControllerMode.RecipientConfiguration:
			switch (parseInt(actionType)) {
			case Constants.ActionType.ADD:
				document.getElementById('menuTab_' + menuId).click();
				break;
			case Constants.ActionType.EDIT:
				document.getElementById('menuTab_' + menuId).click();
				break;
			}
			break;
			
		case Constants.ControllerMode.FeeMaster:
			getFeeMaster(6340, 5, 1);
			break;
			
		case Constants.ControllerMode.StudentPlacement:
			$('a#menuTab_'+ menuId).click();
			break;
			
		case InstConstants.ControllerMode.PlacementCompanyController:
			switch (parseInt(actionType)) {
			case Constants.ActionType.ADD:
				document.getElementById('menuTab_' + menuId).click();
				break;
			case Constants.ActionType.EDIT:
				document.getElementById('menuTab_' + menuId).click();
				break;
			}
			break;
		case Constants.ControllerMode.AdminAdmissions:
			switch (parseInt(actionType)) {
			case 25:
				modalDialog.modal('hide');
				handle(6,5110,5,1,0);
				var dataArray = data.split("_");
				var id = dataArray[2];
				var url="reports/Reports/receipt/0/"+id;
				var w=window.open(url,null);
				w.window.print(); 
				

				break;
			}
			break;
		default:
			break;		
	}
}

function handleData(controllerMode, actionType, id, selectedData, featureMasterId) {
	eval(this.url + "(controllerMode,actionType,id,selectedData,featureMasterId);");
}

function handleListSuccess(formData, data) {
	eval(this.url + "(controllerMode,actionType,id,selectedData);");
}


function saveManageLabDetails(controllerMode, actionType, id, selectedData){
	$('#dt_btnContainer a:eq(0)').blur();
	getCurrentDataTable();
	$(".outside-action-btn").addClass("disabled");
	var formData = {
		controllerMode : controllerMode,
		actionType : actionType,
		id : id,
		selectedData : selectedData,
		menuId : this.menuId
	};
	var obj = getDialogMessage(controllerMode, actionType, id, selectedData);
	doAjaxCall(this.url, 'GET', formData, function(data) {
		handleManageLabEditShowSuccess(formData, data, obj);
		
	});
	
	
}



function handleManageLabEditShowSuccess(formData, data, obj) {

	var that=this;
	this.formErrorList=[];
	var buttons = [
			{
				type : "button",
				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='save-span-1'></span>Create Labs",
				className : "btn-sm btn-default",
				callback : function(e) {
					if (!$("#genericSave").valid() || that.formErrorList.length>0)
						return false;
					var value=1;
					if($("#buttonMode").val()==0)// its not close the pop
													// up(set value in jsp)
						value=0;
					if(beforeGenericSave(formData,obj,value,"#genericSave")){
					return handleGenericSave(formData,obj,0);
					}else{
						modalDialog.modal('show');
						return false;
					}
				}
			},
			{
				type : "cancel",
				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
				className : "btn-sm btn-default",
				callback : null
			} ];
	
	
	getModalDialog(
			'large',
			obj.title,
			data,
			buttons,
			function() {
				eval(this.url
						+ "(formData.controllerMode,formData.actionType,formData.id,formData.selectedData,true);");
				$("#save-span-1").parent().attr("id","generic-save-id");
				attachEnterEvent('genericSave','generic-save-id');
				handleFormValidation('genericSave');
			});
}

function handleEditShow(controllerMode, actionType, id, selectedData) {
	$('#dt_btnContainer a:eq(0)').blur();
	getCurrentDataTable();
	$(".outside-action-btn").addClass("disabled");
	var formData = {
		controllerMode : controllerMode,
		actionType : actionType,
		id : id,
		selectedData : selectedData,
		menuId : this.menuId
	};
	var obj = getDialogMessage(controllerMode, actionType, id, selectedData);
	doAjaxCall(this.url, 'GET', formData, function(data) {
		handleEditShowSuccess(formData, data, obj);
		$(".outside-action-btn").removeClass("disabled");
	});
}

function handleEditShowSuccess(formData, data, obj) {

	var that=this;
	this.formErrorList=[];
	var buttons = [
			{
				type : "button",
				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='save-span-1'></span>Save",
				className : "btn-sm btn-default",
				callback : function(e) {
					if (!$("#genericSave").valid() || that.formErrorList.length>0)
						return false;
					var value=1;
					if($("#buttonMode").val()==0)// its not close the pop
													// up(set value in jsp)
						value=0;
					if(beforeGenericSave(formData,obj,value,"#genericSave")){
					return handleGenericSave(formData,obj,value);
					}else{
						modalDialog.modal('show');
						return false;
					}
				}
			},
			{
				type : "cancel",
				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
				className : "btn-sm btn-default",
				callback : null
			} ];
	getModalDialog(
			'large',
			obj.title,
			data,
			buttons,
			function() {
				eval(this.url
						+ "(formData.controllerMode,formData.actionType,formData.id,formData.selectedData,true);");
				$("#save-span-1").parent().attr("id","generic-save-id");
				attachEnterEvent('genericSave','generic-save-id');
				handleFormValidation('genericSave');
			});
	
	
}

function handleMultiEditShowSuccess(formData, data, obj) {
	var buttons = [
			{
				type : "button1",
				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='save-span-1'></span>Save",
				className : "btn-sm btn-default",
				callback : function(e) {
					if (!$("#genericSave").valid())
						return false;
					return handleGenericSave(formData,obj,1);
				}
			},
			{
				type : "button2",
				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='save-span-2'></span>Save & Add New",
				className : "btn-sm btn-default",
				callback : function(e) {
					if (!$("#genericSave").valid())
						return false;
					return handleGenericSave(formData,obj,2);
				}
			},
			{
				type : "button3",
				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='save-span-3'></span>Save & Duplicate",
				className : "btn-sm btn-default",
				callback : function(e) {
					if (!$("#genericSave").valid())
						return false;
					return handleGenericSave(formData,obj,3);
				}
			},
			{
				type : "cancel",
				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
				className : "btn-sm btn-default",
				callback : null
			} ];
	getModalDialog(
			'large',
			obj.title,
			data,
			buttons,
			function() {
				eval(this.url
						+ "(formData.controllerMode,formData.actionType,formData.id,formData.selectedData,true);");
				$("#save-span-1").parent().attr("id","generic-save-id");
				attachEnterEvent('genericSave','generic-save-id');
				handleFormValidation('genericSave');
			});
}

function handleMultiEditShow(controllerMode, actionType, id, selectedData) {
	getCurrentDataTable();
	$(".outside-action-btn").addClass("disabled");
	var formData = {
		controllerMode : controllerMode,
		actionType : actionType,
		id : id,
		selectedData : selectedData,
		menuId : this.menuId
	};
	var obj = getDialogMessage(controllerMode, actionType, id, selectedData);
	doAjaxCall(this.url, 'GET', formData, function(data) {
		handleMultiEditShowSuccess(formData, data, obj);
		$(".outside-action-btn").removeClass("disabled");
	});

}

function handleDelete(controllerMode, actionType, id, selectedData,
		featureMasterId) {
	var resp = getDialogMessage(controllerMode, actionType, id, selectedData);
	getConfirmDialog(resp.title, resp.message, function() {
		var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			id : id,
			menuId : this.menuId,
			featureMasterId : featureMasterId
		};
		doAjaxCall(this.url, 'GET', formData, function(data) {
			var dataArray = data.split("_");
			var status = dataArray[0].toUpperCase();
			var statusResp = dataArray[1];
			if (status == "SUCCESS") {
				showMessage(statusResp, "success");
				if(resp.trigger){
					afterHandleDelete(formData,data,function(){});
				}else if (!globalDatatable) {

					$("#menuTab_" + this.menuId).trigger("click");
				}
				refreshDatatable();
			} else if (status == "ERROR") {
				showMessage(statusResp, "error");
			}

		});
	});
}

function afterHandleDelete(formData,data,callback){
	
	var controllerMode=formData.controllerMode;
	var actionType=formData.actionType;
	
	switch (parseInt(controllerMode)) {
	case Constants.ControllerMode.ValidatePhoto:
		switch (parseInt(actionType)) {
		case Constants.ActionType.DELETE:
			$("#searchExcludeStudentsId")[0].click();
			break;
		}
		break;
	case Constants.ControllerMode.FeeMaster:
		getFeeMaster(6340, 5, 1);
		break;
	}
}

function handleAssign(controllerMode, actionType, id, selectedData) {
	var formData = {
		controllerMode : parseInt(controllerMode),
		actionType : parseInt(actionType),
		id : id,
		selectedId : selectedData,
		menuId : this.menuId
	};
	var buttonInfo = $("a:focus").text();
	selectedData = [ selectedData, buttonInfo ]
	var resp = getDialogMessage(controllerMode, actionType, id, selectedData);
	var that = this;
	getConfirmDialog(resp.title, resp.message, function() {
		doAjaxCall(this.url, 'GET', formData, function(data) {
			var dataArray = data.split("_");
			var status = dataArray[0].toUpperCase();
			var statusResp = dataArray[1];
			if (status == "SUCCESS") {
				showMessage(statusResp, "success");
			} else if (status == "ERROR") {
				showMessage(statusResp, "error");
			}
			if (!globalDatatable) {
				$("#menuTab_" + that.menuId).trigger("click");
			} else {
				refreshDatatable();
			}
		});

	});

}

function handleAssignNoConformation(controllerMode, actionType, id,
		selectedData) {
	var formData = {
		controllerMode : parseInt(controllerMode),
		actionType : parseInt(actionType),
		id : id,
		selectedId : selectedData,
		menuId : this.menuId
	};
	var buttonInfo = $("a:focus").text();
	selectedData = [ selectedData, buttonInfo ]
	var resp = getDialogMessage(controllerMode, actionType, id, selectedData);
	var that = this;
	doAjaxCall(this.url, 'GET', formData, function(data) {
		var dataArray = data.split("_");
		var status = dataArray[0].toUpperCase();
		var statusResp = dataArray[1];
		if (status == "SUCCESS") {
			showMessage(statusResp, "success");
		} else if (status == "ERROR") {
			showMessage(statusResp, "error");
		}
		if (!globalDatatable) {
			$("#menuTab_" + that.menuId).trigger("click");
		} else {
			refreshDatatable();
		}
	});

}

function handleCommonView(controllerMode, actionType, id, selectedData) {
	
	
	this.formErrorList=[];
	var buttonName = $("a:focus").text();
	var formData = {
		controllerMode : parseInt(controllerMode),
		actionType : parseInt(actionType),
		id : id,
		selectedData : selectedData,
		menuId : this.menuId
	};
	var buttons = {};
	var buttons = [ {
		type : "cancel",
		label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Close",
		className : "btn-sm btn-default",
		callback : null
	} ];
	var genTitile = selectedData;
	if (!genTitile)
		genTitile = "";

	var title = handleCommonViewTitle(controllerMode, actionType, id, selectedData);

	doAjaxCall(this.url, 'get', formData, function(data) {
		getModalDialog('large', title, data, buttons, function() {
			 eval(this.url + "(controllerMode,actionType,id,selectedData);");

		});
		
	});
	
}

function handleCommonViewTitle(controllerMode, actionType, id, selectedData) {

	var title=selectedData;
	switch (parseInt(controllerMode)) {
	case 9000:
		switch (parseInt(actionType)) {
		case 89:
			var ttl=selectedData.split("&&");
			title="ISA Paatern:"+ttl[2]+"-"+ttl[3]+"-"+ttl[4];
			break;

		default:
			break;
		}
		break;

	default:
		break;
	}
	return title;
}
function handleCustomView(controllerMode, actionType, id, selectedData) {
	var x=true;
	$('#dt_btnContainer a:eq(0)').blur();
	this.formErrorList=[];
	var buttonName = $("a:focus").text();
	var formData = {
		controllerMode : parseInt(controllerMode),
		actionType : parseInt(actionType),
		id : id,
		selectedData : selectedData,
		menuId : this.menuId
	};
	var that=this;
	var obj = getDialogMessage(controllerMode, actionType, id, selectedData);
	var buttons = {};
	var buttons = [	{
		type : "button",
		label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='save-span-1'></span>Save",
		className : "btn-sm btn-default",
		callback : function(e) {
			if (!$("#genericSave").valid() || that.formErrorList.length>0)
				return false;
			var value=1;
			if($("#buttonMode").val()==0)// its not close the pop
											// up(set value in jsp)
				value=0;
			if(beforeGenericSave(formData,obj,value,"#genericSave")){
			return handleGenericSave(formData,obj,value);
			}else{
				modalDialog.modal('show');
				return false;
			}
		}
	},
	{
		type : "cancel",
		label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Close",
		className : "btn-sm btn-default",
		callback : function(data){
			
			getConfirmDialog(title, "Are you sure you want to close ? ", function() {
				modalDialog.modal('hide');
			});
			return false;
		}
	} ];
	var genTitile = selectedData;
	if (!genTitile)
		genTitile = "";

	var title = "" + genTitile + " " + buttonName;

	doAjaxCall(this.url, 'get', formData, function(data) {
		getModalDialog('large', title, data, buttons, function() {
			eval(this.url
					+ "(formData.controllerMode,formData.actionType,formData.id,formData.selectedData,true);");
			$("#save-span-1").parent().attr("id","generic-save-id");
			attachEnterEvent('genericSave','generic-save-id');
			handleFormValidation('genericSave');

		},null,null,function(){
			 if(x){
				 x=false;
			getConfirmDialog(title, "Are you sure you want to close ? ", function() {
				if(modalDialog){
					modalDialog.modal('hide');
					}
				x=true;
				
				
				$('#dt_btnContainer a:eq(0)').focus();
			}, function() {
				x=true;
				$('#dt_btnContainer a:eq(0)').focus();
			});
			 }
		});

	});
}

function getDialogMessage(controllerMode, actionType, id, selectedData) {
	var resp = eval(this.url + "(controllerMode, actionType, id, selectedData, false);");
	return resp;
}

function showMessage(msg, mode) {
	$.notify(msg, mode);
}

function removeBgCurtain() {
	$(document).ajaxStop($.unblockUI);
}

function bgCurtain() {
	$.blockUI({
				message : '<img height="32px" width="32px" src="/Academy/images/Preloader_3.gif" /> &nbsp; &nbsp;Just a moment...',
				css : {
					border : 'none',
					backgroundColor : '#000',
					padding : '5px',
					'-webkit-border-radius' : '10px',
					'-moz-border-radius' : '10px',
					opacity : .5,
					color : '#fff',
					'-webkit-border-radius' : '10px',
					'-moz-border-radius' : '10px'
				}
			});
}

var ajaxData=null;
function doAjaxCall(url, type, data, successCall, processData, contentType) { // ,contentType,dataType
	$
			.ajax({
				url : url,
				type : type,
				processData : typeof processData === 'undefined' ? true
						: processData,
				contentType : typeof contentType === 'undefined' ? "application/x-www-form-urlencoded"
						: contentType,
				data : data,
				success : function(data,status,xhr) {
					ajaxData=data;
					if (successCall) {
						successCall(data);
					}
				}
			});
}

function setDateTimePicker() {
	$('.form_date').datetimepicker({
		weekStart : 1,
		todayBtn : 1,
		autoclose : 1,
		todayHighlight : 1,
		startView : 2,
		minView : 2,
		forceParse : 0,
		showClose : true,

	});
	$('.form_time').datetimepicker({
		weekStart : 1,
		todayBtn : 0,
		autoclose : 1,
		todayHighlight : 1,
		startView : 1,
		minView : 0,
		maxView : 1,
		forceParse : 0,
		useCurrent : true,
		showClose : 1,
		initialDate : new Date(),
		minuteStep : 1
	});
}

function getCombobox(url, id, selected, prependlist, funccall) {
	
	doAjaxCall(url, "GET", {},  function(data) {
			processCombo(id, data, selected, prependlist, funccall);
	});
}
function processCombo(comboName, data, selected, prependlist, funccall) {

// if ($('#' + comboName).val()) {
// return;
// }

	$('#' + comboName).html(prependlist + data);
	var multiple = $('#' + comboName).attr("multiple");
	var selVal = $('#' + comboName).attr("data-selected");
	if (selVal != '') {
		if (multiple && selVal) {
			$('#' + comboName).val(selVal.split(","));
			// handleSelectedValues(selVal, comboName);
		} else {
			$('#' + comboName).val(selVal);
		}
	}
	if (typeof funccall == 'function') {
		funccall(prependlist+data,selVal);
	}
}

function getCheckCombobox(url, id, selected, prependlist, postpendlist,
		funccall) {
	
	$.ajax({
		url : url,
		type : 'get',
		success : function(data) {
			processCheckCombo(id, data, selected, prependlist, postpendlist,
					funccall);
		}
	});
}

function processCheckCombo(comboName, data, selected, prependlist,
		postpendlist, funccall) {
	var ids=comboName.split("-");
		
		if(typeof prependlist == 'undefined' || !prependlist){
			prependlist=""
		}
		if(typeof postpendlist == 'undefined' || !postpendlist){
			postpendlist=""
		}
		
		var appenData = prependlist + data + postpendlist;
		
		$('#' + ids[0]).html(appenData);
		var selVal = $('#' + ids[0]).attr("data-selected");
		if(!selVal)
			selVal=$('#' + ids[0]).val();
		checkComboValues = {};
		if(selVal && selVal.length>0){
			selVal=selVal.split(",");
			
			var selectedCheckId='selectedCheck';
			if(ids.length>2){
				selectedCheckId=ids[2];
			}
			
		for(var i in selVal){
			$('#' + ids[0] + '>li a').each(function() {
				var currentCheckbox = $(this).children().eq(0);

				if (selVal[i]==$(currentCheckbox).val()){
					$(currentCheckbox).attr("checked","checked");
					$("#"+selectedCheckId).append($(this).parent().text()+",");
					var obj = {
							id : $(currentCheckbox).attr('id'),
							value : $(currentCheckbox).attr('value'),
							label : $(this).parent().text(),
							currentIdComBoId:ids[0]
						}
						checkComboValues[obj.id] = obj;
					return false;
				}
			});
		}
		}
		
		if (typeof funccall == 'function') {
			funccall();
		}
		attachCheckComboEvent(comboName);
}

function getDatalistBox(url, id, selected, prependlist, postpendlist,
		funccall) {
	
	$.ajax({
		url : url,
		type : 'get',
		success : function(data) {
			processDatalistBox(id, data, selected, prependlist, postpendlist,
					funccall);
		}
	});
}

function processDatalistBox(comboName, data, selected, prependlist,
		postpendlist, funccall) {
	var appenData = (typeof prependlist !== 'undefined' ? prependlist : "")
	+ data + (typeof postpendlist !== 'undefined' ? postpendlist : "");
	
	$('#' + comboName).html(prependlist + data);
// var multiple = $('#' + comboName).attr("multiple");
// var selVal = $('#' + comboName).attr("data-selected");
// if (selVal != '') {
// if (multiple && selVal) {
// $('#' + comboName).val(selVal.split(","));
// // handleSelectedValues(selVal, comboName);
// } else {
// $('#' + comboName).val(selVal);
// }
// }
	if (typeof funccall == 'function') {
		funccall();
	}
}

var checkComboValues = {};
function attachCheckComboEvent(comboName) {
	// checkComboValues = {};
	var ids=comboName.split("-");
	var selectedCheckId='selectedCheck';
	if(ids.length>2){
		selectedCheckId=ids[2];
	}
	
	$('#' + ids[0] + '>li a').on('click', function() {
		var currentCheckbox = $(this).children().eq(0);
		var isCheckAll=false;
		if ($(currentCheckbox).is(':checked')) {
			if($(currentCheckbox).attr('value')==0){
				attachCheckComboEventCheckAll(ids[0],currentCheckbox);
				isCheckAll=true;
			}else{
			var obj = {
				id : $(currentCheckbox).attr('id'),
				value : $(currentCheckbox).attr('value'),
				label : $(this).text(),
				currentIdComBoId:ids[0]
			}
			checkComboValues[obj.id] = obj;
			}
		} else if($(currentCheckbox).attr('value')==0) {
			attachCheckComboEventUnCheckAll(ids[0],currentCheckbox);
		}else{
			var id = $(currentCheckbox).attr('id');
			if (checkComboValues[id])
				delete checkComboValues[id];
		}
		$("#"+selectedCheckId).empty();
		$('#' + ids[1]).empty();
		var j = 1;
		var sts="";
		if(isCheckAll){
			sts=displayCheckAllLabel(sts,j,ids[0]);
			$("#"+selectedCheckId).append($(this).text());
		}else{
			var selectedComBoxLength=0;
		for ( var i in checkComboValues) {
			if (Object.keys(checkComboValues).length == j && ids[0]==checkComboValues[i].currentIdComBoId){
				$("#"+selectedCheckId).append(checkComboValues[i].label);
				sts+=checkComboValues[i].value;
				selectedComBoxLength++;
			}else if(ids[0]==checkComboValues[i].currentIdComBoId){
				$("#"+selectedCheckId).append(checkComboValues[i].label + ",");
				sts+=checkComboValues[i].value+",";
				selectedComBoxLength++;
			}
			j++;
		}
		isCheckAllLabels(ids[0],selectedCheckId,selectedComBoxLength);
		}
		$('#' + ids[1]).val(sts);
	});
}

function clearDefaultValue(comboName) {
	$('#' + comboName + ' option:contains("Please Select")').val('');
}

var modalDialog = null;
function getModalDialog(size, title, data, buttons, shownFunctions,
		hiddenFunctions, flag,escapfunction) {
	var btns = {};
	if (buttons && buttons.length > 0)
		for (i = 0; i < buttons.length; i++) {
			btns[buttons[i]["type"]] = {
				label : buttons[i]["label"] ? buttons[i]["label"] : null,
				className : buttons[i]["className"] ? buttons[i]["className"]
						: "default",
				callback : buttons[i]["callback"] ? buttons[i]["callback"]
						: null
			};
		}
	modalDialog = bootbox.dialog({
		size : size,
		title : title + " ",
		show : false,
		message : data,
		onEscape : function() {
			
			/*
			 * if($('.bootbox-close-button').on("click")){ console.log("yoga");
			 * return false; }else
			 */ if(escapfunction &&typeof escapfunction==='function'){
				escapfunction();
				return false;
			}else {
				return false;
			}
			
		},
		buttons : btns
	});

	modalDialog.on('shown.bs.modal', function() {
		if (shownFunctions) {
			shownFunctions();
		}
	});

	modalDialog.on('hidden.bs.modal', function() {
		
		$('.tooltipevent').hide();
		if (hiddenFunctions) {
			hiddenFunctions();
		}
		/*if (modalDialog) {
			$(document.body).addClass('modal-open');
		}*/
		if (typeof(tempModel) !== 'undefined' && tempModel) {
			$(document.body).addClass('modal-open');
		}
		modalDialog = null;
		chkForOpenModal();
	});
	
	modalDialog.modal('show');
}
var modalConfirm;
function getConfirmDialog(title, message, yesCallback, noCallBack) {
	modalConfirm = bootbox
			.confirm(
					{
						message : message,
						title : title,
						buttons : {
							confirm : {
								label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true'></span>Yes",
								className : "btn btn-sm btn-default",
							},
							cancel : {
								label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>No",
								className : "btn btn-sm btn-default",
							},
						},
						callback : function(result) {
							if (result && yesCallback) {
								yesCallback();
							} else if (noCallBack) {
								noCallBack();
							}
						}
					}).init(function() {

			}).on('hidden.bs.modal', function(e) {

				 // $(document.body).addClass('modal-open');
				chkForOpenModal();

			});

	modalConfirm.on('hidden.bs.modal', function(e) {
		if (modalDialog) {
			$(document.body).addClass('modal-open');
		}
		$(document.body).css("padding-right", "0");
		modalConfirm=null;
	});
	/*
	 * if (modalDialog) { modalDialog.on('hidden.bs.modal', function() {
	 * $(document.body).removeClass('modal-open'); }); } else {
	 * $(document.body).addClass('modal-open'); }
	 */
	$(" .bootbox-confirm .modal-footer button").css({
		"float" : "right",
		"margin-left" : "10px"
	});
}

function getErrorConfirmDialog(title, message, yesCallback, noCallBack) {
	modalConfirm = bootbox
			.confirm(
					{
						message : message,
						title : title,
						buttons : {
							confirm : {
								label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true'></span>OK",
								className : "btn btn-sm btn-default",
							},
							
						},
						callback : function(result) {
							if (result && yesCallback) {
								yesCallback();
							} else if (noCallBack) {
								noCallBack();
							}
						}
					}).init(function() {

			}).on('hidden.bs.modal', function(e) {

				 // $(document.body).addClass('modal-open');
				chkForOpenModal();


			});

	modalConfirm.on('hidden.bs.modal', function(e) {
		if (modalDialog) {
			$(document.body).addClass('modal-open');
		}
		$(document.body).css("padding-right", "0");
	});
	$(" .bootbox-confirm .modal-footer button").css({
		"float" : "right",
		"margin-left" : "10px"
	});
	$('button[data-bb-handler="cancel"][type="button"]').remove();
}

var globalDatatable = null;
allDatatables = [];
/* $.fn.dataTable.ext.errMode = 'none'; */


function getDatatable(id, url, columns, order,lengthMenu) {

	var col = 0, type = 'asc';
	if (order && Object.keys(order).length > 1) {
		col = order.col, type = order.type;
	}
	var lengthMenu1=[10, 25, 50];
	var lengthMenu2=[10, 25, 50];
	var lengthMenu0=[lengthMenu1,lengthMenu2]
	if(lengthMenu && lengthMenu.length==2){
		lengthMenu0=[lengthMenu[0],lengthMenu[1]]
	}

	globalDatatable = $('#' + id)
			.on('error.dt', function(e, settings, techNote, message) {
				ajaxError(settings.jqXHR, e);
			})
			.DataTable(
					{
						processing : true,
						serverSide : true,
						"scrollX" : true,
						"scrollY" : true,
						async : false,
						async : false,
						lengthMenu: lengthMenu0,
						// searchDelay : 1500,
						order : [ [ col, type ] ],
						fnDrawCallback : function(oSettings) {
							actionButtonFix();
							bgCurtain();
						},
						oLanguage : {
							"sSearch" : '<span class="glyphicon glyphicon-search"></span>'
						},
						ajax : {
							url : url,
							type : "GET",
							datatype : "application/json",
							data : function(d) {
								return JSON.stringify(d);
							},
							dataSrc : function(json) {
								if (json.actionPermissions
										&& Object.keys(json.actionPermissions).length > 0)
									for (var i = 0; i < json.data.length; i++) {
										json.data[i].actionPermissions = json.actionPermissions;
									}
								return json.data;
							}
						},
						initComplete : function(settings, json) {
							removeBgCurtain();
							// restrictDatatableSearch(id);
						},
						columns : columns,
					});
	if (!this.prevDatatable) {
		this.prevDatatable = globalDatatable;
	}
	allDatatables.push(globalDatatable);
	
}

function restrictDatatableSearch(id) {
	$("[id^='" + id + "']" + ' .dataTables_filter input[type=search]').on(
			"keyup", function() {
				$(this).val($(this).val().replace(/[^a-zA-Z0-9]/gi, ''));
				globalDatatable.search($(this).val()).draw();
			})
}
function getCurrentDataTable() {
	if (this.simpleDataTable) {
		delete this.simpleDataTable;
	}
	var x = $("table[id^='simple-datatable_']");
	if (x || x.length > 0) {
		this.simpleDataTable = x;
	}
}

function updateCurrentDataTable() {
	var page = 0;
	var x = $("table[id^='simple-datatable_']");
	if ((this.simpleDataTable && this.simpleDataTable.length > 0) && (x &&x.length > 0)) {
		if (this.simpleDataTable.DataTable().page.info().page + 1 > x.DataTable().page
				.info().pages) {
			page = x.DataTable().page.info().pages - 1;
		} else if (this.simpleDataTable.DataTable().page.info().pages < x.DataTable().page
				.info().pages) {
			page = x.DataTable().page.info().pages - 1;
		} else {
			page = this.simpleDataTable.DataTable().page.info().page;
		}
		x.dataTable().fnPageChange(page, true);
		delete this.simpleDataTable;
	}
}

function refreshDatatable() {
	if (globalDatatable)
		globalDatatable.draw(false);
}
function changeDatatableContent(fromVal, toVal) {
	var dtUrl = globalDatatable.ajax.url();
	var lastVal = dtUrl.substr(0, dtUrl.lastIndexOf(fromVal) + 1);
	var url = lastVal + toVal;
	reDrawDatatable(url);
}
function reDrawDatatable(url, param) {
	globalDatatable.ajax.url(url);
	globalDatatable.ajax.reload();
}

function parseDateTime(dt, format) {
	var months = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug",
			"Sep", "Oct", "Nov", "Dec" ];
	var ret = "";
	if (dt) {
		var sysTime = new Date(dt);
		var timeInMilSec = sysTime.getTime();
		var ofSet = sysTime.getTimezoneOffset();
		var ofSetDif = (-330 - ofSet) * 60 * 1000; // -330=IST offset
		var actualTimeInMilSec = timeInMilSec - ofSetDif;
		var actualTime = new Date(actualTimeInMilSec)

		ret += actualTime.getDate() + "-"
				+ months[parseInt(actualTime.getMonth())] + "-"
				+ actualTime.getFullYear() + " "
				+ leftPad(actualTime.getHours(), 2, "0") + ":"
				+ leftPad(actualTime.getMinutes(), 2, "0") + ":"
				+ leftPad(actualTime.getSeconds(), 2, "0");
	}
	return ret;
}
function getDateTimeDiff(date1, date2, seconds) {
	if (date2 == null || date1 == null) {
		return "0";
	}

	var diff = date2 - date1;
	var returnVal = "0";
	if (diff > 0) {
		var diffSeconds = parseInt(diff / 1000 % 60);
		var diffMinutes = parseInt(diff / (60 * 1000) % 60);
		var diffHours = parseInt(diff / (60 * 60 * 1000) % 24);
		var diffDays = parseInt(diff / (24 * 60 * 60 * 1000));
		returnVal = leftPad(diffHours, 2, "0") + ":"
				+ leftPad(diffMinutes, 2, "0");
		if (seconds)
			returnVal = returnVal + ":" + leftPad(diffSeconds, 2, "0");

	}
	return returnVal;
}

function leftPad(number, targetLength, withWhat) {
	var output = number + '';
	while (output.length < targetLength) {
		output = withWhat + output;
	}
	return output;
}


function getActionButtons(buttons, dataTitle, skipNull) {
	if (buttons == null || Object.keys(buttons).length == 0)
		return "";
	if (!dataTitle)
		dataTitle = "Record";
	var menu = "<div class='btn-group'>"
			+ "<button type='button' class='btn btn-xs btn-default'><span class='glyphicon glyphicon-share' aria-hidden='true'></span> Action</button>"
			+ "<button type='button' class='btn btn-xs btn-default dropdown-toggle' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false'> "
			+ "<span class='caret'></span> <span class='sr-only'>Toggle Dropdown</span> </button>"
			+ "<ul class='dropdown-menu dropdown-meditsaveenu-right'>";
	var flag = false;
	for ( var i in buttons) {
		if ((buttons[i]['isMenu'] == 0)
				&& buttons[i]['menuType'] == 4
				&& (buttons[i]['nonMenuData'] == ''
						|| buttons[i]['nonMenuData'] == null || skipNull)) {
			menu += "<li><a href='javascript:" + buttons[i]['menuUrl']
					+ "' data-title='" + dataTitle + "' feature-master-id='"
					+ buttons[i]['featureMasterId'] + "'><span class='"
					+ buttons[i]['menuImage'] + "' aria-hidden='true'></span>"
					+ buttons[i]['menuName'] + "</a></li>";
			flag = true;
		}

	}
	menu += "</ul></div>";
	if (!flag) {
		menu = "";
	}
	return menu;
}

function getFilteredOutsideActions(actionButtons, dataTitle,skipNull)
{
	if (actionButtons == null || Object.keys(actionButtons).length == 0)
		return "";
	if (!dataTitle)
		dataTitle = "Record";
	
	var buttons = "";
	var flag = false;
	for ( var i in actionButtons) {

			if (actionButtons[i]['menuType'] == 5)
			{
				var cls = (!actionButtons[i]['menuImage']? "" : actionButtons[i]['menuImage']);
				buttons += "<a href='javascript:" + actionButtons[i]['menuUrl']
						+ "'class='btn btn-default btn-xs' data-title='" + dataTitle + "'>" + "<span class='" + cls
						+ "' aria-hidden='true'></span>" + actionButtons[i]['menuName'] + "</a>";
				flag = true;
			}

		}
	return buttons;
}

function createActionButtons(obj, buttons, dataTitle) {
	if (buttons == null || Object.keys(buttons).length == 0)
		return "";
	if (!dataTitle)
		dataTitle = "Record";
	var menu = "<div class='btn-group'>"
			+ "<button type='button' class='btn btn-xs btn-default'><span class='glyphicon glyphicon-share' aria-hidden='true'></span> Action</button>"
			+ "<button type='button' class='btn btn-xs btn-default dropdown-toggle' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false'> "
			+ "<span class='caret'></span> <span class='sr-only'>Toggle Dropdown</span> </button>"
			+ "<ul class='dropdown-menu dropdown-meditsaveenu-right'>";
	var flag = false;
	for ( var i in buttons) {
		menu += "<li><a href='javascript:" + buttons[i]['actions']
				+ "' data-title='" + dataTitle + "' tostate='"
				+ buttons[i]['state'] + "' fromstate='"
				+ obj.status + "'><span class='"
				+ buttons[i]['actionImage'] + "' aria-hidden='true'></span>"
				+ buttons[i]['stateName'] + "</a></li>";
	}
	menu += "</ul></div>";
	return menu;
}
 
function generateCaptcha(mode) {

	$('#captcha').val("");
	var firstNo = Math.ceil(Math.random() * 9);
	var secondNo = Math.ceil(Math.random() * 9);
	var captchacode = firstNo + " + " + secondNo;
	if (!this.once) {
		this.once = true;
		this.fontFamily = [ '', 'Arial', 'Times New Roman', 'Courier New',
				'serif', 'sans-serif', 'Brush Script MT', 'Algerian',
				'Bodoni MT Poster Compressed', 'Old English Text MT', 'Vivaldi' ];
		this.bgColor = [ '', '#F0F8FF', '#FAEBD7', '#FF69B4', '#7FFFD4',
				'#F0FFFF', '#F5F5DC', '#FFE4C4', '#FFFF0', '#FFE4B5' ];

	}

	if (mode == 1)
		$("#captachacodeErr").empty();
	var c = document.getElementById("captchaCanvas");
	var ctx = c.getContext("2d");
	ctx.clearRect(0, 0, c.width, c.height);
	$("#captchaCanvas").css("background-color", this.bgColor[firstNo]);

	ctx.beginPath();
	ctx.moveTo(5, c.height / 2);
	ctx.lineTo(c.width / 8, c.height / 2 + Math.random() * 10);
	ctx.lineTo(c.width / 4, c.height / 2 + Math.random() * 10);
	ctx.lineTo(c.width / 2, c.height / 2 + Math.random() * 10);
	ctx.lineTo(c.width, c.height / 2 + Math.random() * 10);
	ctx.stroke();

	ctx.font = "30px " + this.fontFamily[firstNo];
	ctx.fillStyle = "red";
	ctx.strokeText(captchacode, 30, 35);

	$("#captchaCode").val(parseInt(firstNo) + parseInt(secondNo));
	$("#captchaShowArea").html(captchacode);
	$('#captcha').attr("placeholder", "?");
}

function removeSpaces(string) {
	return string.split(' ').join('');
}
function validCaptcha() {
	var genText = removeSpaces($('#captchaCode').val());
	var inputText = removeSpaces($('#captcha').val());
	if (inputText != null && inputText != "" && genText == inputText) {
		return true;
	} else {
		$('#captcha').val("");
		$("#captachacodeErr").html("Enter Valid captcha");
		generateCaptcha();
		return false;
	}
}

function callEnable(status) {
	var msg = "";
	switch (parseInt(status)) {
	case 0:
		msg = "Disabled"
		break;
	case 1:
		msg = "Enabled"
		break;
	default:
		break;
	}
	return msg;
}



function attachEnterEvent(region,buttonId) {
	$('#'+region).keypress(function (e) {
		 if(e.which == 13)  // the enter key code
		  {
		    $('#'+buttonId).click();
		    return false;  
		  }
		});   
}

function warnBeforeClose() {
$(window).on('beforeunload',function(event) {
	event = event || window.event;
	var confirmClose = 'Are you sure?';
	if (event) {
		event.returnValue = confirmClose;
	}
	return confirmClose;
});
}

function showIdMessage(msg, mode, id, pos) {
	$('#' + id).notify(msg, {
		position : pos,
		className : mode
	});
}

function showMessageStatus(data,successFn,errorFn){
	var dataArray = data.split("_");
	var status = dataArray[0].toUpperCase();
	var statusResp = dataArray[1];
	if (status == "SUCCESS") {
		showMessage(statusResp, "success");
		if(successFn && typeof successFn=='function')
			successFn();
	} else if (status == "ERROR") {
		showMessage(statusResp, "error");
		if(errorFn && typeof errorFn=='function')
			errorFn();
	}
	return status;
}
/** ************************************************UserFeatures****************************** */
function findUserId(callbackFn) {
	var that=this;
	var value = $("#loginID").val();
	doAjaxCall('appAdmin/findByUsername', 'GET', {
		id : value,
		menuId:that.menuId
	}, function(data) {
		if (typeof callbackFn == 'function')
			callbackFn(data);
	});
}



function findUserbyEdit(callbackFn) {
	var that=this;
	var value = $("#loginID").val();
	var userId = $("#getuserId").val();
	doAjaxCall('appAdmin/findExistingUsername', 'GET', {
		id : value,
		userId : userId,
		menuId:that.menuId
	}, function(data) {
		if (typeof callbackFn == 'function')
			callbackFn(data);
	});
}


function findUserIdEdit(callbackFn) {
	var that=this;
	var value = $("#loginID").val();
	var userId = $("#userId").val();
	doAjaxCall('appAdmin/findExistingUsername', 'GET', {
		id : value,
		userId : userId,
		menuId:that.menuId
	}, function(data) {
		if (typeof callbackFn == 'function')
			callbackFn(data);
	});
}



function findUserbyEdit(callbackFn) {
	var that=this;
	var value = $("#loginID").val();
	var userId = $("#getuserId").val();
	doAjaxCall('appAdmin/findExistingUsername', 'GET', {
		id : value,
		userId : userId,
		menuId:that.menuId
	}, function(data) {
		if (typeof callbackFn == 'function')
			callbackFn(data);
	});
}

function workflowGetUserIdEdit() {
	findUserIdEdit(function(data) {
		if (data == "FAILURE") {
			$("#loginID").removeClass("valid");
			$("#loginID").addClass("error");
			$("#loginID").css("color", "red");
			$(".modal-footer").css('visibility', 'hidden');
		} else {
			$("#loginID").css("color", "green");
			$(".modal-footer").css('visibility', 'visible');
			return;
		}
	});
}


function workflowGetUserbyEdit() {
	findUserbyEdit(function(data) {
		if (data == "FAILURE") {
			$("#loginID").removeClass("valid");
			$("#loginID").addClass("error");
			$("#loginID").css("color", "red");
			$(".modal-footer").css('visibility', 'hidden');
		} else {
			$("#loginID").css("color", "green");
			$(".modal-footer").css('visibility', 'visible');
			return;
		}
	});
}


function workflowGetUserId() {
	findUserId(function(data) {
		if (data && data.length > 0) {
			$("#loginID").removeClass("valid");
			$("#loginID").addClass("error");
			$("#loginID").css("color", "red");
			$(".modal-footer").css('visibility', 'hidden');
		} else {
			$("#loginID").css("color", "green");
			$(".modal-footer").css('visibility', 'visible');
			return;
		}
	});
}

function ValidatePhone() {
	var phoneRegExp = /^((\+)?[1-9]{1,2})?([-\s\.])?((\(\d{1,4}\))|\d{1,4})(([-\s\.])?[0-9]{1,12}){1,2}$/;
	var phoneVal = $("#phone").val();
	var numbers = phoneVal.split("").length;
	if (10 <= numbers && numbers <= 10 && phoneRegExp.test(phoneVal)) {
		// alert("SUCCESS");
	} else {
		showMessage("Please Enter a Valid Number","error");
	}
}


/** ************************************************UserFeatures****************************** */

function checkUserFeatures() {
	var arrayIds = [];
	var parentId = "";

	if ($("#userFeatureIdArray").val()) {
		var existingValues = $("#userFeatureIdArray").val();
		var ids = existingValues.split(",");
		for ( var i in ids) {
			arrayIds.push(ids[i]);
			$("input[type='checkbox'][value='" + ids[i] + "']").attr('checked',
					true);
			if(ids[i]==102){
				$("#restricted").css('display', 'none');
			}
			if(ids[i]==CUSTOMREPORT){
				var report=$('#customreport').val();
				var rIds = report.split(",");
				for(var i in rIds){
					$("input[type='checkbox'][value='" + rIds[i] + "']").attr('checked',
							true);
				}
			}
			
		}
		
		
	}

	$("#userFeaturesSelectAll").click(function() {
		if ($(this).is(':checked')) {
			$('[id^=userFeature_]').each(function() {
				parentId = $(this).attr("id").slice(0, -5);
				this.checked = true;
				if (arrayIds.indexOf($(this).val()) < 0 && $(this).val()) {
					arrayIds.push($(this).val());
				}
				if($(this).hasClass("marked-default")){
					arrayIds.push($(this).val());
					}
			});
			if($(this).val()==102){
				
				$("#restricted").css('display', 'none');
				$('#instituteIds').val('');
				$('#batchIds').val('');
				$('#programIds').val('');
				$('#branchIds').val('');
				$('#deptIds').val('');
				$('#classIds').val('');
				$('#sectionIds').val('');
			}
// //////////Custom Report ///////////////
			var customReporIDs = [];
			$('[id^=customReport_]').each(function() {
				
				this.checked = true;
				
				customReporIDs.push($(this).val());
				
				
			});
			$('#customreport').val(customReporIDs.toString());
// //////////End Custom Report ///////////////
		} else if (this.checked == false) {
			$('[id^=userFeature_]').each(function() {
				for (var i = 0; i < arrayIds.length; i++) {
					if ($(this).val() == arrayIds[i]) {
						if (!$(this).hasClass("marked-default")) {
							arrayIds.splice(i, 1);
							this.checked = false;
						}
					}
				}
			});
			if($(this).val()==102){
				$("#restricted").css('display', 'inline-block');
			}
// //////////Custom Report ///////////////
			$('[id^=customReport_]').each(function() {
				
				this.checked = false;
				
			});
			$('#customreport').val('');
// //////////End Custom Report ///////////////
		}
		$("#userFeatureIdArray").val(arrayIds.toString());

	});

	$('[id^=userFeature_]')
			.click(
					function() {

						if ($(this).is(':checked')) {
							$('[id^=' + $(this).attr("id") + ']')
									.each(
											function() {
												parentId = $(this).attr("id")
														.slice(0, -5);
												this.checked = true;
												if (arrayIds.indexOf($(this)
														.val()) < 0
														&& $(this).val()) {
													arrayIds
															.push($(this).val());
												}
												if ($('[id^=' + parentId + ']').length - 1 == $('[id^='
														+ parentId
														+ ']:checked').length) {
													$('#' + parentId).prop(
															'checked', true);
												} else if ($('[id^=' + parentId
														+ ']:checked').length > 0) {
													var praentVal = $(
															'#' + parentId)
															.val();
													if (arrayIds
															.indexOf(praentVal) < 0
															&& praentVal) {
														arrayIds
																.push(praentVal);
													}
													$('#' + parentId).prop(
															'checked', true);
												}

											});

							checkAllUserFeatures(arrayIds);
							if($(this).val()==102){
								
								$("#restricted").css('display', 'none');
								$('#instituteIds').val('');
								$('#batchIds').val('');
								$('#programIds').val('');
								$('#branchIds').val('');
								$('#deptIds').val('');
								$('#classIds').val('');
								$('#sectionIds').val('');
							}
				// //////////Custom Report ///////////////
							if($(this).val()==CUSTOMREPORT){
								var customReporIDs = [];
								$('[id^=customReport_]').each(function() {
									
									this.checked = true;
									
									customReporIDs.push($(this).val());
									
									
								});
								$('#customreport').val(customReporIDs.toString());
							}
				// //////////Custom Report ///////////////
						} else if (this.checked == false) {
							$('[id^=' + $(this).attr("id") + ']')
									.each(
											function() {
												parentId = $(this).attr("id")
														.slice(0, -5);
												for (var i = 0; i < arrayIds.length; i++) {
													if ($(this).val() == arrayIds[i]) {
														arrayIds.splice(i, 1);
														this.checked = false;
													}
												}

											});

							checkAllUserFeatures(arrayIds);
							if($(this).val()==102){
								$("#restricted").css('display', 'block');
							}
				// //////////Custom Report ///////////////
							if($(this).val()==CUSTOMREPORT){
								var customReporIDs = [];
								$('[id^=customReport_]').each(function() {
									
									this.checked = false;
								});
								$('#customreport').val('');
							}
				// //////////Custom Report ///////////////
						}
						$('[id^=userFeature_]').each(function() {
							if($(this).hasClass("marked-default")){
								arrayIds.push($(this).val());
								}
						})
						$("#userFeatureIdArray").val(arrayIds.toString());

					});
	
	
	
	
	$('[id^=customReport_]')
	.click(
			function() {
				var customReporIDs = [];
				$('[id^=customReport_]').each(function() {
					if(this.checked==true){
						customReporIDs.push($(this).val());
					}
				});
				$('#customreport').val(customReporIDs.toString());
				
				if($("input[type='checkbox'][value='"+CUSTOMREPORT+"']").is(':checked')==false){
					if (arrayIds
							.indexOf(CUSTOMREPORT) < 0
							) {
						arrayIds
								.push(CUSTOMREPORT);
					}
					$("input[type='checkbox'][value='"+CUSTOMREPORT+"']").prop('checked',true);
				}
				$("#userFeatureIdArray").val(arrayIds.toString());
				
			});

	checkAllUserFeatures(arrayIds);
}

function checkMarkAsDefault() {
	$("[id^=userFeature_].marked-default").change(function() {
		$(this).each(function() {
			if (!$(this).is(':checked')) {
				$(this).prop("checked", "checked");
			}
		});
	});
}

function addRestriction(){
	var formData = {
			controllerMode : 802,
			actionType : 8,
			menuId:this.menuId
			
		};
	var title = getDialogMessage(controllerMode, 8, id, selectedData);
	doAjaxCall(this.url, 'get', formData, function(data){
		handleRestrictedAccess(formData, data, title,function(){
			
		});
		
		 
	 });
}
function handleRestrictedAccess(formData, data, title,callBack) {
	var buttons = [
			{
				type : "button",
				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true'></span>Save",
				className : "btn-sm btn-default",
				callback : function(e) {
					if (!$("#genericSave").valid())
						return false;
					return handleRestrictedSave();
					
					
				}
			},
			{
				type : "cancel",
				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
				className : "btn-sm btn-default",
				callback : null
			} ];
	getModalDialog(
			'large',
			title.title,
			data,
			buttons,
			function() {
				eval(this.url+ "(formData.controllerMode,formData.actionType,formData.id,formData.selectedData,true);");
				if(callBack  &&  typeof callBack==='function' ){
					callBack();
				}
				
			});
}
function handleRestrictedSave(){
	$('#instituteIds').val($('#instId').val());
	$('#batchIds').val($('#batchId').val());
	$('#programIds').val($('#programId').val());
	$('#branchIds').val($('#branchId').val());
	$('#deptIds').val($('#deptId').val());
	$('#classIds').val($('#classId').val());
	$('#sectionIds').val($('#sectionId').val());
	$('#quotaIds').val($('#quotaId').val());
	modalDialog.modal('hide');
	showMessage("Saved", "SUCCESS");
	$('#restricted_error').text("");
	
	
}
function checkAllUserFeatures(arrayIds) {
	var checkAllArrayIds = [];
	$("input[data-parent='8']").each(function() {
		if (checkAllArrayIds.indexOf($(this).val()) < 0 && $(this).val()) {
			checkAllArrayIds.push($(this).val());
		}

	});

	if (checkAllArrayIds.length == arrayIds.length) {
		$('#userFeaturesSelectAll').prop('checked', true);
	} else {
		$('#userFeaturesSelectAll').prop('checked', false);
	}
}



function handleUserFeatures(controllerMode, actionType, selectedData) {
	  var rolename=$('#roleName').val();
      var description=$('#roleDescription').val();
	  var appid=$('#getAppId').val();
	  var homepage=$('#homePage').val();
	  $('#name_not_empty').text("");
	  $('#description_not_empty').text("");
	  $('#appid_not_empty').text("");
	  $('#homepage_not_empty').text("");
	  if((($('.userFeature_102').is(':checked')==false)&&
			  ((($('#instituteIds').val()=="")&&($('#batchIds').val()=="")
						&&($('#programIds').val()=="")&&($('#deptIds').val()=="")&&
						($('#branchIds').val()=="")&&($('#classIds').val()=="")&&($('#sectionIds').val()=="")&&($('#quotaIds').val()=="")))))
			 $('#restricted_error').text("Add Restrictions").css('color','red'); 
	  else if(rolename!="" && description!="" && appid!="" && homepage!="")
	  {
		 validated(controllerMode, actionType, selectedData);
	  }
	 else if(rolename=="")
	 $('#name_not_empty').text("Name should not be empty").css('color','red');
	 else if(description=="")
	  $('#description_not_empty').text("Description should not be empty").css('color','red');
	 else if(appid=="")
	 $('#appid_not_empty').text("AppId should not be empty").css('color','red');
	 else if(homepage=="")
	 $('#homepage_not_empty').text("Home page should not be empty").css('color','red');
	
	 else 
		 validated(controllerMode, actionType, selectedData);
	 
}

function getUserFeatures(controllerMode, actionType, id, selectedId) {
	var formData = {
		controllerMode : controllerMode,
		actionType : actionType,
		id : id,
		menuId : this.menuId
	}
	doAjaxCall('appAdmin', 'GET', formData, function(data) {
		$('#userFeatures').html(data);
	});

}

function validated(controllerMode, actionType, selectedData)
{
	var userFeatureIdArray = $('#userFeatureIdArray').val();
	var userRoleId = $("#userRoleId").val();
	var roleName = $('#roleName').val();
	var roleDescription = $('#roleDescription').val();
	var isPredefined = $("#isPredefined").val();
	var homePage = $("#homePage").val();
	var appId = $("#getAppId").val();
	var instId=$('#instituteIds').val();
	var batchId=$('#batchIds').val();
	var programId=$('#programIds').val();
	var deptId=$('#deptIds').val();
	var branchId=$('#branchIds').val();
	var classId=$('#classIds').val();
	var sectionId=$('#sectionIds').val();
	var quotaId=$('#quotaIds').val();
	var institutionId=$('#institutionId').val();
	var customreport=$('#customreport').val();
	var formData = {
		controllerMode : parseInt(controllerMode),
		actionType : parseInt(actionType),
		userRoleId : userRoleId,
		roleName : roleName,
		roleDescription : roleDescription,
		id : userFeatureIdArray,
		isPredefined : isPredefined,
		homePage : homePage,
		appId : appId,
		instId:instId,
		 batchId:batchId,
		 programId:programId,
		 deptId:deptId,
		 branchId:branchId,
		 classId:classId,
		 sectionId:sectionId,
		 institutionId:institutionId,
		 quotaId:quotaId,
		selectedId : selectedData,
		customreport:customreport,
		menuId : this.menuId
	};

	doAjaxCall('appAdmin', 'GET', formData, function(data) {
		var dataArray = data.split("_");
		var status = dataArray[0].toUpperCase();
		var statusResp = dataArray[1];
		if (status == "SUCCESS") {
			showMessage(statusResp, "success");
		} else if (status == "ERROR") {
			showMessage(statusResp, "error");
		}

	});	
}

// =-----------------start academy admin----------------------------------=-//

function appAdmin(controllerMode, actionType, id, selectedId, flag) {
	var obj = {};
	if (flag || actionType==5)
		obj = getDialogWithCombo(controllerMode, actionType, id, selectedId);
	else if (!flag || typeof flag == "undefined")
		obj = getDialogWithTitle(controllerMode, actionType, id, selectedId);

	return obj;
}

function getDialogWithTitle(controllerMode, actionType, id, selectedId) {
	var obj = {};
	switch (controllerMode) {
	case Constants.ControllerMode.UserType:
		if (actionType == Constants.ActionType.ADD && id != "0") {
			obj.title = _MESSAGES.modalDialog.editTitle + " " + selectedId;
			break;
		} else if (actionType == Constants.ActionType.ADD && id == 0) {
			obj.title = _MESSAGES.modalDialog.addTitle + " ";
			break;
		}
		break;
	case Constants.ControllerMode.UserRole:
		obj.title="Add Restrictions";
		
		if (actionType == Constants.ActionType.VIEW_FACULTY_GROUP
				|| actionType == Constants.ActionType.DELETE) {
			obj.title="Assign Appraisal";
			obj.callBack=true;
		}
		break;
		
	case Constants.ControllerMode.CreateUser:
		if (actionType == Constants.ActionType.ADD
				|| actionType == Constants.ActionType.DELETE) {
			obj = getAppAdminDialogMessageDetails(actionType, id, selectedData);
		}
		break;
		
	case Constants.ControllerMode.SUPPORTTYPE:
		if (actionType == Constants.ActionType.ADD
				|| actionType == Constants.ActionType.DELETE) {
			obj = getAppAdminDialogMessageDetails(actionType, id, selectedData);
		}
		break;
		
	case Constants.ControllerMode.WorkflowModules:
		if (actionType == Constants.ActionType.ADD || actionType == Constants.ActionType.DELETE) {
			obj = getAppAdminDialogMessageDetails(actionType, id, selectedId);
			obj.callBack = true;
		}
		break;
		
	case Constants.ControllerMode.WorkFlow:
		if (actionType == Constants.ActionType.ADD || actionType == Constants.ActionType.DELETE) {
			obj = getAppAdminDialogMessageDetails(actionType, id, selectedData);
			obj.callBack = true;
		}
		break;
		
	case Constants.ControllerMode.WorkFlowState:
		if (actionType == Constants.ActionType.ADD || actionType == Constants.ActionType.DELETE) {
			obj = getAppAdminDialogMessageDetails(actionType, id, selectedId);
			obj.callBack = true;
		}
		break;
		
	case Constants.ControllerMode.WorkflowDetails:
		if (actionType == Constants.ActionType.ADD || actionType == Constants.ActionType.DELETE) {
			obj = getAppAdminDialogMessageDetails(actionType, id, selectedData);
			obj.callBack = true;
		}
		break;
		
	case Constants.ControllerMode.WorkflowUser:
		if (actionType == Constants.ActionType.ADD || actionType == Constants.ActionType.DELETE) {
			obj = getAppAdminDialogMessageDetails(actionType, id, selectedData);
		}
		break;
		
	case Constants.ControllerMode.Section:
		if (actionType == Constants.ActionType.ADD || actionType == Constants.ActionType.DELETE) {
			obj = getAppAdminDialogMessageDetails(actionType, id, selectedData);
		}
		break;
		
	case Constants.ControllerMode.PushNotification:
		if (actionType == Constants.ActionType.SHOWNOTIFICATION
				|| actionType == Constants.ActionType.SHOWNOTIFICATIONDETAILS
				|| actionType == Constants.ActionType.CLOSENOTIFICATION) {
			obj = getAppAdminDialogMessageDetails(actionType, id, selectedData);
		}
		// ESA Result upload controller
	case Constants.ControllerMode.ESA_RESULT_UPLOAD:
		if (actionType == 4 || actionType == 3)
			obj = getAppAdminDialogMessageDetails(actionType, id, selectedId);
		else if (actionType == 2) {
			handleExcelUploadESAResultMaster(7020, 5, 1, 1);
			return false;
		}

		break;
	case Constants.ControllerMode.ISA_MARKS_MASTER:
		if (actionType == Constants.ActionType.ADD
				|| actionType == Constants.ActionType.DELETE || actionType==Constants.ActionType.EDIT) {
			obj = getAppAdminDialogMessageDetails(actionType, id, selectedId);
			obj.callBack=true;
		}
		break;
	case Constants.ControllerMode.ISA_MARKS_TEMPLATE:
		if (actionType == Constants.ActionType.ADD
				|| actionType == Constants.ActionType.DELETE) {
			obj = getAppAdminDialogMessageDetails(actionType, id, selectedId);
			obj.callBack=true;
		}
		break;
	case Constants.ControllerMode.AdmissionDocuments:
		if (actionType == Constants.ActionType.ADD
				|| actionType == Constants.ActionType.DELETE) {
			obj = getAppAdminDialogMessageDetails(actionType, id, selectedId);
			obj.callBack=true;
		}
		break;
		
	case Constants.ControllerMode.AdmissionDocuments:
		if (actionType == Constants.ActionType.ADD
				|| actionType == Constants.ActionType.DELETE) {
			obj = getAppAdminDialogMessageDetails(actionType, id, selectedId);
			obj.callBack=true;
		}
		break;
		
	case Constants.ControllerMode.MobileMessages:
		switch(actionType){
		case Constants.ActionType.ADD:
			obj = getAppAdminDialogMessageDetails(actionType, id, selectedId);
			obj.callBack=true;
			break;
		}
	case Constants.ControllerMode.RecommendedVideo:
		if (actionType == Constants.ActionType.ADD
				|| actionType == Constants.ActionType.DELETE) {
			obj = getAppAdminDialogMessageDetails(actionType, id, selectedId);
			obj.callBack=true;if (actionType == Constants.ActionType.ADD
					|| actionType == Constants.ActionType.DELETE) {
				obj = getAppAdminDialogMessageDetails(actionType, id, selectedId);
				obj.callBack=true;
			}
		}	
		
		break;
	case Constants.ControllerMode.FrequentlyAskedQuestions:
		if (actionType == Constants.ActionType.ADD
				|| actionType == Constants.ActionType.DELETE) {
			obj = getAppAdminDialogMessageDetails(actionType, id, selectedId);
			obj.callBack=true;
		}	
		
		break;		
	case Constants.ControllerMode.GenericScheduler:
		if (actionType == Constants.ActionType.ADD
				|| actionType == Constants.ActionType.DELETE) {
			obj = getAppAdminDialogMessageDetails(actionType, id, selectedId);
			obj.callBack=true;
		}	
		break;
		
	case Constants.ControllerMode.TimeTableTemplate:
		if (actionType == Constants.ActionType.ADD
				|| actionType == Constants.ActionType.DELETE) {
			obj = getAppAdminDialogMessageDetails(actionType, id, selectedData);
		}
		break;	
	case Constants.ControllerMode.RecommendedVideo:
		if (actionType == Constants.ActionType.SHOWEDIT) {
			obj = getAppAdminDialogMessageDetails(actionType, id, selectedData);
		}
		break;	
	case Constants.ControllerMode.FrequentlyAskedQuestions:
		if (actionType == Constants.ActionType.SHOWEDIT) {
			obj = getAppAdminDialogMessageDetails(actionType, id, selectedData);
			obj.callBack=true;
		}
		break;		
	case Constants.ControllerMode.ManageSyllabus:
		if (actionType == Constants.ActionType.ADD
				|| actionType == Constants.ActionType.DELETE) {
			obj = getAppAdminDialogMessageDetails(actionType, id, selectedId);
			obj.callBack=true;
		}
		break;
	
	case InstConstants.ControllerMode.ProgressReport:
		if (actionType == Constants.ActionType.ADD || actionType == Constants.ActionType.DELETE) {
			obj = getAppAdminDialogMessageDetails(actionType, id, selectedData);
		}
		break;
		
	case Constants.ControllerMode.RecipientConfiguration:
			obj.title = "Recipient Configuration";
			if (actionType == Constants.ActionType.ADD || actionType == Constants.ActionType.EDIT || actionType == Constants.ActionType.DELETE) {
				obj = getAppAdminDialogMessageDetails(actionType, id, selectedId);
				obj.callBack = true;
			}
			break;
	}
	
	return obj;
}

function getDialogWithCombo(controllerMode, actionType, id, selectedId) {
	var obj = {};

	switch (controllerMode) {
	case Constants.ControllerMode.CreateUser:
		appAdminCheckComboBox(controllerMode, actionType, id, selectedData);
		break;
	case Constants.ControllerMode.UserRole:
		appAdminCheckComboBox(controllerMode, actionType, id, selectedData);
		break;
	case Constants.ControllerMode.WorkFlow:
		appAdminCheckComboBox(controllerMode, actionType, id, selectedData);

		break;
	case Constants.ControllerMode.WorkFlowState:
		appAdminCheckComboBox(controllerMode, actionType, id, selectedData);
		break;
	case Constants.ControllerMode.WorkflowDetails:
		appAdminCheckComboBox(controllerMode, actionType, id, selectedData);
		break;
	case Constants.ControllerMode.WorkflowUser:
		appAdminCheckComboBox(controllerMode, actionType, id, selectedData);
		break;
	case Constants.ControllerMode.Section:
		appAdminCheckComboBox(controllerMode, actionType, id, selectedData);
		break;
	case Constants.ControllerMode.PushNotification:
		appAdminCheckComboBox(controllerMode, actionType, id, selectedData);
		// ESA Result upload controller
	case Constants.ControllerMode.ESA_RESULT_UPLOAD:
		if (actionType == 2) {
			handleExcelUploadESAResultMaster(7020, 5, 1, 1);
			return false;
		}
		break;
	case Constants.ControllerMode.FacultyProfileView :
		appAdminCheckComboBox(controllerMode, actionType, id, selectedData);
		break;
		
	case Constants.ControllerMode.AdmissionDocuments:
		appAdminCheckComboBox(controllerMode, actionType, id, selectedData);
	   break;
	case Constants.ControllerMode.ISA_MARKS_MASTER:
		appAdminCheckComboBox(controllerMode, actionType, id, selectedData);
		   break;
	case Constants.ControllerMode.GenericScheduler:
		appAdminCheckComboBox(controllerMode, actionType, id, selectedData);
		break;
	case Constants.ControllerMode.TimeTableTemplate:
		appAdminCheckComboBox(controllerMode, actionType, id, selectedData);
		break;
	case Constants.ControllerMode.RecommendedVideo:
		appAdminCheckComboBox(controllerMode, actionType, id, selectedData);
		break;
	case Constants.ControllerMode.FrequentlyAskedQuestions:
		appAdminCheckComboBox(controllerMode, actionType, id, selectedData);
		break;	
		
	case InstConstants.ControllerMode.ProgressReport:
		appAdminCheckComboBox(controllerMode, actionType, id, selectedData);
		break;
		
	case UtilsConstants.ControllerMode.GradeCardByExcel:
		if (actionType == 5) {
			$('[name^=Home]').trigger('click');
			generateGradeCardByExcelSheet();
			return false;
		}
		break;
	
	}

		
		
	return obj;
}
function getAppAdminDialogMessageDetails(actionType, id, selectedData) {
	var msg=selectedData?selectedData.split(":"):"";
	var obj = {};
	switch (actionType) {
	case 7:
	case 11:
	case Constants.ActionType.ADD:
		if (id != 0) {
			obj.title = _MESSAGES.modalDialog.editTitle + " " + (msg[0]?msg[0]:"")+(msg[1]?": "+msg[1]:"");
			break;
		} else if (id == 0) {
			obj.title = _MESSAGES.modalDialog.addTitle + " "+(selectedData?msg[0]:"");
			break;
		}
		break;
	case Constants.ActionType.DELETE:
		obj.title = _MESSAGES.modalConfirm.deleteTitle+ " "+(selectedData?msg[0]:"");
		obj.message = _MESSAGES.modalConfirm.deleteBody.replace(/#0/g,(msg[1]?msg[1]:msg[0]));
		break;
	case Constants.ActionType.VIEW:
		obj.title = _MESSAGES.modalDialog.addTitle + " ";
		break;
		
	case Constants.ActionType.CLOSENOTIFICATION:
		obj.title = _MESSAGES.modalConfirm.closeNotificationTitle;
		obj.message = _MESSAGES.modalConfirm.closeNotificationBody;
		break;
	case Constants.ActionType.SHOWNOTIFICATIONDETAILS:
		obj.title = _MESSAGES.modalConfirm.showNotificationDetails + " ";
		break;
	case Constants.ActionType.SHOWNOTIFICATION:
		obj.title = _MESSAGES.modalConfirm.sendNewNotification;
		break;
		
	case 7:
		obj.title=_MESSAGES.modalConfirm.archiveTitle;
		obj.message=_MESSAGES.modalConfirm.archiveBody.replace('#0',selectedData);
		break;
	case Constants.ActionType.EDIT:
		obj.title = _MESSAGES.modalDialog.editTitle + " " + (msg[0]?msg[0]:"")+(msg[1]?": "+msg[1]:"");
		break;
	case Constants.ActionType.SHOWEDIT:
		if (id != 0) {
			obj.title = _MESSAGES.modalDialog.editTitle + " " + (msg[0]?msg[0]:"")+(msg[1]?": "+msg[1]:"");
			break;
		} else if (id == 0) {
			obj.title = _MESSAGES.modalDialog.addTitle + " "+(selectedData?msg[0]:"");
			break;
		}
		break;

	}

	return obj;

}

function appAdminCheckComboBox(controllerMode, actionType, id, selectedData) {

	switch (controllerMode) {

	case Constants.ControllerMode.CreateUser:
		switch (actionType) {
		case Constants.ActionType.ADD:
			getCombobox('/Academy/a/g/getInstitutes', 'institutionId');
			getCombobox('/Academy/a/g/userRoles', 'userRole');
			// getCombobox('/Academy/a/g/getWorkflow', 'workflowId');
			break;
		case Constants.ActionType.DELETE:
			break;
		case Constants.ActionType.VIEW:
			break;
		default:
			break;
		}
		break;
	case Constants.ControllerMode.UserRole:
		switch (actionType) {
		case Constants.ActionType.ADD:
			
			break;
		case Constants.ActionType.DELETE:
			break;
		case Constants.ActionType.VIEW:
			break;
		case 8:
			getCombobox('/Academy/a/i/getInstitutesAdmin', 'instId',null,null,function(){
				getCombobox('/Academy/a/i/programForAdmin', 'programId',null,null,function(){
						getCombobox('/Academy/a/i/deptsAdmin', 'deptId',null,null,function(){
							getCombobox('/Academy/a/i/batchesAdmin', 'batchId',null,null,function(){
								getCombobox('/Academy/a/i/branchAdmin', 'branchId',null,null,function(){
									getCombobox('/Academy/a/i/classesAdmin', 'classId',null,null,function(){
										getCombobox('/Academy/a/i/sectionAdmin', 'sectionId',null,null,function(){
											getCombobox('/Academy/a/i/quotaAdmin', 'quotaId',null,null,function(){
												$('#instId').val($('#instituteIds').val().split(","));
												$('#programId').val($('#programIds').val().split(","));
												$('#batchId').val($('#batchIds').val().split(","));
												$('#branchId').val($('#branchIds').val().split(","));
												$('#deptId').val($('#deptIds').val().split(","));
												$('#classId').val($('#classIds').val().split(","));
												$('#sectionId').val($('#sectionIds').val().split(","));
												$('#quotaId').val($('#quotaIds').val().split(","));
											})
										});
									});
								});
							});
						});
					});
				});
			break;
		
		case Constants.ActionType.VIEW_FACULTY_GROUP:
			getFaculties();	
			
			break;
			
		default:
			break;
		}
		break;
	case Constants.ControllerMode.WorkFlowState:
		switch (actionType) {

		case Constants.ActionType.ADD:
			getCombobox('/Academy/a/g/getWorkflowModules', 'workflowModuleId');
			break;
		case Constants.ActionType.DELETE:

			break;
		case Constants.ActionType.VIEW:
			break;

		}
		break;

	case Constants.ControllerMode.WorkflowDetails:
		switch (actionType) {

		case Constants.ActionType.ADD:

			break;
		case Constants.ActionType.DELETE:
			break;
		case Constants.ActionType.SHOWCOMBOBOX:
			getCombobox('/Academy/a/g/getWorkflowModules', 'workflowModuleId');
			getCombobox('/Academy/a/g/getWorkflow', 'workflowId');
			break;
		}
		break;
	case Constants.ControllerMode.WorkFlow:
		switch (actionType) {

		case Constants.ActionType.ADD:
			getCombobox('/Academy/a/g/getWorkflowModules', 'workflowModuleId');
			getCombobox('/Academy/a/i/getRestrictedInstitutesByGroup', 'institutionId',null,null,function() {});
			break;
		case Constants.ActionType.DELETE:

			break;
		case Constants.ActionType.SHOWCOMBOBOX:
			getCombobox('/Academy/a/g/getWorkflowModules', 'workflowModuleId');
			getCombobox('/Academy/a/i/getRestrictedInstitutesByGroup', 'institutionId',null,null,function() {});
			break;
		case 9:

			break;
		case 11:
			getCombobox('/Academy/a/g/getWorkflowModules', 'workflowModuleId', null, null, function() {
				getDetailsBasedOnWorkflowId(6350, 10);
			});
			getCombobox('/Academy/a/i/getRestrictedInstitutesByGroup', 'institutionId',null,null,function() {});
			break;
		}
		break;
	case Constants.ControllerMode.WorkflowUser:
		switch (actionType) {

		case Constants.ActionType.ADD:
			getCombobox('/Academy/a/g/getWorkflow', 'workflowId');
			break;
		case Constants.ActionType.DELETE:

			break;
		case Constants.ActionType.VIEW:
			break;
		default:
			break;
		}
	case Constants.ControllerMode.Batches:
		switch (actionType) {

		case Constants.ActionType.ADD:
			getCombobox('/Academy/a/g/getInstitutes', 'institutionId');
			break;
		case Constants.ActionType.DELETE:

			break;
		case Constants.ActionType.VIEW:
			break;
		default:
			break;
		}
	case Constants.ControllerMode.Classess:
		switch (actionType) {

		case Constants.ActionType.ADD:
			getCombobox('/Academy/a/g/getInstitutes', 'institutionId');
			break;
		case Constants.ActionType.DELETE:

			break;
		case Constants.ActionType.VIEW:
			break;
		default:
			break;
		}
			
		/* PRMS Related */
	case PRMSConstants.ControllerMode.PROBLEMTYPECONTROLLER:
		switch (actionType) {

		case Constants.ActionType.ADD:
			getCombobox('../a/prms/institutesByUser/', 'institutes',null,null,function(){
				if(id!=0){
					getCombobox('../a/prms/categoryByInst/'+$('#institutes').val(), 'ptCategory');
				}
				
			});
			break;
		case Constants.ActionType.DELETE:	
			break;
		case Constants.ActionType.VIEW:
			break;
		default:
			break;
		}
	case PRMSConstants.ControllerMode.CATEGORYCONTROLLER:
		switch (actionType) {

		case Constants.ActionType.ADD:
			getCombobox('../a/prms/institutesByUser/', 'institutes',null,null,function(){
				getindivisulaOrGroup();
			});
		//	getCombobox('../a/prms/indivisualUser/', 'indivisualUsers');
			// getCombobox('../a/prms/userRoles/', 'userRole');
			break;
		case Constants.ActionType.DELETE:

			break;
		case Constants.ActionType.VIEW:

			break;
		default:
			break;
		}
	case PRMSConstants.ControllerMode.BUILDINGCONTROLLER:
		switch (actionType) {

		case Constants.ActionType.ADD:
			getCombobox('../a/prms/institutesByUser/', 'institutes');
			break;
		case Constants.ActionType.DELETE:

			break;
		case Constants.ActionType.VIEW:
			break;
		default:
			break;
		}
	case PRMSConstants.ControllerMode.MANAGEPRMSUSERCONTROLER:
		switch (actionType) {

		case Constants.ActionType.ADD:
			getCombobox('../a/prms/institutesByUser/', 'institutes1', null, null, function(){
				if($('#institutes1').val())
						{
				    getCombobox('../a/prms/prmsUSersbyInst/'+$('#institutes1').val(), 'users');
						}
				});
			break;
		case Constants.ActionType.DELETE:

			break;
		case Constants.ActionType.VIEW:
			getCombobox('../a/prms/institutesByUser/', 'institutes');
			break;
		default:
			break;
		}
		
	case Constants.ControllerMode.RecommendedVideo:
		switch (actionType) {
		case 3:
			getCombobox('/Academy/a/g/depts', 'department');
			getCombobox('/Academy/a/i/classesAdmin', 'semester');
			// getCombobox('/Academy/a/g/getSubjectsCode', 'subjectCode');
			
			 getCombobox('/Academy/a/g/getSubjectsCode', 'subjectCode', null, null, function(){
				 genericComboBoxFilterByText($("#subjectCode"), "subjectCode","form-control input-sm subjectCodes");
				 if(parseInt($("#recommendedVideoId").val())==0)
				 $("#dataListComboBoxsubjectCodesubjectCodeinputId").val("");
			 });
			 
			
			break;
		}
		
// Push notification controller
	case Constants.ControllerMode.PushNotification:
		switch (actionType) {
		case 15:
			/*
			 * getCombobox('/Academy/a/g/getInstitutes', 'institutions');
			 * getCombobox('/Academy/a/g/userRolesWithAppAdmin', 'userRoles');
			 * getCombobox('/Academy/a/g/depts', 'depts');
			 * getCombobox('/Academy/a/g/semester', 'semester');
			 * getCombobox('/Academy/a/g/section', 'section');
			 * multiSelectBoxesOfPushNotification(); requiredButtons();
			 */
			break;
		}
// Faculty Profile Controller
	
	case Constants.ControllerMode.FacultyProfileView:
		switch(actionType)
		{
		  case 5:
			  getCombobox('/Academy/a/i/batchClass', 'batchClassId');
			  break;	
		}
       break;
       
	case Constants.ControllerMode.AdmissionDocuments:
		switch(actionType)
		{
		case Constants.ActionType.ADD:
			getCombobox("/Academy/a/i/entryType", "entrytype");
			getCombobox('/Academy/a/g/getInstitutes', 'instituteId',null,null,function(){
				if($('#instituteId').val())
					{
			      getCombobox('/Academy/a/i/getQuotaByInstId/'+$('#instituteId').val(),'getQuotaId');
			      getCombobox('/Academy/a/i/programByInstId/'+$('#instituteId').val(),'programId');
			      getCombobox('/Academy/a/g/getDocumentsByInstitution/'+$('#instituteId').val(),'documentId');
			     
			      }
			});
			
			getCombobox('/Academy/a/g/getdomicile', 'typeDomicile');
			
			
			break;
		case Constants.ActionType.DELETE:

			break;
		case Constants.ActionType.VIEW:
			
			break;
		default:
			break;
		}
       break;
	case Constants.ControllerMode.ISA_MARKS_MASTER:
		switch(actionType)
		{
		case Constants.ActionType.ADD:
			getCombobox('/Academy/a/g/getInstitutes', 'institutionId');
			break;
		case Constants.ActionType.DELETE:

			break;
		case Constants.ActionType.VIEW:
			
			break;
		default:
			break;
		}
		break;
		
	case Constants.ControllerMode.GenericScheduler:
		switch(actionType)
		{
		case Constants.ActionType.ADD:
			setDateTimePicker();
			getCombobox('/Academy/a/i/batchesAdmin', 'reportbatchId');
			getCombobox('/Academy/a/g/programshort', 'reportprogramId');
			getCombobox('/Academy/a/i/departments', 'reportdepartmentId');
			getCombobox('/Academy/a/i/classes', 'reportclassId');
			getCombobox('/Academy/a/g/userRoles', 'userRoles' ,null,null,function(){
				if(id>0){
				getRecipients();
				}
			});
			getCombobox('/Academy/a/g/getReportList', 'schedulerreport');
			getCombobox('/Academy/a/i/branchAdmin', 'reportbranchId');
			getCombobox('/Academy/a/g/getNotificationTemplate', 'template');
			
			getCombobox('/Academy/a/i/configValue/0/27', 'scheduletype');
			getCombobox('/Academy/a/i/configValue/0/26', 'scheduledFor');
			getCombobox('/Academy/a/i/getNotificationConfig', 'featureId');
			break;
		case Constants.ActionType.DELETE:

			break;
		case Constants.ActionType.VIEW:
			
			break;
		default:
			break;
		}
			break;
			
			
			
	case InstConstants.ControllerMode.ProgressReport:
		switch(actionType)
		{
		case Constants.ActionType.ADD:
			dateCheckerProgress();
			setDateTimePicker();
			break;
		case Constants.ActionType.DELETE:

			break;
		case Constants.ActionType.VIEW:
			
			break;
		default:
			break;
		}
			break;
			

	}
	
	

}

function getDetailsBasedOnSelected(url, mode, methodType, selectedData, divIdToReplace, selectedValue, anyText,divReplaceCallBack) 
{
	 
	if (selectedValue && selectedValue!=0)
		handleDivReplaceWithData(url, mode, methodType, selectedData, divIdToReplace, selectedValue, anyText,divReplaceCallBack);
};
function handleDivReplaceWithData(url, mode, methodType, selectedData, divIdToReplace, selectedValue, anyText,divReplaceCallBack)
{
	 
	bgCurtain();
	var formData = {
		controllerMode : parseInt(mode),
		actionType : parseInt(methodType),
		id : (selectedValue==parseInt(selectedValue)? parseInt(selectedValue) :selectedValue),
		selectedData : selectedData,
		divIdToReplace:divIdToReplace,
		anyText:anyText,
		menuId : this.menuId
	};
	doAjaxCall(url, 'GET', formData, function(data) {
		if(divIdToReplace && $('#'+divIdToReplace).length>0)
			$('#'+divIdToReplace).html(data);
			removeBgCurtain();
			if(divReplaceCallBack && typeof divReplaceCallBack == 'function')
				divReplaceCallBack(formData,data);
	});
};

function handlePushNotificationStatistics(type, controllerMode, actionType,
		buttonId, buttonText) {
	var formData = {
		controllerMode : controllerMode,
		actionType : actionType,
		id : buttonId,
		buttonText : buttonText,
		menuId : this.menuId
	};
	doAjaxCall('appAdmin', 'get', formData, function(data) {
		$('#buttonResponses').html(data);
	});

}
function handleNewPushNotification(type, controllerMode, actionType, id, selectedData) 
{
	 
	bgCurtain();
	var formData = {
		controllerMode : controllerMode,
		actionType : actionType,
		menuId : this.menuId,
		id : id,
		messageType:selectedData
	};

	var title = getDialogMessage(controllerMode, actionType, id, selectedData);
	doAjaxCall(this.url, 'GET', formData, function(data) {
		// handlePushNotificationEditShow(formData, data, title.title);
		$('#replaceMessage').html(data);
		removeBgCurtain();
	});
}

function handlePushNotificationEditShow(formData, data, title) {
	var buttons = [
			{
				type : "button1",
				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true'></span>Send",
				className : "btn-sm btn-default",
				callback : function(e) {
					if (!$("#genericSave").valid())
						return false;
					return handlePushNotificationSend(formData, title, 1);
				}
			},
			{
				type : "button2",
				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true'></span>Send & New",
				className : "btn-sm btn-default",
				callback : function(e) {
					if (!$("#genericSave").valid())
						return false;
					return handlePushNotificationSend(formData, title, 2);
				}
			},
			{
				type : "button3",
				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true'></span>Send & Duplicate",
				className : "btn-sm btn-default",
				callback : function(e) {
					if (!$("#genericSave").valid())
						return false;
					return handlePushNotificationSend(formData, title, 3);
				}
			},
			{
				type : "button4",
				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true'></span>View Recipients",
				className : "btn-sm btn-default",
				callback : function(e) {
					if (!$("#genericSave").valid())
						return false;
					return getNotificationRecipientsBasedOnSelection(formData, title, 4);
				}
			},
			{
				type : "cancel",
				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
				className : "btn-sm btn-default",
				callback : null
			} ];
	
	getModalDialog(
			'large',
			title,
			data,
			buttons,
			function() {
				eval(this.url
						+ "(formData.controllerMode,formData.actionType,formData.id,formData.selectedData,true);");
				handleFormValidation('genericSave');
			});
}

function getNotificationRecipientsBasedOnSelection(formData, title, typeOfSend, callBack) {
	$('#notification_title').attr('required',false);
	$('#notification_message').attr('required',false);
	
	if (!$("#genericSave").valid())
		return false;
	
	var formData = new FormData($('#genericSave')[0]);
	formData.append("notificationType", 0);
	var institutionsText = [];
	$("#institutions :selected").each(function(i, sel) {
		institutionsText.push($(sel).text());
	});
	formData.append("selectedInstitutions", $('#institutions').val());
	formData.append("selectedInstitutionsText", institutionsText);

	var userRolesText = [];
	$("#userRoles :selected").each(function(i, sel) {
		userRolesText.push($(sel).text());
	});
	formData.append("selectedUserRoles", $('#userRoles').val());
	formData.append("selectedUserRolesText", userRolesText);
	var batchText = [];
	$("#batch :selected").each(function(i, sel) {
		batchText.push($(sel).text());
	});
	formData.append("selectedBatch", $('#batch').val());
	formData.append("selectedBatchText", batchText);
	
	var programText = [];
	$("#program :selected").each(function(i, sel) {
		programText.push($(sel).text());
	});
	formData.append("selectedProgram", $('#program').val());
	formData.append("selectedProgramText", programText);
	
	var branchText = [];
	$("#branch :selected").each(function(i, sel) {
		branchText.push($(sel).text());
	});
	formData.append("selectedBranch", $('#branch').val());
	formData.append("selectedBranchText", branchText);
	
	var deptsText = [];
	$("#depts :selected").each(function(i, sel) {
		deptsText.push($(sel).text());
	});
	formData.append("selectedDepartments", $('#depts').val());
	formData.append("selectedDeptsText", deptsText);
	var semesterText = [];
	$("#semester :selected").each(function(i, sel) {
		semesterText.push($(sel).text());
	});
	formData.append("selectedSemester", $('#semester').val());
	formData.append("selectedSemesterText", semesterText);
	var sectionText = [];
	$("#section :selected").each(function(i, sel) {
		sectionText.push($(sel).text());
	});
	formData.append("selectedSection", $('#section').val());
	formData.append("selectedSectionText", sectionText);

	var quotaText = [];
	$("#quota :selected").each(function(i, sel) {
		quotaText.push($(sel).text());
	});
	formData.append("selectedQuota", $('#quota').val());
	formData.append("selectedQuotaText", quotaText);
	
	formData.append("controllerMode", 7000);
	formData.append("actionType", 96);
	formData.append("menuId",this.menuId);
	
	var that = this;
	bgCurtain();
	doAjaxCall('appAdmin', 'POST', formData,
			function(data) {
					removeBgCurtain();
					$('#messageRecipientsDiv').show();
					$('#messageRecipients').html(data);
					$('#notification_title').attr('required',true);
					$('#notification_message').attr('required',true);
					if(typeof callBack==='function')
						{
						callBack();
						}

			}, false, false);
}

function previewMessage() {
	
	var buttons = [{
		type : "cancel",
		label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
		className : "btn-sm btn-default",
		callback : null
	}];
	
	var title = $('#notification_title').val();
	var message = $('#notification_message').val();
	var imageUploaded = $('#choosenImage')[0];
	
	if(title && message) {
		var data = '<div class="wrapper-modal-content-area-pad">   <form class="form-horizontal">  <div class="col-md-12">  <fieldset class="grp_frmfld" style="padding-top: 15px; margin-top: 10px;">'
            + '<div class="form-group"><label class="col-md-1 control-label" for=""><strong>Title: </strong></label> <label class="col-md-11 control-label text-left" for="" id="msgPreviewTitle">'+title+'</label>'
            + '</div><div class="form-group"><label class="col-md-2 control-label text-left" for=""><strong>Message: </strong></label>'
            + '<div class="col-md-12"><div id="msgTPreview" class="preview_wrap" style="margin-top: 7px;">'+message+'</div>'
           
            if(imageUploaded && imageUploaded.files && imageUploaded.files[0]) {
            	data += '<img id="choosenImagePreview" alt="Uploaded Image" width="250px" height="250px"/>';
            }
	
		data += '</div></div> </fieldset></div></form></div>';
	
		getModalDialog('large', 'Preview Message', data, buttons, function() {
			if(imageUploaded && imageUploaded.files && imageUploaded.files[0]) {
				var reader = new FileReader();
				reader.onload = function (e) {
					$('#choosenImagePreview').attr('src', e.target.result);
				}
				reader.readAsDataURL(imageUploaded.files[0]);
			}
		});
	} else {
		showMessage('Please enter title and message.','error');
	}
}

function handleAvailableRegisteredUsersCheckBoxes() {
	
	$("#checkAllRegisteredUsers").off('click');
	$("#checkAllRegisteredUsers").on('click',function() {
		var allPages = messageRecipientsDataTable.column().nodes();
		if($(this).prop('checked') == true) {
			selectedNotificationUsers = [];
			$('input[type="checkbox"]', allPages).prop('checked', true);
			var messageType = $('#messageType').val();
			$.each(allPages, function(index, currentValue) {
				var selectedUsers = {};
				if(messageType == 1) {
					selectedUsers.deviceRegistrationId = currentValue.getAttribute('data-value');
					selectedUsers.deviceType = currentValue.getAttribute('data-devicetype');
					selectedNotificationUsers.push(selectedUsers);
				} else if(messageType == 2 || messageType == 3 || messageType == 6) {
					selectedUsers.email = currentValue.getAttribute('data-email');
					selectedUsers.mobile = currentValue.getAttribute('data-mobile');
					selectedUsers.fatherEmail = currentValue.getAttribute('data-fatherEmail');
					selectedUsers.fatherMobileNumber = currentValue.getAttribute('data-fatherMobileNumber');
					selectedUsers.motherEmail = currentValue.getAttribute('data-motherEmail');
					selectedUsers.motherMobileNumber = currentValue.getAttribute('data-motherMobileNumber');
					selectedNotificationUsers.push(selectedUsers);
				}
			});
		} else {
			$('input[type="checkbox"]', allPages).prop('checked', false);
			selectedNotificationUsers = [];
		}
	});
	
	$('input[id^=registeredUsers]').off('click');
	$('input[id^=registeredUsers]').on('click', function() {
		
		var messageType = $('#messageType').val();
		
//		clickedEmail And clickedMobile.
		var clickedEmail = $(this).attr('data-email');
		var clickedMobile = $(this).attr('data-mobile');
		
//		clickedDeviceType And clickedDeviceRegistrationId.
		var clickedDeviceType = $(this).attr('data-devicetype');
		var clickedDeviceRegistrationId = $(this).attr('data-value');
		
		if($(this).prop('checked') == true) {
			
			var selectedUsers = {};
			
			if(messageType == 1) {
				selectedUsers.deviceType = clickedDeviceType;
				selectedUsers.deviceRegistrationId = clickedDeviceRegistrationId;
				selectedNotificationUsers.push(selectedUsers);
			} else if(messageType == 2 || messageType == 3 || messageType == 6 ) {
				selectedUsers.email = clickedEmail;
				selectedUsers.mobile = clickedMobile;
				selectedUsers.fatherEmail = $(this).attr('data-fatherEmail');
				selectedUsers.fatherMobileNumber = $(this).attr('data-fatherMobileNumber');
				selectedUsers.motherEmail = $(this).attr('data-motherEmail');
				selectedUsers.motherMobileNumber = $(this).attr('data-motherMobileNumber');
				selectedNotificationUsers.push(selectedUsers);
			}
			
			$(this).prop('checked', true);
			
		} else {
			selectedNotificationUsers = $.each(selectedNotificationUsers, function(index, selectedUsers) {
				if(selectedUsers && messageType == 1) {
					if(selectedUsers.deviceRegistrationId == clickedDeviceRegistrationId && selectedUsers.deviceType == clickedDeviceType) {
						selectedNotificationUsers.splice(index, 1);
						$("#checkAllRegisteredUsers").prop('checked', false);
						return false;
					}
				} else if(selectedUsers && (messageType == 2 || messageType == 3 || messageType == 6)) {
					if(selectedUsers.email == clickedEmail || selectedUsers.mobile == clickedMobile) {
						selectedNotificationUsers.splice(index, 1);
						$("#checkAllRegisteredUsers").prop('checked', false);
						return false;
					}
				}
			});
		}
	});
}

function getSelectedNotificationUsers(pushNotificationDetailsJson) {
	
	selectedNotificationUsers = [];
	var messageType = $('#messageType').val();
	
	var pushNotificationDetails = $.parseJSON(pushNotificationDetailsJson);
	
	$.each(pushNotificationDetails, function(index, value) {
		var selectedUsers = {};
		if(value && messageType == 1) {
			selectedUsers.deviceRegistrationId = value.DeviceRegistrationId;
			selectedUsers.deviceType = value.DeviceType;
			selectedNotificationUsers.push(selectedUsers);
		} else if(value && (messageType == 2 || messageType == 3 || messageType == 6)) {
			selectedUsers.email = value.Email;
			selectedUsers.mobile = value.Mobile;
			selectedUsers.fatherEmail = value.FatherEmail;
			selectedUsers.fatherMobileNumber = value.FatherMobileNumber;
			selectedUsers.motherEmail = value.MotherEmail;
			selectedUsers.motherMobileNumber = value.MotherMobileNumber;
			selectedNotificationUsers.push(selectedUsers);
		}
	});
}

function handlePushNotificationSend(formData, title, typeOfSend) {
	
	if (!$("#genericSave").valid()) {
		return false;
	}
	
	var formData = new FormData($('#genericSave')[0]);
	
	formData.append("notificationType", 0);
	
	var institutionsText = [];
	$("#institutions :selected").each(function(i, sel) {
		institutionsText.push($(sel).text());
	});
	formData.append("selectedInstitutions", $('#institutions').val());
	formData.append("selectedInstitutionsText", institutionsText);

	var userRolesText = [];
	$("#userRoles :selected").each(function(i, sel) {
		userRolesText.push($(sel).text());
	});
	formData.append("selectedUserRoles", $('#userRoles').val());
	formData.append("selectedUserRolesText", userRolesText);
	
	var batchText = [];
	$("#batch :selected").each(function(i, sel) {
		batchText.push($(sel).text());
	});
	formData.append("selectedBatch", $('#batch').val());
	formData.append("selectedBatchText", batchText);
	
	var programText = [];
	$("#program :selected").each(function(i, sel) {
		programText.push($(sel).text());
	});
	formData.append("selectedProgram", $('#program').val());
	formData.append("selectedProgramText", programText);
	
	var branchText = [];
	$("#branch :selected").each(function(i, sel) {
		branchText.push($(sel).text());
	});
	formData.append("selectedBranch", $('#branch').val());
	formData.append("selectedBranchText", branchText);
	
	var deptsText = [];
	$("#depts :selected").each(function(i, sel) {
		deptsText.push($(sel).text());
	});
	formData.append("selectedDepartments", $('#depts').val());
	formData.append("selectedDeptsText", deptsText);

	var semesterText = [];
	$("#semester :selected").each(function(i, sel) {
		semesterText.push($(sel).text());
	});
	formData.append("selectedSemester", $('#semester').val());
	formData.append("selectedSemesterText", semesterText);
	
	var sectionText = [];
	$("#section :selected").each(function(i, sel) {
		sectionText.push($(sel).text());
	});
	formData.append("selectedSection", $('#section').val());
	formData.append("selectedSectionText", sectionText);
	
	var quotaText = [];
	$("#quota :selected").each(function(i, sel) {
		quotaText.push($(sel).text());
	});
	formData.append("selectedQuota", $('#quota').val());
	formData.append("selectedQuotaText", quotaText);

	formData.append("controllerMode", 7000);
	formData.append("actionType", 1);
	formData.append("menuId", this.menuId);
	
	if($('#messageRecipientsDataTable').length > 0) {
		if(selectedNotificationUsers && selectedNotificationUsers.length <= 0) {
			 showMessage('Please select the users to send message.', 'error');
			 return false;
		}
		formData.append("selectedNotificationUsers", JSON.stringify(selectedNotificationUsers));
		formData.append("IsDataBaseFetch", "0");
	} else {
		formData.append("IsDataBaseFetch", "1");
	}
	
//	Send To Parent Only.
	if($('#sendTo_ParentsOnly').val() == "1") {
		formData.append("sendTo_ParentsOnly", "1");
	} else {
		formData.append("sendTo_ParentsOnly", "0");
	}
	
//	Send To Parent Also.
	if($('#sendTo_ParentsAlso').val() == "1") {
		formData.append("sendTo_ParentsAlso", "1");
	} else {
		formData.append("sendTo_ParentsAlso", "0");
	}
	
//	Target Email, Number Or SRN.
	if($('#targetEmailOrNumber').is(':checked')) {
		formData.targetEmailNumberSrn = $('#targetEmailOrNumber').val();
	} else {
		formData.targetEmailNumberSrn= $('#targetSrn').val();
	}
	
	if($('#sendToAll').is(':checked')) {
		formData.append("selType", "sendToAll");
	}
	if($('#sendToAll_TargetNumbersOrMails').is(':checked')) {
		formData.append("selType", "sendToAll_TargetNumbersOrMails");
	}
	if($('#sendTo_ParentsOnly').is(':checked')) {
		formData.append("selType", "sendTo_ParentsOnly");
	}
	if($('#sendTo_ParentsAlso').is(':checked')) {
		formData.append("selType", "sendTo_ParentsAlso");
	}
	 
	getConfirmDialog("Send Notification", "Are you sure you want to send ?", function(data) {
		bgCurtain();
		doAjaxCall('pushNotification/pushNotificationScheduler', 'POST', formData, function(data) {
			if (data.indexOf("SUCCESS") > -1) {
				removeBgCurtain();
				showMessage("Notification sent successfully","success");
				removeBgCurtain();
				if(typeOfSend == 1) {
					handleRefresh(1, 7000, 5, 401);
				} else if(typeOfSend == 2) {
					handleNewPushNotification(2, 7000, 15, 0);
				} else if(typeOfSend == 3) {}
			} else {
				showMessage("Not sent! Try again", "error");
			}
		}, false, false);
	}, false);
	
	return false;
}

function handleRefresh(type,controllerMode,actionType,menuTab){
	bgCurtain();
	setTimeout(function(){
		removeBgCurtain();
		$("#menuTab_" + menuTab).trigger("click");; }, 1000);		

}

function multiSelectBoxesOfPushNotification() {
	
	/*Select All Related Logic*/
	$('[id^=selectAll]').off('click');
	$('[id^=selectAll]').on('click',function() {
		var idArray = this.id.split("_");
		var selectedVal = idArray[1];
		if ($(this).is(":checked")) {
			$('#' + selectedVal + ' option').prop('selected', true);
		} else {
			$('#' + selectedVal + ' option').prop('selected', false);
		}
	});
	
	/*Send To All Related Logic*/
	$('[id^=sendToAll]').off('click');
	$('[id^=sendToAll]').on('click', function(e) {
		if(this.id === 'sendToAll') {
			if($('#sendToAll_TargetNumbersOrMails').is(':checked')) {
				showMessage('You can not check two check boxes', 'error');
				e.preventDefault();
				return false;
			}
			$('#institutions option').prop('selected', false)
			$("#userRoles option").prop('selected', false);
			$("#depts option").prop('selected', false);
			$("#semester option").prop('selected', false);
			$("#section option").prop('selected', false);
			$("#batch option").prop('selected', false);
			$("#program option").prop('selected', false);
			$("#branch option").prop('selected', false);
			$("#quota option").prop('selected', false);
		} else if(this.id === 'sendToAll_TargetNumbersOrMails') {
			if($('#sendToAll').is(':checked')) {
				showMessage('You can not check two check boxes', 'error');
				e.preventDefault();
				return false;
			} else if($('#sendToAll_TargetNumbersOrMails').is(':checked')) {
				$('#sendTo_ParentsOnly')[0].value = 0;
				$("#sendTo_ParentsOnly").attr("disabled", "disabled");
				$("#sendTo_ParentsOnly").removeAttr("checked", "checked");
				$('#sendTo_ParentsAlso')[0].value = 0;
				$("#sendTo_ParentsAlso").attr("disabled", "disabled");
				$("#sendTo_ParentsAlso").removeAttr("checked", "checked");
			
				$("#targetNumbersOrMails").prop('disabled', false);
				$("#targetEmailOrNumber").prop('disabled', false);
				$("#targetSrn").prop('disabled', false);
			} else if(!$('#sendToAll_TargetNumbersOrMails').is(':checked')) {
				$('#sendTo_ParentsOnly')[0].value = 0;
				$("#sendTo_ParentsOnly").removeAttr("disabled", "disabled");
				$('#sendTo_ParentsAlso')[0].value = 0;
				$("#sendTo_ParentsAlso").removeAttr("disabled", "disabled");
				
				$("#targetNumbersOrMails").prop('disabled', true);
				$("#targetEmailOrNumber").prop('disabled', true);
				$("#targetSrn").prop('disabled', true);		
			}
		}	
		
		/*Based On Condition Enabling And Dissabling*/
		if ($(this).is(":checked")) {
			$('[id^=selectAll]').prop('disabled', true);
			$("#institutions").prop('disabled', true);
			$("#userRoles").prop('disabled', true);
			$("#depts").prop('disabled', true);
			$("#semester").prop('disabled', true);
			$("#section").prop('disabled', true);
			$("#batch").prop('disabled', true);
			$("#program").prop('disabled', true);
			$("#branch").prop('disabled', true);
			$("#quota").prop('disabled', true);
			$('label#sendToAll-error').html('');
			$('#sendToAll').attr('required',false);
			$('#sendToAll').attr('aria-invalid', false);
		} else {
			$('[id^=selectAll]').prop('disabled', false);
			$("#institutions").prop('disabled', false);
			$("#userRoles").prop('disabled', false);
			$("#depts").prop('disabled', false);
			$("#semester").prop('disabled', false);
			$("#section").prop('disabled', false);
			$("#batch").prop('disabled', false);
			$("#program").prop('disabled', false);
			$("#branch").prop('disabled', false);
			$("#quota").prop('disabled', false);
			$('#sendToAll').prop('required', true);
		}
	});
	
	/*Validation Part DiffWay*/
	$("#institutions, #userRoles, #depts, #semester, #section, #batch, #program, #branch, #quota").on('click', function() { 
		var institutions_option = $('#institutions option:selected').length;
		var userRoles_option = $('#userRoles option:selected').length;
		var depts_option = $('#depts option:selected').length;
		var semester_option = $('#semester option:selected').length;
		var section_option = $('#section option:selected').length;
		var batch_option = $('#batch option:selected').length;
		var program_option = $('#program option:selected').length;
		var branch_option = $('#branch option:selected').length;
		var quota_option = $('#quota option:selected').length;
		
		if (institutions_option > 0 || userRoles_option > 0 || depts_option > 0 || semester_option > 0 || section_option > 0 || batch_option > 0 || program_option > 0 || branch_option > 0 || quota_option > 0) {
			$('#sendToAll').prop('required', false);
		} else {
			$('#sendToAll').prop('required', true);
		}
	});

	// Updating Check Box Value Fr User Parent Only.
	$("#sendTo_ParentsOnly").click(function() {
	if ($('#sendTo_ParentsOnly')[0].checked == true) {
			$('#sendTo_ParentsOnly')[0].value = 1;
			$('#sendTo_ParentsAlso')[0].value = 0;
			$("#sendTo_ParentsAlso").removeAttr("checked", "checked");
		} else {
			$('#sendTo_ParentsOnly')[0].value = 0;
		}
	});
	
	// Updating Check Box Value Fr User Parent Also.
	$("#sendTo_ParentsAlso").click(function() {
		if ($('#sendTo_ParentsAlso')[0].checked == true) {
			$('#sendTo_ParentsAlso')[0].value = 1;
			$('#sendTo_ParentsOnly')[0].value = 0;
			$("#sendTo_ParentsOnly").removeAttr("checked", "checked");
		} else {
			$('#sendTo_ParentsAlso')[0].value = 0;
		}
	});
}

function requiredButtons() {
	
	$('#requiredButtons').click(function() {
		var html = "";
		if ($("#requiredButtons").is(":checked")) {
			$('#noOfButtons').prop('disabled', false);
			$('#noOfButtons').on('change', function() {
				html = "";
				for (i = 1; i <= parseInt($(this).val()); i++) {
					html += "<div class=\"form-group\">"
						+ "<label class=\"col-md-6 control-label\" for=\"button"
						+ i
						+ "\">Button "+i+"</label>"
						+ "<div class=\"col-md-6\">"
						+ "<input list=\"button"
						+ i
						+ "\" name=\"button"
						+ i
						+ "\" class=\"form-control\" placeholder=\"Button Text\" required>"
						+ "<datalist id=\"button"
						+ i
						+ "\"><option value=\"Yes\"><option value=\"No\"><option value=\"May be\"></datalist>"
						+ "	</div>"
						+ "	</div>";
					$("#showButtons").html(html);
				}
			})
			
			html = ""
			for (i = 1; i <= parseInt($('#noOfButtons').val()); i++) {
				html += "<div class=\"form-group\">"
					+ "<label class=\"col-md-6 control-label\" for=\"button"
					+ i
					+ "\">Button "+i+"</label>"
					+ "<div class=\"col-md-6\">"
					+ "<input list=\"button"
					+ i
					+ "\" name=\"button"
					+ i
					+ "\" class=\"form-control\" placeholder=\"Button Text\" required>"
					+ "<datalist id=\"button"
					+ i
					+ "\"><option value=\"Yes\"><option value=\"No\"><option value=\"May be\"></datalist>"
					+ "	</div>" + "	</div>";
				$("#showButtons").html(html);
			}
		} else {
			$('#noOfButtons').prop('disabled', 'disabled');
			$("#showButtons").html(html);
		}
	});
}

function handleQuizResultsView(type,controllerMode,actionType,id,selectedData)
{
	bgCurtain();
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			menuId : this.menuId,
			id:id,
			quizName:selectedData
		};
	
	var title = "Send Quiz Results Notification Of "+selectedData;
	doAjaxCall(this.url, 'GET', formData, function(data) {
		getListOfStudentsToSendQuizResults(formData, data, title);
		removeBgCurtain();
	});
}

function getListOfStudentsToSendQuizResults(formData, data, title) 
{
	var buttons = [
			{
				type : "button",
				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true'></span>Send",
				className : "btn-sm btn-default",
				callback : function(e) {
					formData.actionType=18;
					doAjaxCall("appAdmin", "POST", formData, function(d){ 
						var t=JSON.parse(d);
						if(!t.Title && !t.Body){
							showMessage("Message Can not be Sent!No Message Structure.", "error");
							return;
						}
						getConfirmDialog(t.Title,t.Body,function(){
							bgCurtain();
							formData.actionType=19;
							formData.notification=d;
							doAjaxCall("appAdmin", "POST",formData , function(d1){
								removeBgCurtain();
								if (d1.indexOf("Error:") > -1) 
									showMessage(d1, "error");
								else{
									modalDialog.modal('hide');
									showMessage(d1, "success");
								}
								
								
								});
						
						});
						});
					return false;
				}
			},
			{
				type : "cancel",
				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
				className : "btn-sm btn-default",
				callback : null
			} ];
	getModalDialog(
			'large',
			title,
			data,
			buttons,
			function() {
				eval(this.url
						+ "(formData.controllerMode,formData.actionType,formData.id,formData.selectedData);");
			});
}
function handleExcelUploadESAResultMaster(mode, methodType, selectedData,manageData){
	var url="appAdmin";
	var selectData;
	var divIdToReplace="manageEsaResultsUpload";
	var selectedValue=selectedData;
	var anyText;
	handleDivReplaceWithData(url, mode, methodType, selectData, divIdToReplace, selectedValue, anyText,function(){
		
	})
};

function handleEsaResultsNotification(controllerMode, actionType, id,selectedData)
{
	
	getConfirmDialog("Send EsaResults Notification", "Are you sure you want to send "+selectedData+" results as notification ?", function() {
		var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			id : id,
			menuId : this.menuId,
			fileName:selectedData,
		};
		doAjaxCall(this.url, 'GET', formData, function(data) {
			var dataArray = data.split("_");
			var status = dataArray[0].toUpperCase();
			var statusResp = dataArray[1];
			if (status == "SUCCESS") {
				showMessage(statusResp, "success");
			} else if (status == "ERROR") {
				showMessage(statusResp, "error");
			}
		});
	});
}

function sendEsaResultNotificationToAllResultDetails(controllerMode, actionType, id, selectedData)
{
	var resultMasterVal = $('#resultDetails').val();
	if (resultMasterVal == 0) 
	{
		alert("please select Result name");
		return;
	}
	if($('td[id^=esaResultDetails_]').length>0 && resultMasterVal)
	{
		var title="Send all EsaResults Notification";
		var message="Are you sure you want to send all results as notification ?";
		if(actionType===56)
			{
			title="Send  EsaResults Notification to test users";
			message="Are you sure you want to send esa results notification to test users ?";
			}
		getConfirmDialog(title, message , function()
				{
			var formData = {
				controllerMode : controllerMode,
				actionType : actionType,
				id : id,
				menuId : this.menuId,
				resultMasterVal:resultMasterVal
			};
			doAjaxCall(this.url, 'GET', formData, function(data) 
					{
				var dataArray = data.split("_");
				var status = dataArray[0].toUpperCase();
				var statusResp = dataArray[1];
				if (status == "SUCCESS") {
					showMessage(statusResp, "success");
				} else if (status == "ERROR") {
					showMessage(statusResp, "error");
				}
			});
		});
	}
}


function handleViewEsaResultDetails(controllerMode, actionType, id,selectedData)
{
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			id : id,
			menuId : this.menuId,
			// featureMasterId : featureMasterId
		};
	doAjaxCall(this.url, 'GET', formData, function(data) {
		var buttons = [{
		   				type : "cancel",
		   				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Close",
		   				className : "btn-sm btn-default",
		   				callback : null
		   			} ];
		   	getModalDialog(
		   			'large',
		   			"Esa Results Info",
		   			data,
		   			buttons,
		   			function() {
		   				eval(this.url
		   						+ "(formData.controllerMode,formData.actionType,formData.id,formData.selectedData);");
		   			});
	});
}

function uploadEsaResultsExcelFile(controllerMode, actionType, id, selectedData) {

	var resultDetailsVal = $('#resultDetails').val();
	if (resultDetailsVal == 0) {
		alert("please select Result name");
		return;
	}

	var formData = {
		controllerMode : controllerMode,
		actionType : actionType,
		id : id,
		menuId : this.menuId,
	};

	var data = '<div class="wrapper-modal-content-area-pad"><form class="form-horizontal" action="appAdmin/uploadEsaResultsExcelFile" method="post" enctype="multipart/form-data" id="genericSave">'
			+ '<div class="form-group"><label class=" col-md-offset-4 col-md-2 control-label">Upload Excel File:</label>'
			+ '<div class="col-md-3"><input type="hidden" name="resultDetailsId" id="resultDetailsId" value="'
			+ resultDetailsVal
			+ '"><input type="file" name="file" class="control-label" id="fileID" required><a href="javascript:uploadEsaResultsDetails();"  class="btn btn-default btn-xs" >Upload Result</a></div></div><div id="uploadedEsaResult"></div></form></div>';
	var buttons = [
			{
				type : "cancel",
				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Close",
				className : "btn-sm btn-default",
				callback : null
			} ];
	getModalDialog(
			'large',
			"Upload Esa Results",
			data,
			buttons,
			function() {
				eval(this.url
						+ "(formData.controllerMode,formData.actionType,formData.id,formData.selectedData);");
			});

}
function uploadEsaResultsDetails(){
	if (!$("#genericSave").valid())
		return false;
	
	var formContext = $("#genericSave");
	var formURL = formContext.attr("action");
	var formData = new FormData(formContext[0]);
	formData.append("menuId",this.menuId);
	doAjaxCall(formURL, 'POST', formData, function(data) {
		if (data.indexOf("ExcelError:") > -1)
		{
			showMessage(data, "error");
			return false;
		}else
		{
			$('#uploadedEsaResult').html('');
			$('#uploadedEsaResult').html(data);
			
			$('#uploadedEsaResult').parents('.modal-body').next().prepend(
					"<a href='javascript:publishEsaResult();' id='publishResEsaResult'  class='btn btn-sm btn-default' ><span class='glyphicon glyphicon-ok-circle' aria-hidden='true'></span>Publish</a>");
		}
	}, false, false);

	return false;
}

function publishEsaResult()
{
	var that=this;
	getConfirmDialog("Publish Esa Results", "Are you sure you want to publish these esa results",
			function(data) {
				bgCurtain();
				
				doAjaxCall('appAdmin/publishEsaResults', 'POST', {menuId:that.menuId},
						function(data) {
					modalDialog.modal('hide');
					var dataArray = data.split("_");
					var status = dataArray[0].toUpperCase();
					var statusResp = dataArray[1];
					if (status == "SUCCESS") {
						callBack = true;
						showMessage(statusResp, "success");
					} else if (status == "ERROR") {
						showMessage(statusResp, "error");
					}
					}, false, false);
			}, false);
	return false;
}


function getSpirtiDetailsHomePage(){
	var usn=$('#usn').val();
	if(!usn && usn.length<=0){
		showMessage("Please enter valid USN/SRN", "error");
		return false;
	}
	handleDivReplaceWithData('appAdmin', 7030, 23, null,null, usn, 'ADMIN', function(formData,data){
		
		
		if(data.startsWith("ERROR")){
			var finalMessage=data.split("_")[1];
			showMessage(finalMessage, "error");
		}else{
		usn=formData.id;
		var title="Spirit of "+usn.trim().toUpperCase();
		var buttons = [	{
		   				type : "cancel",
		   				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
		   				className : "btn-sm btn-default",
		   				callback : function(){
		   					$('input, textarea, select').prop('disabled',false);
		   				}
		   			} ];
		   	getModalDialog(
		   			'large',
		   			title,
		   			data,
		   			buttons,
		   			function(){
		   			},function (){
		   				$('input, textarea, select').prop('disabled',false);
		   			});
		}
	});
}

function getSpiritDetailsHomePage(usn,selectedData){
	if(!usn && usn.length<=0){
		showMessage("Please enter valid USN/SRN", "error");
		return false;
	}
	handleDivReplaceWithData('appAdmin', 7030, 23, null,null, usn, 'ADMIN', function(formData,data){
		
		if(data.startsWith("ERROR")){
			var finalMessage=data.split("_")[1];
			showMessage(finalMessage, "error");
		}else{
		usn=formData.id;
		var title="Spirit of "+usn.trim().toUpperCase();
		var buttons = [	{
		   				type : "cancel",
		   				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
		   				className : "btn-sm btn-default",
		   				callback : function(){
		   					$('input, textarea, select').prop('disabled',false);
		   				}
		   			} ];
		   	getModalDialog(
		   			'large',
		   			title,
		   			data,
		   			buttons,
		   			function(){
		   			},function (){
		   				$('input, textarea, select').prop('disabled',false);
		   			});
		}
	});
}

function getApprovedStudentsBasedOnSelection(controllerMode,actionType){
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			menuId:this.menuId
		}
	var instId=$('#instIdSearch').val();
	if(instId)
		formData.instId = instId;
	var batchId=$('#batch1').val();
	if(batchId)
		formData.batchId = batchId;
	var program=$('#program1').val();
	if(program)
		formData.program = program;
	var branch=$('#branch1').val();
	var assignWay=$('#assignWay').val();
	if(assignWay)
	{
	formData.assignWay = assignWay;
	}
	if(assignWay && assignWay==2)
	{
		formData.branch = branch;
	}
	bgCurtain();
	doAjaxCall('appAdmin', 'post', formData,function(data) {
		removeBgCurtain();
		$('#approvedStudentsBasedOnSelection').html(data);
	})
}


function showUnassignedStudents(controllerMode, actionType, program, branch, batch,batchClassId,instId){
	
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			batch:batch,
			program:program,
			instId:instId,
			menuId:this.menuId
		}
	var assignWay=$('#assignWay').val();
	if(assignWay)
		{
		formData.assignWay = assignWay;
		}
	if(assignWay && assignWay==2)
	{
		formData.branch = branch;
	}
	bgCurtain();
	doAjaxCall('appAdmin', 'post', formData,function(data) {
		removeBgCurtain();
		$('#showStudentsAssignedToStudentClass').html(data);
	});
}

function showNewStudentsCountToAssign(controlleMode, actionType, assignType, program,
		branch, batchId, batchClassId,instId) {
	
	
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			program : program,
			batchId:batchId,
			batchClassId:batchClassId,
			instId:instId,
			menuId:this.menuId
		}
	var assignWay=$('#assignWay').val();
	if(assignWay)
	{
	formData.assignWay = assignWay;
	}
	if(assignWay && assignWay==2)
	{
		formData.branch = branch;
	}
	
	formData.assignType=assignType;
	
	var buttonName='Assign';
	var type=getInteger(assignType,0)
	if(type===2)
		buttonName='Re-Assign';
	
	bgCurtain();
	doAjaxCall(
			'appAdmin',
			'post',
			formData,
			function(data) {
				removeBgCurtain();
				var buttons = [
						{
							type : "button",
							label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true'></span>"+buttonName,
							className : "btn-sm btn-default",
							callback : function(e) {
								if (!$("#genericSave").valid())
										return false;
								return saveNewStudentsToStudentClasses(type);
							}
						},
						{
							type : "cancel",
							label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
							className : "btn-sm btn-default",
							callback : null
						} ];
				getModalDialog('large', 'Assign students to classes', data,
						buttons, function(){
					getNoOfSectionsForAssigningStudents();
					divideRemainingStudentIntoSection();
					if(type==1 && getInteger($('#assignedStudents').val(),0)>0)
					{
						$('select').prop('disabled',true);
					}
				},function(){
					$('select').prop('disabled',false);
				});
			});
};

function getNoOfSectionsForAssigningStudents(){
	$('#sections').on('change', function (e) {
		$("#showPreviewAssignStudents").html('');
		divideStudentsIntoSection();
	});
}

function divideStudentsIntoSection(type)
{
	var sections=$('#sections').val();
	if(sections)
		sections=sections.length;
	var totalStudents=getInteger($('#totalStudents').attr('data-students'),0);
	if(type==1)
		totalStudents=getInteger($('#assignedStudents').attr('data-students'),0);

	
	if(totalStudents<sections){
		showIdMessage("Number of  sections should not more than number of students.", "error","studentsPerSection")
		return false;
	}
	var studentspersection=totalStudents/sections;
	$('#studentsPerSection').html(Math.ceil(studentspersection));
	$('#studentsPerSection').attr('data-studentsPerSection',Math.ceil(studentspersection));
	
	var classes=$('#class').val();
	var departments=$('#depts').val();
	var batchClass=$('#batchClass').val();
	// var
	// totalStudents=getInteger($('#totalStudents').attr('data-students'),0);
	var classBatchSections=$('#sections').val();
	var classBatchSectionsLength;
	if(classBatchSections)
		classBatchSectionsLength=classBatchSections.length;
	var remainStudents = totalStudents % classBatchSectionsLength;
	var toAssignStudents = totalStudents / classBatchSectionsLength;
	var previousEnd=0;
	var htmlaData='<fieldset class="grp_frmfld" style="padding-top: 15px;">	<legend>Student allocation preview</legend><table class="table compact table-striped table-bordered table-action dataTable no-footer" cellspacing="0" width="100%">'
		+'<thead><tr><th>Department</th><th>Semester</th><th>Section</th><th>No Of students</th></tr></thead><tbody>';
	for (var i = 0; i < classBatchSectionsLength; i++)
	{
		var classBatchSectionId = getInteger(classBatchSections[i]);
		var start = previousEnd;
		var noRows = getInteger(toAssignStudents);
		var sectionText=$('#sections option[value='+classBatchSectionId+']').text();
		var departmentText=$('#depts option[value='+departments+']').text();
		var semesterText=$('#class option[value='+classes+']').text();
		if (i < remainStudents)
			noRows = getInteger(toAssignStudents + 1);
		
		previousEnd=start+noRows;
		
		htmlaData+='<tr><td>'+departmentText+'</td><td>'+semesterText+'</td><td>'+sectionText+'</td><td>'+noRows+'</td></tr>';
	}
	htmlaData+='</tbody></table></fieldset>';
	
	$('#showToAssignStudents').html(htmlaData);
}

function divideRemainingStudentIntoSection()
{
	var classBatchSectionsArray=$('#classBatchSectionsStudentCount').val().split(",");
	var classBatchSectionsAndCountArray=[];
	var unAssignedStudentsCount=getInteger($('#unAssignedStudents').val(),0);
	var maxStudentCount=0;
	for(var i=0;i<classBatchSectionsArray.length;i++)
		{
		if(classBatchSectionsArray[i].indexOf('_')>-1)
			{
			var arrayClass={};
			arrayClass.classBatchSectionId=classBatchSectionsArray[i].split('_')[0];
			arrayClass.studentCount=getInteger(classBatchSectionsArray[i].split('_')[1],0);
			classBatchSectionsAndCountArray.push(arrayClass);
			if(maxStudentCount<arrayClass.studentCount)
				{
				maxStudentCount=arrayClass.studentCount;
				}
			}
		}
	
	
	if(classBatchSectionsAndCountArray.length>0 && unAssignedStudentsCount>0)
		{
		divideStudentsBasedOnUnassignedCount(classBatchSectionsAndCountArray, unAssignedStudentsCount, maxStudentCount);
	
		}
}

function divideStudentsBasedOnUnassignedCount(classBatchSectionsAndCountArray, unAssignedStudentsCount, maxStudentCount)
{
	var classBatchSectionsAndCountArray=sortClassBatchSections(classBatchSectionsAndCountArray);
	
	for(var i=0;i<classBatchSectionsAndCountArray.length;i++)
	{
	if(unAssignedStudentsCount>0)
		{
	if(i<(classBatchSectionsAndCountArray.length-1))
		{
		var currentClassAssignedStudentCount=getInteger(classBatchSectionsAndCountArray[i].studentCount,0);
		var nextClassAssignedStudentCount=getInteger(classBatchSectionsAndCountArray[i+1].studentCount,0);
		var currentClassBatchSectionId=getInteger(classBatchSectionsAndCountArray[i].classBatchSectionId,0);
		var nextClassBatchSectionId=getInteger(classBatchSectionsAndCountArray[i+1].classBatchSectionId,0);
		
		if(currentClassAssignedStudentCount<nextClassAssignedStudentCount || currentClassAssignedStudentCount==nextClassAssignedStudentCount)
				{
			var diff=nextClassAssignedStudentCount-currentClassAssignedStudentCount;
			if(currentClassAssignedStudentCount==nextClassAssignedStudentCount && (currentClassAssignedStudentCount<maxStudentCount || currentClassAssignedStudentCount==maxStudentCount))
				{
				diff=1;
				}
				unAssignedStudentsCount=unAssignedStudentsCount-diff;
				$('#classBatchSection_'+currentClassBatchSectionId).html(currentClassAssignedStudentCount+diff);
				classBatchSectionsAndCountArray[i].studentCount=currentClassAssignedStudentCount+diff;
				
				if(maxStudentCount<(currentClassAssignedStudentCount+diff))
					{
					maxStudentCount=(currentClassAssignedStudentCount+diff);
					}
				}
		}
		else if(classBatchSectionsAndCountArray.length==1)
		{
		var currentClassAssignedStudentCount=getInteger(classBatchSectionsAndCountArray[i].studentCount,0);
		var currentClassBatchSectionId=getInteger(classBatchSectionsAndCountArray[i].classBatchSectionId,0);
		$('#classBatchSection_'+currentClassBatchSectionId).html(currentClassAssignedStudentCount+unAssignedStudentsCount);
		classBatchSectionsAndCountArray[i].studentCount=currentClassAssignedStudentCount+unAssignedStudentsCount;
		maxStudentCount=currentClassAssignedStudentCount+unAssignedStudentsCount;
		
		unAssignedStudentsCount=0;
		}
	}
	$('#studentsPerSection').attr('data-studentsPerSection',Math.ceil(maxStudentCount));
	$('#studentsPerSection').html(Math.ceil(maxStudentCount));
   }
	if(unAssignedStudentsCount>0)
	{
		divideStudentsBasedOnUnassignedCount(classBatchSectionsAndCountArray, unAssignedStudentsCount,maxStudentCount);
	}
}

function sortClassBatchSections(classBatchSectionsAndCountArray)
{
	if(classBatchSectionsAndCountArray.length>0)
	{
		classBatchSectionsAndCountArray.sort(function(a, b) {
			if(a.studentCount==b.studentCount)
				{
				 return (a.classBatchSectionId) - (b.classBatchSectionId);
				}
			else
				{
				return (a.studentCount) - (b.studentCount);
				}
		   
		});
	}
	return classBatchSectionsAndCountArray;
}

function getInteger(val,defaultVal)
{
	return parseInt(val) || defaultVal;
}

function getBatchClassOfBatchDept(){
	$('#program, #depts, #batch, #class').on('change',function(){
		var program=$('#program').attr('data-program');
		var batch=$('#batch').val();
		var depts=$('#depts').val();
		var classes=$('#class').val();
		var instId=$('#instId').val();
		if(program && depts && batch && classes && instId){
			getBatchClassOfBatchDeptClass(program, batch, depts, classes,instId);
		}
	});
}
function getBatchClassOfBatchDeptClass(program, batch, depts, classes,instId)
{
	getCombobox('/Academy/a/i/getCombinedBatchClassInfo/'+program+'/'+batch+'/'+depts+'/'+classes+'/'+instId,'batchClass',null,null,function(data){
		if($('#batchClass option').length<=0)
			showMessage("No batch classes found for the  program, batch and department you have selected.");
		else
			 $('#batchClass').trigger('change');
	});
}
function alReadyAssignedStudentOfStudentClass(controllerMode,actionType,program,branch, batchId, batchClassId,instId)
{
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			program : program,
			batchId:batchId,
			batchClassId:batchClassId,
			instId:instId,
			menuId:this.menuId
		}
	var assignWay=$('#assignWay').val();
	if(assignWay)
	{
	formData.assignWay = assignWay;
	}
	if(assignWay && assignWay==2)
	{
		formData.branch = branch;
	}
	bgCurtain();
	doAjaxCall('appAdmin', 'post', formData,function(data) {
		removeBgCurtain();
		$('#showStudentsAssignedToStudentClass').html(data);
	});
}
function saveNewStudentsToStudentClasses(type)
{
	var formContext = $("#genericSave");
	var formData = new FormData(formContext[0]);
	formData.append("menuId",this.menuId);

	formData.append("controllerMode",7040);
	
	
	var title='Assign students to classes';
	var message='Are you sure you want to proceed?';
	if(type===1)
		formData.append("actionType",25);
	else if(type===2)
	{
		title='Re-assign students to classes';
		message='It will clear already allocated students of this program and branch and make new entries.<br>Are you sure you want to proceed?';
		formData.append("actionType",28);
	}
	formData.append("classBatchSections",$('#sections').val());
	formData.append("batchClassId",$('#batchClass').val());
	var classBatchSectionsWithBatchClass=[];
	
	$('#sections >option').each(function(){
		classBatchSectionsWithBatchClass.push($(this).attr('data-value'));
		
	});
	var assignWay=$('#assignWay').val();
	if(assignWay)
	{
	formData.append("assignWay" , assignWay);
	}
	if(assignWay && assignWay==2)
	{
		/*formData.append("branch",$('#branch').val());*/
	}
	formData.append("classBatchSectionsWithBatchClass",classBatchSectionsWithBatchClass.toString());
	
	getConfirmDialog(title, message,function(data) 
			{
		bgCurtain();
	doAjaxCall('appAdmin', 'post', formData,function(data) 
			{
		modalDialog.modal('hide');
			if (data.indexOf("SUCCESS") > -1) 
			{
			showMessage("Classes and subjects assigned to students successfully..","success");
			}
		else
		{
			var dataArray = data.split("_")[1];
			showMessage(dataArray,"error");
		}
		getApprovedStudentsBasedOnSelection(7040,6)
		// $("#menuTab_" + this.menuId).trigger("click");
		removeBgCurtain();
	},false,false);
	},false);
	return false;
	
}
function getAlReadyAssignedStudentsDetailView(controllerMode,actionType,batch,program,branch, batchClassId,classBatchSectionId){
	
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			classBatchSectionId : classBatchSectionId,
			batchClassId:batchClassId,
			batch:batch,
			program:program,
			menuId:this.menuId
		}
			var assignWay=$('#assignWay').val();
			if(assignWay)
			{
			formData.assignWay = assignWay;
			}
			if(assignWay && assignWay==2)
			{
				formData.branch = branch;
			}
	doAjaxCall(	'appAdmin',
			'post',
			formData,
			function(data) {
				var buttons = [{
							type : "cancel",
							label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
							className : "btn-sm btn-default",
							callback : null
						} ];
				getModalDialog('large', 'Already Assigned students ', data,
						buttons, null);
			});
}

function getDetailReportOfAlReadyClassAssignedStudents(controllerMode, actionType,batchClassId)
{
	
	var buttons = [{
		type : "button",
		label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true'></span>Generate",
		className : "btn-sm btn-default",
		callback : function(e) {
			var assignedStudetnslassBatchSections=$('#assignedStudentsClassBatchSections').val();
			var reportGenerationType=$('#reportGenerationType').val();
			 window.open('appAdmin/reports/studentSectionReport/'+assignedStudetnslassBatchSections+'/'+reportGenerationType,'_blank');
		}
	},{
		type : "cancel",
		label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
		className : "btn-sm btn-default",
		callback : null
	} ];
	
	var data=   '<div class="wrapper-modal-content-area-pad"><div class="form-horizontal"><div class="col-md-12">'
        +'<label class="col-md-4 control-label" for="">Generation Type </label>'
        +'<div class="col-md-4"> <select id="reportGenerationType"  class="form-control" name="reportGenerationType"><option value="1" selected>With Page Header</option><option value="2">With Out Page Header</option>'
        +'</select></div>'
        +'</div></div></div>';
	
getModalDialog('large', 'Generate Student class report', data,
	buttons, null);

	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			batchClassId:batchClassId
		}
	
}

function sendCBTResultsNotification(mode,methodType,assessmentsId,assessmentsName){
	var formData={
			assessmentsId:assessmentsId,
			assessmentsName:assessmentsName,
			menuId:this.menuId
	}
		getConfirmDialog('Confirmation', '<p></p><p>This will send ' + assessmentsName +'  CBT Results to registered students. </p><p>Are you sure you want to proceed?</p>',function(data){
			bgCurtain();
		doAjaxCall('pushNotification/CBTResults/','POST',formData,function(data){
			if (data.indexOf("SUCCESS") > -1) {
				showMessage("CBT results notification send successfully..","success");
			}
			else{
				showMessage("oops we are having trouble please contact admin team.","error");
			}
			removeBgCurtain();
		});
	},function (data){
	}, false);
}

function handleServerConfigCache(type, controllerMode, actionType) {
	var formData={
			controllerMode:controllerMode,
			actionType:actionType,
			menuId:this.menuId
	}
	bgCurtain();
	doAjaxCall('appAdmin', 'POST', formData, function(data) {
		$("#badge_"+type).html(data);
		switch (actionType) {
		case 30:
			showMessage(data+" Question papers cached successfully.","success");
			break;
		case 31:
			showMessage(data+" Student assesment results cached successfully.","success");
			break;
		case 32:
			showMessage(data+" Student seating info cached successfully.","success");
			break;
		case 33:
			showMessage(data+" Student ESA results cached successfully.","success");
			break;
		case 34:
			showMessage(data+" config cached successfully.","success");
			break;
		case 126:
			showMessage(data+" Config Value cached successfully.","success");
			break;
		}
		removeBgCurtain();
	});

}

function getBatchClassInfoForStudentPromotions(){
	$('.getBatchClassForPromotions').on('change',function(){
		var type=$(this).attr('data-batchClass');
		
		if(getInteger(type,0)===1){
			var institute=$('#institute').val();
			var batch=$('#batch').val();
			var dept=$('#dept').val();
			var classes=$('#class').val();
			if(batch && dept && classes){
				getCombobox('/Academy/a/i/getBatchClassInfoForStudentPromotions/'+batch+'/'+dept+'/'+classes+'/'+institute,'batchClass',null,null,function(data){
					$('#batchClass').change();
					if($('#batchClass option').length<=0)
						showIdMessage("No batch classes found for the   batch , department and class you have selected you have selected.","error",'batchClass');
				});
			}
			else{
				$('#batchClass').html('');
				$('#batchClass').change();
			}
				
		}
		else if(getInteger(type,0)===2){
			var instituteId=$('#instituteId').val();
			var batchId=$('#batchId').val();
			var deptId=$('#deptId').val();
			var classesId=$('#classId').val();
			if(batchId && deptId && classesId){
			getCombobox('/Academy/a/i/getBatchClassInfoForStudentPromotions/'+batchId+'/'+deptId+'/'+classesId+'/'+instituteId,'batchClassId',null,null,function(data){
				$('#batchClassId').change();
				if($('#batchClassId option').length<=0)
					showIdMessage("No batch classes found for the   batch, department and class you have selected you have selected.","error",'batchClassId');
			});
			}
			else{
				$('#batchClassId').html('');
				$('#batchClassId').change();
			}
				
		}
	});
}

function getBatchDepartmentOfInstitutesForStudentPromotions(i, selected) {
	if (i === 1) {
		$('#instituteId').val($('#institute').val()).change();
		getCombobox('/Academy/a/i/getDeptBasedOnInstId/'+ selected,'dept',null,null,function(){
					$('#dept').change();
				});
		getCombobox('/Academy/a/i/batchesByInstIdOrParent/' + selected,'batch',null,null,function(){
			$('#batch').change();
		});
		getCombobox('/Academy/a/i/classessbyinst/'+selected, 'class',null,null,function(){
			$('#class').change();
		});
		$('#availStudents').html('');
	}
	else {
		getCombobox('/Academy/a/i/getDeptBasedOnInstId/'+ selected,'deptId',null,null,function(){
					$('#deptId').change();
				});
		getCombobox('/Academy/a/i/batchesByInstIdOrParent/' + selected,'batchId',null,null,function(){
			$('#batchId').change();
		});
		getCombobox('/Academy/a/i/classessbyinst/'+selected, 'classId',null,null,function(){
			$('#classId').change();
		});
	}
}

function getClassBatchSectionsForStudentPromotions(i,selected){
	
	if(i==1){
		if(selected)
			getCombobox('/Academy/a/i/getClassBatchSectionsWithBatchClass/' + selected,'classBatchSection');
		else
			$('#classBatchSection').html('');
	}
		
	else{
		if(selected)
		getCombobox('/Academy/a/i/getClassBatchSectionsWithBatchClass/' + selected,'classBatchSectionId');
		else
			$('#classBatchSectionId').html('');
	}
}

function handleGetAvailableStudents(controllerMode,actionType)
{
	var formData={};
	var instituteId=$('#institute').val();
	var batch=$('#batch').val();
	var batchClassId=$('#batchClass').val();
	var classBatchSectionId=$('#classBatchSection').val();
	if(batch){
		formData.controllerMode=controllerMode;
		formData.actionType=actionType;
		formData.instituteId=instituteId;
		formData.batchClassId=batchClassId;
		formData.batch=batch;
		formData.menuId=this.menuId;
		if(classBatchSectionId)
			formData.classBatchSectionId=classBatchSectionId.toString();
		doAjaxCall('appAdmin', 'POST', formData, function(data) {
			$('#availStudents').html(data);
		});
		}
	else{
		showIdMessage("please select batch","error",'batch');
	}
}
function handleAvailableStudentsCheckBoxes(){
	$("#checkAllStudents").on('click',function(){
		if($(this).prop('checked')==true)
			{
				$('[name^=promotedStudents]').prop('checked',true);
				// $('#selectdStudents').text("|
				// "+$('[name^=promotedStudents]:checked').length+" students
				// selected.")
			}
		else
			{
				$('[name^=promotedStudents]').prop('checked',false);
				// $('#selectdStudents').text("|
				// "+$('[name^=promotedStudents]:checked').length+" students
				// selected.")
			}
	});
	/*
	 * $("[id^=students_]").on('click',function(){
	 * if($(this).prop('checked')==true) $('#selectdStudents').text("|
	 * "+$('[name^=promotedStudents]:checked').length+" students selected.")
	 * else $('#selectdStudents').text("|
	 * "+$('[name^=promotedStudents]:checked').length+" students selected.") });
	 */
}

function showAssignStudentsButtonForStudentPromotions(){
	var batchClassId=$('#batchClassId').val();
	var classBatchSectionId=$('#classBatchSectionId').val();
	if(batchClassId && classBatchSectionId)
		$('#assignStudents').show();
	else
		$('#assignStudents').hide();
	
}

function showDividedPromotingStudentsIntoSections(formData, classBatchSectionId, selectedStudetnts){
	var classBatchSections;
	var totalStudents;
	if(classBatchSectionId && classBatchSectionId.length>0)
		classBatchSections=classBatchSectionId.length;
	if(selectedStudetnts && selectedStudetnts.length>0)
	 totalStudents=selectedStudetnts.length;

	
	var classes=$('#classId').val();
	var departments=$('#deptId').val();
	var batchClass=$('#batchClassId').val();
	var classBatchSectionsLength;
	var remainStudents = getInteger(totalStudents % classBatchSections,0);
	var toAssignStudents = getInteger(totalStudents / classBatchSections,0);
	var previousEnd=0;
	var htmlaData='<fieldset class="grp_frmfld" style="padding-top: 15px;">	<legend>Studentpromotions allocation preview</legend><table class="table compact table-striped table-bordered table-action dataTable no-footer" cellspacing="0" width="100%">'
		+'<thead><tr><th>Department</th><th>Semester</th><th>Section</th><th>No Of students</th></tr></thead><tbody>';
	for (var i = 0; i < classBatchSections; i++)
	{

		var classBatchSectionId1 = getInteger(classBatchSectionId[i]);
		var start = previousEnd;
		var noRows = getInteger(toAssignStudents,0);
		var sectionText=$('#classBatchSectionId option[value='+classBatchSectionId1+']').text();
		var departmentText=$('#deptId option[value='+departments+']').text();
		var semesterText=$('#classId option[value='+classes+']').text();
		if (i < remainStudents)
			noRows = getInteger(toAssignStudents + 1,0);
		
		previousEnd=start+noRows;
		
		htmlaData+='<tr><td>'+departmentText+'</td><td>'+semesterText+'</td><td>'+sectionText+'</td><td>'+noRows+'</td></tr>';
	}
	htmlaData+='</tbody></table></fieldset>';
	
	return htmlaData
}

function assignSelectedPromotedStudentsToClass(controlleMode,actionType){
	$('#getAvailableStudentsForPromotions').DataTable().search("").draw();
	var formData={};
	var batchClassId=$('#batchClassId').val();
	var classBatchSectionId=$('#classBatchSectionId').val();
	var oldClassBatchSections=$('#classBatchSection').val();
	var oldBatchClass=$('#batchClass').val();
	var selectedStudetnts=[];
	if(batchClassId && classBatchSectionId){
		 $('input[name=promotedStudents]:checked').each(function() {
			 selectedStudetnts.push($(this).attr('data-value'));
		     });
		if(batchClassId && classBatchSectionId && classBatchSectionId.length>0 && selectedStudetnts && selectedStudetnts.length>0){
			formData.controllerMode=controllerMode;
			formData.actionType=actionType;
			formData.batchClass=batchClassId;
			formData.classBatchSections=classBatchSectionId.toString();
			formData.selectedStudents=selectedStudetnts.toString();
			formData.oldBatchClass=oldBatchClass;
			formData.menuId=this.menuId;
			if(oldClassBatchSections)
			formData.oldClassBatchSections=oldClassBatchSections.toString()
			
			if(getInteger(selectedStudetnts.length,0)<getInteger(classBatchSectionId.length,0)){
				showMessage("Number of  sections should not more than number of students.", "error");
				return false;
			}
			
			var message='<p>You are moving students from one class to another class. Are you sure you want to proceed ?</p>';
			if($('#assignSubjects').is(':checked')==true){
				formData.assignSubjects=$('#assignSubjects').val();
				message="<p>You are  moving students from one class to another class along with subjects. Are you sure you want to proceed ?</p>"
			}
			var title='Student promotions';
			message= message+"<br> "+showDividedPromotingStudentsIntoSections(formData, classBatchSectionId, selectedStudetnts);
			getConfirmDialog(title, message,function(data) {
				// bgCurtain();
			doAjaxCall('appAdmin', 'POST', formData,function(data) {
				// modalDialog.modal('hide');
					if (data.indexOf("SUCCESS") > -1) {
						if(formData.assignSubjects==1)
							showMessage("Classes and subjects assigned to students successfully..","success");
						else
							showMessage("Classes  assigned to students successfully..","success");
						
						$('#availStudents').html('');
				}
				else{
					var dataArray = data.split("_")[1];
					showMessage(dataArray,"error");
				}
				// $("#menuTab_" + this.menuId).trigger("click");
				// removeBgCurtain();
			});
			},false);
		}
		else{
			showMessage("Please select students");
		}
	}
}

function handleSpriritStudentsCheckBoxesToAssignFaculty()
{
	$("#checkAllStudents").off('click');
	$("#checkAllStudents").on('click',function(){
		
		var allPages = getAvailableStudentsForSpiritGroups.column().nodes();
		if($(this).prop('checked')==true)
			{
			selectedSpiritGroupUsers=[];
			$('input[type="checkbox"]', allPages).prop('checked', true);
			
			$.each(allPages, function(index, currentValue)
					{
						if(currentValue.hasAttribute('data-value'))
						{
							var studentId= currentValue.getAttribute('data-value');
							selectedSpiritGroupUsers.push(studentId);
						}
					});
			}
		else
			{
				$('input[type="checkbox"]', allPages).prop('checked', false);
				selectedSpiritGroupUsers=[];
			}
	});
	$('input[name^=spiritStudentToAssignFaculty]').off('click');
	$('input[name^=spiritStudentToAssignFaculty]').on('click', function()
			{
		
				var studentId= $(this).attr('data-value');
				if($(this).prop('checked')==true)
						{
						if(studentId)
						{
							selectedSpiritGroupUsers.push(studentId);
						}
				
					$(this).prop('checked',true);
				}
				else
				{
					selectedSpiritGroupUsers=$.each(selectedSpiritGroupUsers, function(index, useId){
						if(studentId)
							{
							if(useId===studentId )
								{
								selectedSpiritGroupUsers.splice(index,1);
								$('#checkAllStudents').prop('checked', false);
								$(this).prop('checked', false);
								return false;
								}
							
							}
					});
					
				}
			});
}

function assignSelectedStudentsToSpiritGroups(controlleMode, actionType)
{
	if(!$('#facultyId').val())
		{
		showMessage('Select faculty to assign spirit groups.', 'error');
		return false;
		}
	if(selectedSpiritGroupUsers.length > 0)
		{
		var formData={};
		formData.controllerMode=controllerMode;
		formData.actionType=actionType;
		formData.selectedStudents=selectedSpiritGroupUsers.toString();
		formData.facultyId=$('#facultyId').val();
		formData.menuId=this.menuId;
		
		var title='Assign Students to spirit groups.';
		var message=' Are you sure you want to proceed ?';
		getConfirmDialog(title, message,function(data) {
		bgCurtain();
		doAjaxCall('appAdmin', 'POST', formData,function(data) {
				removeBgCurtain();
			
				if (data.indexOf("SUCCESS") > -1)
				{
					removeBgCurtain();
					showMessage("Assigned students to spirit groups successfully ..","success");
					$('#availStudents').html('');
					selectedSpiritGroupUsers=[];
						
				}
				else
				{
					var dataArray = data.split("_")[1];
					showMessage(dataArray,"error");
				}
			// $("#menuTab_" + this.menuId).trigger("click");
			// removeBgCurtain();
		});
		},false);
		}
	else
		{
		showMessage('Select users to assign spirit groups.', 'error');
		}
	
}

function getSpiritStudentsOfFaculty(controllerMode, actionType)
{
	if(!$('#facultyId').val())
	{
	showMessage('Select faculty to get assigned students.', 'error');
	return false;
	}
	var formData={};
	formData.controllerMode=controllerMode;
	formData.actionType=actionType;
	formData.facultyId=$('#facultyId').val();
	formData.menuId=this.menuId;
	bgCurtain();
	doAjaxCall('appAdmin', 'POST', formData,function(data) {
		
			removeBgCurtain();
			$('#availStudents').html(data);
		// $("#menuTab_" + this.menuId).trigger("click");
		// removeBgCurtain();
	});

}

function handleWithDrawnSubjectsEmail(controllerMode, actionType)
{
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			menuId : 321,
		};
	
	var title='Send Withdran Email to Students';
	var message='Are you sure you want to send withdrawn subjects as eamil to students ?';
	
	if(getInteger(actionType,0)==108)
		{
		 title='Send Withdrawn Email to Parents';
		 message='Are you sure you want to send withdrawn subjects as eamil to parents ?';
		}
	else if(getInteger(actionType,0)==115)
		{
		title='Send Withdrawn lines opened intimation Email ';
		 message='Are you sure you want to send withdrawn lines opened as  mail ?';
		}
	else if(getInteger(actionType,0)==116)
		{
		 title='Send Withdrawn lines opened intimation notification';
		 message='Are you sure you want to send withdrawn lines opened as  notification. ?'
			 +'<br> <br> <form id="genericSave"> <input type="text" class="form-control" name="notificationTitle" required id="notificationTitle" placeholder="Title"/>'
			 +'<br><textarea class="form-control" name="notificationMessage"  id="notificationMessage" placeholder="Message" rows="5" required></textarea></form>';

		}
	var modalConfirm=bootbox.confirm({
		title:title,
	    message: message,
	    buttons : {
			confirm : {
				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true'></span>Yes",
				className : "btn btn-sm btn-default",
			},
			cancel : {
				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>No",
				className : "btn btn-sm btn-default",
			},
		},
	    callback: function (result) {
	    	if(result)
	    		{
	        	if ($("#genericSave").length>0 && !$("#genericSave").valid())
					return false;
		    	
		    	if(getInteger(actionType,0)==116)
				{
				var notificationTitle=$('#notificationTitle').val();
				var notificationMessage=$('#notificationMessage').val();
				
				formData.notificationTitle=notificationTitle;
				formData.notificationMessage=notificationMessage;
				}
				bgCurtain();
				doAjaxCall('admissionsApp', 'POST', formData, function(data) {
					removeBgCurtain();
					if (data.indexOf("SUCCESS") > -1)
					{
						var message='Withdrawn subjects as email to students sent successfully ..';
						if(getInteger(actionType,0)==108)
						{
							message='Withdrawn subjects as email to patents sent successfully ..';
						}
						else if(getInteger(actionType,0)==115)
						{
							message=' Withdrawn lines opened intimation as email to students sent successfully ..';
						}
						else if(getInteger(actionType,0)==116)
						{
							message=' Withdrawn lines opened intimation as notifcation to students sent successfully ..';
						}
						showMessage(message, "success");
					}
					else
					{
						var dataArray = data.split("_")[1];
						showMessage(dataArray,"error");
					}
				});
	    		}
	    	modalConfirm=null;
	    }
		
		
	});
	$(" .bootbox-confirm .modal-footer button").css({
		"float" : "right",
		"margin-left" : "10px"
	});
}
function handleSubjectsFeedBackEmail(controllerMode, actionType)
{
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			menuId : 321,
		};
	
	var title='Send subject feedback lines intimation email to students';
	var message='Are you sure you want to send subject feedback lines intimation as eamil to students ?';
	
	if(getInteger(actionType,0)==112)
	{
		 title='Send subject feedback lines intimation notification to students';
		 message='Are you sure you want to send subject feedback lines intimation as notification to students ?'
			 +'<br> <br> <form id="genericSave"> <input type="text" class="form-control" name="notificationTitle" required id="notificationTitle" placeholder="Title"/>'
			 +'<br><textarea class="form-control" name="notificationMessage"  id="notificationMessage" placeholder="Message" rows="5" required></textarea></form>';
	}
	else if(getInteger(actionType,0)==113)
	{
	 title='Send subject feedback lines closing intimation to Students';
	 message='Are you sure you want to send subject feedback lines closing intimation as email to students ?';
	}
	
	var modalConfirm=bootbox.confirm({
		title:title,
	    message: message,
	    buttons : {
			confirm : {
				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true'></span>Yes",
				className : "btn btn-sm btn-default",
			},
			cancel : {
				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>No",
				className : "btn btn-sm btn-default",
			},
		},
	    callback: function (result) {
	    	if(result)
	    		{
	        	if ($("#genericSave").length>0 && !$("#genericSave").valid())
					return false;
		    	
		    	if(getInteger(actionType,0)==112)
				{
				var notificationTitle=$('#notificationTitle').val();
				var notificationMessage=$('#notificationMessage').val();
				
				formData.notificationTitle=notificationTitle;
				formData.notificationMessage=notificationMessage;
				}
				bgCurtain();
				doAjaxCall('admissionsApp', 'GET', formData, function(data) {
					removeBgCurtain();
					if (data.indexOf("SUCCESS") > -1)
					{
						var message=' Feedback lines opened intimation as email to students sent successfully ..';
						if(getInteger(actionType,0)==112)
						{
							message=' Feedback lines opened intimation as notification to students sent successfully ..';
						}
						else if(getInteger(actionType,0)==113)
						{
							message=' Feedback lines Closing intimation as email to students sent successfully ..';
						}
						showMessage(message, "success");
					}
					else
					{
						var dataArray = data.split("_")[1];
						showMessage(dataArray,"error");
					}
				}, function(){
					
				});
				
	    		}
	    	modalConfirm=null;
	    }
		
		
	});
	$(" .bootbox-confirm .modal-footer button").css({
		"float" : "right",
		"margin-left" : "10px"
	});
}

function handleESARegistrationConfirmationMail(controllerMode, actionType, esaId, esaName)
{
	if(esaName.indexOf(":") > -1)
		{
		esaName=esaName.split(":")[1];
		}
	var formData={
			controllerMode:controllerMode,
			actionType:actionType,
			esaId:esaId,
			menuId:this.menuId
	}
	getConfirmDialog(' ESA Registration Confirmation mail', 'This will send ESA Registration confiramtion mail to students of <strong>'+ esaName+ '</strong> . Are you sure you want to continue ? ', function(){
		bgCurtain();
		doAjaxCall('instituteApp', 'POST', formData, function(data) {
			removeBgCurtain();
			
			if (data.indexOf("SUCCESS") > -1)
			{
				var message=' ESA Registation Confirmation mail to students sent successfully ..';
				showMessage(message, "success");
			}
			else
			{
				var dataArray = data.split("_")[1];
				showMessage(dataArray,"error");
			}
		}, function(){
			
		});
		
	}, function(){
		
	});
}

function manageEsaLinesWithProgramAndSemester(controllerMode, actionType, esaId, esaName)
{
	var formData={
			controllerMode:controllerMode,
			actionType:actionType,
			menuId:this.menuId,
			esaId:esaId,
			esaName:esaName
	}
	bgCurtain();
	doAjaxCall('instituteApp', 'POST', formData, function(data) {
		removeBgCurtain();
		var title=' Manage ESA lines by Program & Semester "'+esaName+'"';
		var buttons = [
		   			{
		   				type : "button",
		   				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='classExChangeSave-id'></span>Save",
		   				className : "btn-sm btn-default",
		   				callback : function(e) {
		   					if (!$("#genericSave").valid())
		   						{
		   						return false;
		   						}
		   					else if(programAndSemesterChecks.length<=0)
		   						{
		   						showMessage('Please Select at least one value',"error");
		   						return false;
		   						}
		   					return saveEsaLinesByProgramAndSemester(formData);
		   				}
		   			},
		   			{
		   				type : "cancel",
		   				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
		   				className : "btn-sm btn-default",
		   				callback : null
		   			} ];
		getModalDialog('large', title, data, buttons, function(){
			if(parsedProgramAndClasses)
				{
				var programOccuredCount=0;
				var programCheckedCount=0;
				var prevProgramId=0
				$.each(parsedProgramAndClasses, function(index, programAndClass)
						{
						var  nextProgramId=programAndClass.ProgramId;
						if(prevProgramId !=  nextProgramId)
							{
							if(programOccuredCount==programCheckedCount)
								{
								$('#offeredProgram_'+prevProgramId).prop('checked',true);
								}
							programOccuredCount=0;
							programCheckedCount=0;
							prevProgramId=nextProgramId;
							
							}
						var classessId=programAndClass.ClassessId;
						if(programAndClass.ESAId)
							{
							if(programAndClass.LinesByProgramSemesterStatus==0)
								{
								$('#offeredClass_'+nextProgramId+'_'+classessId).prop('checked',true);
								programCheckedCount++;
								}
							 var selectedProgramsAndSemesters={};
							  selectedProgramsAndSemesters.programId=nextProgramId;
							  selectedProgramsAndSemesters.esaLinesByProgramSemesterId=programAndClass.ESALinesByProgramSemesterId;
							  selectedProgramsAndSemesters.classId=classessId;
							  selectedProgramsAndSemesters.linesProgramSemesterStatus=programAndClass.LinesByProgramSemesterStatus
							  programAndSemesterChecks.push(selectedProgramsAndSemesters);
							}
						programOccuredCount++;
						});
				if(programOccuredCount==programCheckedCount)
				{
				$('#offeredProgram_'+prevProgramId).prop('checked',true);
				}
				}
			
		}, function(){
			
		});
	}, function(){
		
	});
}


var clickHappendFromProgram=false;
function manageEsaLinesWithProgramAndSemesterCheckboxes(programAndClasses)
{
	$('[class^=classCheck]').on('click', function(){
		 var clickedProgramId=$(this).attr('data-programid');
		 var clickedClassId=$(this).attr('data-classid');
		 var esaLinesByProgramSemesterId=$(this).attr('data-esalinesid');
		
		 var isProgramchecked=$('#offeredProgram_'+clickedProgramId).is(':checked');
		 if(clickHappendFromProgram)
			 {
			 if(isProgramchecked)
			 {
				 $('#offeredClass_'+clickedProgramId+'_'+clickedClassId).prop('checked', true);
			 }
			 else
			 {
				 $('#offeredClass_'+clickedProgramId+'_'+clickedClassId).prop('checked', false);
			 }
			 }
		
		 
		if($(this).is(':checked'))
		{
			  var status=$(this).attr('data-status');
			  if(getInteger(esaLinesByProgramSemesterId,0)>0 && status==1)
				  {
				  status=0;
				  $(this).attr('data-status',status);
				  $.each(programAndSemesterChecks, function(index, selectedProgramsAndSemesters){
						if(selectedProgramsAndSemesters)
							{
							if(selectedProgramsAndSemesters.programId==clickedProgramId && 
									clickedClassId==selectedProgramsAndSemesters.classId && 
									esaLinesByProgramSemesterId==selectedProgramsAndSemesters.esaLinesByProgramSemesterId)
								{
									selectedProgramsAndSemesters.linesProgramSemesterStatus=status;
								}
							}
					});
				  }
			  
			  var selectedProgramsAndSemesters={};
			  selectedProgramsAndSemesters.programId=clickedProgramId;
			  selectedProgramsAndSemesters.classId=clickedClassId;
			  selectedProgramsAndSemesters.esaLinesByProgramSemesterId=esaLinesByProgramSemesterId;
			  selectedProgramsAndSemesters.linesProgramSemesterStatus=status;
			  if(getInteger(esaLinesByProgramSemesterId,0)<=0)
				  {
				  programAndSemesterChecks.push(selectedProgramsAndSemesters);
				  }
			 
			  $(this).prop('checked', true);
			// return false;
		}
		else
		{
			programAndSemesterChecks=$.each(programAndSemesterChecks, function(index, selectedProgramsAndSemesters){
				if(selectedProgramsAndSemesters)
					{
					if(selectedProgramsAndSemesters.programId==clickedProgramId && clickedClassId==selectedProgramsAndSemesters.classId)
						{
						if(selectedProgramsAndSemesters.esaLinesByProgramSemesterId>0){
							selectedProgramsAndSemesters.linesProgramSemesterStatus=1;
							$('#offeredClass_'+clickedProgramId+'_'+clickedClassId).attr('data-status',1);
						}
						else{
							programAndSemesterChecks.splice(index,1);
						}
						
						$(this).prop('checked', false);
					// return false;
						}
					}
			});
		}
	});
	$('[class^=programCheck]').on('click', function()
			{
		var clickedProgramId=$(this).attr('data-programid');
		$('[id^=offeredClass_'+clickedProgramId+']').each(function(){
			 clickHappendFromProgram=true;
			 $(this).click();
			
		 });
		 clickHappendFromProgram=false;
	});
	 parsedProgramAndClasses=JSON.parse(programAndClasses);
}

function saveEsaLinesByProgramAndSemester(formData)
{
	if(programAndSemesterChecks.length<=0)
		{
		showMessage('Please Select at least one value',"error");
		return false;
		}
	if(formData.esaName.indexOf(":") > -1)
	{
		formData.esaName=formData.esaName.split(":")[1];
	}
	formData.actionType=86;
	formData.programAndSemester=JSON.stringify(programAndSemesterChecks);
	getConfirmDialog(' Esa lines by Program and semester', 'This will save Program and semester for  <strong>'+ formData.esaName+ '</strong> . Are you sure you want to continue ? ', function(){
	bgCurtain();
	doAjaxCall('instituteApp', 'POST', formData, function(data) {
		removeBgCurtain();
		modalDialog.modal('hide');
		if (data.indexOf("SUCCESS") > -1)
		{
			var message=' Esa lines by program and semester saved successfully ..';
			showMessage(message, "success");
		}
		else
		{
			var dataArray = data.split("_")[1];
			showMessage(dataArray,"error");
		}
	}, function(){
		
	});
	}, false);
	return false;
}

function getProgressReportRecipients(controllerMode, actionType)
{
	
	/*
	 * if($('#USNName').val()==""){ if (!$("#genericSave").valid()) return
	 * false; }
	 */
	
	if (!$("#genericSave").valid())
		return false;
	
	if(this.formErrorList.length>0)
		return false;
	
	var startDate = document.getElementById("sDate").value;
    var endDate = document.getElementById("eDate").value;

    if ((Date.parse(startDate) > Date.parse(endDate))) {
    	showMessage("Attendance To Date should be greater than Attendance From Date",'error');
    	return false;
    }
    
	if(actionType==3){
		$("#actionType").val(actionType)
	}
	
	var formData = new FormData($('#genericSave')[0]);
	
	bgCurtain();
	doAjaxCall('instituteApp', 'POST', formData,
			function(data) {
					removeBgCurtain();
					$('#progerssReportRecipientsDiv').show();
					$('#progerssReportRecipients').html(data);

			}, false, false);
}
function getProgressReportInformationOfStudent(controllerMode, actionType, userId )
{
	var formData={
			controllerMode:controllerMode,
			actionType:actionType
	};
	
}

function handleOpenLinesByProgramSemester(controllerMode, actionType, manageDataId, selectedData)
{
	var formData={
			controllerMode:controllerMode,
			actionType:actionType,
			menuId:this.menuId,
			manageDataId:manageDataId,
			selectedData:selectedData
	}
	bgCurtain();
	doAjaxCall('admissionsApp', 'POST', formData, function(data) {
		removeBgCurtain();
		var title=' Manage Open lines by Program & Semester "'+selectedData+'"';
		var buttons = [
		   			{
		   				type : "button",
		   				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='classExChangeSave-id'></span>Save",
		   				className : "btn-sm btn-default",
		   				callback : function(e) {
		   					if (!$("#genericSave").valid())
		   						{
		   						return false;
		   						}
		   					else if(programAndSemesterChecks.length<=0)
		   						{
		   						showMessage('Please Select at least one value',"error");
		   						return false;
		   						}
		   					return saveOpenLinesByProgramAndSemester(formData);
		   				}
		   			},
		   			{
		   				type : "cancel",
		   				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
		   				className : "btn-sm btn-default",
		   				callback : null
		   			} ];
		getModalDialog('large', title, data, buttons, function(){
			if(parsedProgramAndClasses)
				{
				var programOccuredCount=0;
				var programCheckedCount=0;
				var prevProgramId=0
				$.each(parsedProgramAndClasses, function(index, programAndClass)
						{
						var  nextProgramId=programAndClass.ProgramId;
						if(prevProgramId !=  nextProgramId)
							{
							if(programOccuredCount==programCheckedCount)
								{
								$('#offeredProgram_'+prevProgramId).prop('checked',true);
								}
							programOccuredCount=0;
							programCheckedCount=0;
							prevProgramId=nextProgramId;
							
							}
						var classessId=programAndClass.ClassessId;
						if(programAndClass.OpenLinesId)
							{
							if(programAndClass.LinesByProgramSemesterStatus==0)
								{
								$('#offeredClass_'+nextProgramId+'_'+classessId).prop('checked',true);
								programCheckedCount++;
								}
							 var selectedProgramsAndSemesters={};
							  selectedProgramsAndSemesters.programId=nextProgramId;
							  selectedProgramsAndSemesters.openLinesByProgramSemesterId=programAndClass.OpenLinesByProgramSemesterId;
							  selectedProgramsAndSemesters.classId=classessId;
							  selectedProgramsAndSemesters.linesProgramSemesterStatus=programAndClass.LinesByProgramSemesterStatus
							  programAndSemesterChecks.push(selectedProgramsAndSemesters);
							}
						programOccuredCount++;
						});
				if(programOccuredCount==programCheckedCount)
				{
				$('#offeredProgram_'+prevProgramId).prop('checked',true);
				}
				}
			
		}, function(){
			
		});
	}, function(){
		
	});
}

function handleOpenLinesByProgramSemesterCheckBoxes(programAndClasses)
{
	$('[class^=classCheck]').on('click', function(){
		 var clickedProgramId=$(this).attr('data-programid');
		 var clickedClassId=$(this).attr('data-classid');
		 var openLinesByProgramSemesterId=$(this).attr('data-openlinesid');
		
		 var isProgramchecked=$('#offeredProgram_'+clickedProgramId).is(':checked');
		 if(clickHappendFromProgram)
			 {
			 if(isProgramchecked)
			 {
				 $('#offeredClass_'+clickedProgramId+'_'+clickedClassId).prop('checked', true);
			 }
			 else
			 {
				 $('#offeredClass_'+clickedProgramId+'_'+clickedClassId).prop('checked', false);
			 }
			 }
		
		 
		if($(this).is(':checked'))
		{
			  var status=$(this).attr('data-status');
			  if(getInteger(openLinesByProgramSemesterId,0)>0 && status==1)
				  {
				  status=0;
				  $(this).attr('data-status',status);
				  $.each(programAndSemesterChecks, function(index, selectedProgramsAndSemesters){
						if(selectedProgramsAndSemesters)
							{
							if(selectedProgramsAndSemesters.programId==clickedProgramId && 
									clickedClassId==selectedProgramsAndSemesters.classId && 
									openLinesByProgramSemesterId==selectedProgramsAndSemesters.openLinesByProgramSemesterId)
								{
									selectedProgramsAndSemesters.linesProgramSemesterStatus=status;
								}
							}
					});
				  }
			  
			  var selectedProgramsAndSemesters={};
			  selectedProgramsAndSemesters.programId=clickedProgramId;
			  selectedProgramsAndSemesters.classId=clickedClassId;
			  selectedProgramsAndSemesters.openLinesByProgramSemesterId=openLinesByProgramSemesterId;
			  selectedProgramsAndSemesters.linesProgramSemesterStatus=status;
			  if(getInteger(openLinesByProgramSemesterId,0)<=0)
				  {
				  programAndSemesterChecks.push(selectedProgramsAndSemesters);
				  }
			 
			  $(this).prop('checked', true);
			// return false;
		}
		else
		{
			programAndSemesterChecks=$.each(programAndSemesterChecks, function(index, selectedProgramsAndSemesters){
				if(selectedProgramsAndSemesters)
					{
					if(selectedProgramsAndSemesters.programId==clickedProgramId && clickedClassId==selectedProgramsAndSemesters.classId)
						{
						if(selectedProgramsAndSemesters.openLinesByProgramSemesterId>0){
							selectedProgramsAndSemesters.linesProgramSemesterStatus=1;
							$('#offeredClass_'+clickedProgramId+'_'+clickedClassId).attr('data-status',1);
						}
						else{
							programAndSemesterChecks.splice(index,1);
						}
						
						$(this).prop('checked', false);
					// return false;
						}
					}
			});
		}
	});
	$('[class^=programCheck]').on('click', function()
			{
		var clickedProgramId=$(this).attr('data-programid');
		$('[id^=offeredClass_'+clickedProgramId+']').each(function(){
			 clickHappendFromProgram=true;
			 $(this).click();
			
		 });
		 clickHappendFromProgram=false;
	});
	 parsedProgramAndClasses=JSON.parse(programAndClasses);
}

function saveOpenLinesByProgramAndSemester(formData)
{

	if(programAndSemesterChecks.length<=0)
		{
		showMessage('Please Select at least one value',"error");
		return false;
		}
	if(formData.selectedData.indexOf(":") > -1)
	{
		formData.selectedData=formData.selectedData.split(":")[1];
	}
	formData.actionType=131;
	formData.programAndSemester=JSON.stringify(programAndSemesterChecks);
	getConfirmDialog(' Open lines by Program and semester', 'This will save Program and semester for  <strong>'+ formData.selectedData+ '</strong> . Are you sure you want to continue ? ', function(){
	bgCurtain();
	doAjaxCall('admissionsApp', 'POST', formData, function(data) {
		removeBgCurtain();
		modalDialog.modal('hide');
		if (data.indexOf("SUCCESS") > -1)
		{
			var message=formData.selectedData+' open lines by program and semester saved successfully ..';
			showMessage(message, "success");
		}
		else
		{
			var dataArray = data.split("_")[1];
			showMessage(dataArray,"error");
		}
	}, function(){
		
	});
	}, false);
	return false;
}
// =-----------------end academy admin- ---------------------------------=-//

function getWorkflowDetails(type, mode, actionType, id, selectedData) {
	
	var obj = getAppAdminDialogMessageDetails(actionType, id, selectedData);
	
	var formData = {
		controllerMode : mode,
		actionType : actionType,
		id : id,
		menuId : this.menuId,
		selectedData : selectedData
	};
	
	doAjaxCall('appAdmin', 'GET', formData, function(data) {
		handleShowGetWorkflowDetailsSuccess(formData, data, obj.title);
		refreshDatatable();
	});
}

function handleShowGetWorkflowDetailsSuccess(formData, data, title) {
	this.formErrorList = [];
	var buttons = [
		{
			type : "cancel",
			label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
			className : "btn-sm btn-default",
			callback : function(e) {}
		} ];
	
	getModalDialog('large', title, data, buttons, function() {
		tempModel = modalDialog;
		firstDialogBox = $.extend(true, {}, tempModel);
		if (parseInt(formData.actionType) == 7) {
			appAdminCheckComboBox(formData.controllerMode, formData.actionType, formData.id, "");
		}
		if (parseInt(formData.actionType) == 11) {
			appAdminCheckComboBox(formData.controllerMode, formData.actionType, formData.id, "");
		}
	});
}

function getDetailsBasedOnWorkflowId(mode, methodType) {

	if ($("#workflowModuleId").val() > 0) {
		var formData = {
			controllerMode : mode,
			actionType : methodType,
			id : $("#workflowModuleId").val(),
			wid : $("#workflowId").val(),
			workflowName : $("#varientName").val(),
			workflowStatus : $("#wfstatus").val(),
			instId : $("#institutionId").val(),
			menuId : this.menuId
		};
		doAjaxCall('appAdmin', 'get', formData, function(data) {
			$('#manageWorkflowDetailsBasedOnId').html(data);
		});
	}
}

function saveWorkflowDetails(controllerMode, actionType) {
	
	var arr = [];
	
	if($("#varientName").val() == '') {
		showMessage("Please Add Workflow Name", "error");
		return false;
	}
	
	if(!$("#institutionId").val()) {
		showMessage("Please Select Institution", "error");
		return false;
	}
	
	$("#getworkflowdetailsData>tbody tr").each(function() {
		var obj = {};
		$(this).children().each(function() {
			if ($(this).hasClass('wfsid')) {
				var x = $('input[type="checkbox"]', this);
				if ($(x).is(":checked")) {
					obj.action = 1;
					obj.stateId = $(x).attr('data-selected');
				} else {
					obj.action = 0;
					obj.stateId = $(x).attr('data-selected');
				}
			} else if ($(this).hasClass('wfsname')) {
				obj.name = $(this).text();
			} else if ($(this).hasClass('wfsd')) {
				obj.details = $(this).text();
			} else if ($(this).hasClass('wfss')) {
				obj.state = $(this).text();
			} else if ($(this).hasClass('wfst')) {
				obj.type = $(this).find('select').val();
			} else if ($(this).hasClass('wfsordernum')) {
				obj.orderNumber = $(this).find('.orderNo').val();
			} else if ($(this).hasClass('wfspt')) {
				obj.permissionType = $(this).find('select').val();
			} else if ($(this).hasClass('wfsmd')) {
				var x = $('input[type="checkbox"]', this);
				if ($(x).is(":checked")) {
					obj.markDefault = 1;
				} else {
					obj.markDefault = 0;
				}
			}
		});
		
		if (Object.keys(obj).length > 0) {
			obj.moduleId = $("#workflowModuleId").val(),
			obj.wfstatus = $("#wfstatus").val(),
			obj.workflowId = $("#workflowId").val(),
			obj.workflow = $("#varientName").val(), 
			arr.push(obj)
		}
	});
	
	var that = this;
	
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			menuId : this.menuId,
			workflowId : $("#workflowId").val(),
			workflowModuleId : $("#workflowModuleId").val(),
			workflowName : $("#varientName").val(),
			workflowStatus : $("#wfstatus").val(),
			instId : $("#institutionId").val(),
			type : $('#type').val(),
			data : JSON.stringify(arr),
			addWorkflowRestrictionUserOrRole : JSON.stringify(addWorkflowRestrictionUserOrRole)
	};
	
	if (that.formErrorList.length > 0) {
		return false;
	} else {
		getConfirmDialog("Save Details", "Do you want to save the changes?", function() {
			doAjaxCall(that.url, 'POST', formData, function(data) {
				if (data.indexOf("SUCCESS") > -1) {
					showMessage("Saved SuccessFully", "success");
					refreshDatatable();
					$('#manageWorkflowDetailsBasedOnId').hide();
					modalDialog = firstDialogBox;
					modalDialog.modal('hide');
				} else {
					showMessage("Not Saved! Try again", "error");
				}
				addWorkflowRestrictionUserOrRole = [];
				workflowUsersIdarray = [];
				workflowUserRoleIdarray = [];
//				modalDialog.modal('hide');
			});
		});
		return false;
	}
}
	
function prmsDispatcher(controllerMode, actionType, id, selectedData) {
	var res = {};
	switch (controllerMode) {
	case PRMSConstants.ControllerMode.PRMSCONTROLLER:
		res = getPRMSDialogMessage(actionType, id, selectedData);
		break;

	case PRMSConstants.ControllerMode.PROBLEMTYPECONTROLLER:
		res = getAppAdminDialogMessageDetails(actionType, id, selectedData);
		res.callBack=true;
		appAdminCheckComboBox(controllerMode, actionType, id, selectedData);
		break;
	case PRMSConstants.ControllerMode.CATEGORYCONTROLLER:
		res = getAppAdminDialogMessageDetails(actionType, id, selectedData);
		res.callBack=true;
		appAdminCheckComboBox(controllerMode, actionType, id, selectedData);
		break;
	case PRMSConstants.ControllerMode.BUILDINGCONTROLLER:
		res = getAppAdminDialogMessageDetails(actionType, id, selectedData);
		res.callBack=true;
		appAdminCheckComboBox(controllerMode, actionType, id, selectedData);
		break;
		
	case PRMSConstants.ControllerMode.MANAGEPRMSUSERCONTROLER:
		res = getAppAdminDialogMessageDetails(actionType, id, selectedData);
		res.callBack=true;
		appAdminCheckComboBox(controllerMode, actionType, id, selectedData);
		break;
	}

	return res;
}

function getPRMSDialogMessage(actionType, id, selectedData) {
	var obj = {};
	switch (actionType) {
	case PRMSConstants.ActionType.SHOWEDIT:
		getCombobox('../a/prms/institutesByUser/', 'instId');
		
		obj.title = _MESSAGES.modalDialog.addTitle + " ";
		break;

	case PRMSConstants.ActionType.WORKLOGVIEW:
		getCombobox('../a/prms/problemType', 'problemType');
		obj.title = _MESSAGES.modalDialog.prmsWorklogTitle + " ";
		break;
	case PRMSConstants.ActionType.REASSIGNVIEW:
		obj.title = _MESSAGES.modalDialog.prmsReassignTitle + "";
		break;
	case PRMSConstants.ActionType.VIEW:
		setDateTimePicker();
		getCombobox('../a/prms/institutesByUser/', 'institutes');
		getCombobox('../a/prms/departmentByDefaultInst', 'depts');
		getCombobox('../a/prms/buildingsbydefaultInst', 'buildingId');
		getCombobox('../a/prms/problemTypebydefaultInst', 'problemTypeId');
		break;
	case PRMSConstants.ActionType.REASSIGN:
		obj.title = _MESSAGES.modalDialog.prmsReassignTitle + "";
		break;
	case PRMSConstants.ActionType.TICKETREPORT:
		setDateTimePicker();
		break;
	case PRMSConstants.ActionType.TICKETREPORTGENERATE:
		setDateTimePicker();
		break;

	}
	return obj;
}
function handlePRMSUser(controllerMode, actionType, id, selectedData) {
	var formData = {
		controllerMode : controllerMode,
		actionType : actionType,
		id : id,
		selectedData : selectedData,
		menuId : this.menuId
	};
	var title = getDialogMessage(controllerMode, actionType, id, selectedData);
	doAjaxCall(this.url, 'GET', formData, function(data) {
		handlePRMSEditSuccess(formData, data, title);
	});

}

function handlePRMSEditSuccess(formData, data, title) {
	var buttons = [
			{
				type : "button",
				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true'></span>Save",
				className : "btn-sm btn-default",
				callback : function(e) {
					if (!$("#saveTicketForm").valid())
						return false;
					savingTicketUsersForm();
				}
			},
			{
				type : "cancel",
				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
				className : "btn-sm btn-default",
				callback : null
			} ];
	getModalDialog(
			'large',
			title.title,
			data,
			buttons,
			function() {
				eval(this.url
						+ "(formData.controllerMode,formData.actionType,formData.id,formData.selectedData);");
			});
}
function savingTicketUsersForm() {
	var files;
	$('#image').on('change', prepareLoad);
	function prepareLoad(event) {
		files = event.target.files;
	}
	/*
	 * $("#saveTicketForm") .submit( function(e) {
	 */
	var formContext = $("#saveTicketForm");
	var postData = formContext.serializeArray();
	var formURL = formContext.attr("action");
	var formData = new FormData(formContext[0]);

	var institutionId = document.getElementById('institutes').value;
	$
			.ajax({
				url : formURL,
				type : 'POST',
				data : formData,
				enctype : 'multipart/form-data',
				processData : false,
				contentType : false,
				success : function(data, textStatus, jqXHR) {
					if (data == "Created") {
						showMessage("Created successfully", "success");
						modalDialog.modal('hide');
					} else if (data == "Exist") {
						showMessage("Record already exists, please try again",
								"error");
					} else {
						showMessage("Updated successfully", "success");
						modalDialog.modal('hide');
						if (!data.match('^Error'))
							modalDialog.modal('hide');
					}
					if (!globalDatatable) {

						$("#menuTab_" + this.menuId).trigger("click");
					}

					refreshDatatable();
				}
			});
	return false;

};
function selectIndivisual() {
	$('#labelInd').remove();
	$('#drop')
			.before(
					'<label class="col-md-3 control-label" id="labelInd" for="Select indivisualUsers">Select Individual</label>');
	$('#inorgp').val(2);
	$('#indivisualUsers').html('');
	var instid=$('#institutes').val();
	getCombobox('../a/prms/indivisualUserbyInst/'+instid, 'indivisualUsers');
}

function getindivisulaOrGroup(){
	var instid=$('#institutes').val();
	if(instid)
		{
	if($('#inorgp').val()==2){
		
		getCombobox('../a/prms/indivisualUserbyInst/'+instid, 'indivisualUsers');
	}else{
		getCombobox('../a/prms/userRoles'+instid+'/', 'indivisualUsers');
		}
		}
}
function selectGroup() {
	$('#labelInd').remove();
	$('#drop')
			.before(
					'<label class="col-md-3 control-label" id="labelInd" for="Select indivisualUsers">Select Group</label>');
	$('#inorgp').val(3);
	//getCombobox('../a/prms/userRoles/', 'indivisualUsers');
	getCombobox('../a/prms/userRoles'+$("#institutes").val()+'/', 'indivisualUsers');
	
}

function setSuperVisor(id){
	
	var selectedArray = $('#buildingSuperVisorIdArray').val();
	var x=selectedArray.split(",");

 if(id!=null && id!=0){
	 getCombobox('../a/prms/indivisualUserbyInst/'+id, 'buildingSuperVisor',null,null,function(){
		 for (var i = 0; i < x.length; i++) {
      	   $("#buildingSuperVisor option[value="+x[i]+"]").attr("selected",true);
        }
	 });
 }
 
 $("#institutes").change(function(){
	   $('#buildingSuperVisorIdArray').val('');
	   getCombobox('../a/prms/indivisualUserbyInst/'+$('#institutes').val(), 'buildingSuperVisor');
	   getCombobox('../a/prms/categoryByInst/'+$('#institutes').val(), 'ptCategory');
	   
    });
 
 
 
}

function setSuperVisorBuilding(id){
	
	var selectedArray = $('#buildingSuperVisorIdArray').val();
	var x=selectedArray.split(",");

 if(id!=null && id!=0){
	 getCombobox('../a/prms/indivisualUserbyInst/'+id, 'buildingSuperVisor',null,null,function(){
		 if(selectedArray){
		 for (var i = 0; i < x.length; i++) {
      	   $("#buildingSuperVisor option[value="+x[i]+"]").attr("selected",true);
        }
		 }
	 });
 }
 
 $("#institutes").change(function(){
	 
	   $('#buildingSuperVisorIdArray').val('');
	   getCombobox('../a/prms/indivisualUserbyInst/'+$('#institutes').val(), 'buildingSuperVisor');
	   
    });
 
 
 
}

// ////////////////////related to password////////////////////

function initAcademyCalls() {

	$('[id^=postform]').click(function() {
		var idArray = this.id.split("_");
		var url = idArray[1];
		document.forms[0].action = url;
		document.forms[0].submit();
	});

	$('[id^=postloginform]').click(function() {
		var idArray = this.id.split("#");
		var url = idArray[1];
		document.forms[0].action = url;
		document.forms[0].submit();
	});
	$("[id^=saveForgotPass]").off('click');
	$("[id^=saveForgotPass]").on('click',function(){
		var idArray = this.id.split("_");
		var url = idArray[1];
		if ($('#loginId').val() == '' || $('#loginId').val() == 0) {
			$('#formStatus').text("Please Enter Login Id");
			return false;
		}
		
		if(!checkCookie()){
			return false;
		};
		
		var formData = {
			'loginId' : $('#loginId').val(),
		};
		$.ajax({
			type : 'POST',
			url : url,
			data : formData,
			success : function(data, xhr) {
				var dataArray = data.split("_");
				var status = dataArray[0];
				var statusVal = dataArray[1];
				if(status == "1001") {
					$('#forgotPassModal').modal('hide');
					$('#respModal').modal('show');
					$('#respStatus').text(statusVal);
				} else if (status == "1002") {
					$('#formStatus').addClass('bg-danger-custom');
					$('#formStatus').text(statusVal);
				}
			},
			error : function(data) {
				console.log('Error occured while inserting details');
			}
		});
		return false;
	});	
	
	
	$('[id^=saveValidatePass]').click(function() {
		var idArray = this.id.split("_");
		var url = idArray[1];
		if ($('#email_Id').val() == '' || $('#email_Id').val() == 0) {
			$('#formStatus1').text("Please Enter Email Id");
			return false;
		}
		var formData = {
			'email_Id' : $('#email_Id').val(),
		};
		$.ajax({
			type : 'POST',
			url : url,
			data : formData,
			success : function(data, xhr) {
				var dataArray = data.split("_");
				var status = dataArray[0];
				var statusVal = dataArray[1];
				if (status == "1001") {
					$('#validatePassModal').modal('hide');
					$('#respModal1').modal('show');
					$('#respStatus1').text(statusVal);
				} else if (status == "1002") {
					$('#formStatus1').addClass('bg-danger-custom');
					$('#formStatus1').text(statusVal);					
					if(statusVal=="Verification mail has been sent to your email address"){	
						$("#formStatus1").text("");
						$('#validatePassModal').modal('hide');
						$('#respModal1').modal('show');
						$('#respStatus1').text(statusVal);
						$('.login-msg').css('display','none');
					}					
				}
			},
			error : function(data) {
				console.log('Error occured while inserting details');
			}
		});
		return false;
	});	

}

///checking cookie  start------ by sharana


function setEmptyCookie(cname,cvalue) {
   
	 var d = "";
	    var expires = "expires_"+$('#cookieLoginId').val()+"=" + d;
	    document.cookie =  expires + ";path=/";
}

function setCookie(cname,cvalue) {
    var d = new Date();
    var expires = "expires_"+$('#loginId').val()+"=" + d;
    document.cookie = cname + "=" + cvalue;
    document.cookie =  expires + ";path=/";
}

function getCookie(cname) {
    var name = cname + "=";
    var decodedCookie = decodeURIComponent(document.cookie);
    var ca = decodedCookie.split(';');
    for(var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == ' ') {
            c = c.substring(1);
        }
        if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
        }
    }
    return "";
}

function checkCookie() {
    var user=getCookie("username_"+$('#loginId').val());
    var expTime=getCookie("expires_"+ $('#loginId').val());
       if ((user == "" || user == null) || (expTime=="" || expTime==null)) {
           setCookie("username_"+$('#loginId').val(),  $('#loginId').val());
           return true;
       }else{
    	   
    	   if(checkTimeDiff(user,expTime,new Date())){
       			return true;
	       	}else{
	       		return false;
	       	}
       }
}

function checkTimeDiff(user,rDate,cDate){
	var rDate = new Date(rDate);
	var diff =  cDate.getTime() - rDate.getTime();
	var diffMinutes = diff / (60 * 1000) % 60;
	if( user===$('#loginId').val() && (parseInt(diffMinutes))  >= 5){
		setCookie("username_"+$('#loginId').val(),  $('#loginId').val());
		return true;
	}else{
		$('#formStatus').text("Please try after "+(5 - parseInt(diffMinutes))+" minute.");
		return false;
	}
	
}


// checking cookie  end------ by sharana

function clickEvent(clickId)
{
   $("[id^='list_']").removeClass('active');
   var click = "#list_" + clickId;
   $(click).addClass('active');
}

   $('#passModal').on('shown.bs.modal', function(e, data)
{
   $('#formStatus').text('');
   $('#formStatus').removeClass('bg-danger-custom');
   $('#passForm').bootstrapValidator('resetForm', true);
   $("#passForm")[0].reset();

});

   $('#forgotPassModal').on('shown.bs.modal', function(e, data)
{
   $('#formStatus').text('');
   $('#formStatus').removeClass('bg-danger-custom');
   $('#forgotPassForm').bootstrapValidator('resetForm', true);

});
   
   $('#validatePassModal').on('shown.bs.modal', function(e, data)
		   {
		      $('#formStatus1').text('');
		      $('#formStatus1').removeClass('bg-danger-custom');
		      $('#validatePassForm').bootstrapValidator('resetForm', true);

		   });



function handlePassword()
{
	$('#passModal').modal('show');
	$('#passModal').bootstrapValidator('resetForm', true);
	hadleChangepasswordValidation();
	$("[id^=savePass]").off('click');
	$("[id^=savePass]").on('click',function(){
				var idArray = this.id.split("_");
				var url = idArray[1];
				if ($('#oldPass').val() == '' || $('#newPass').val() == ''
						|| $('#newPass1').val() == '') {
					$('#formStatus').text("Please fill all required fields");
					return false;
				}
				var formData = {
						'oldPass' : $('#oldPass').val(),
						'newPass' : $('#newPass').val(),
						'newPass1' : $('#newPass1').val()
					};
					$.ajax({
						type : 'POST',
						url : url,
						data : formData,
						success : function(data, xhr) {
							var dataArray = data.split("_");
							var status = dataArray[0];
							var statusVal = dataArray[1];
							if (status == "1001") {
								$('#passModal').modal('hide');
								$('#respModal').modal('show');
								$('#passForm')[0].reset();
								$('#respStatus').text(statusVal);
							} else if (status == "1002") {
								$('#formStatus').addClass('bg-danger-custom');
								$('#formStatus').text(statusVal);
							}
						},
						error : function(data) {
							console.log('Error occured while inserting details');
						}
					});
					
				return false;
			});
}



function ClsSectionModalClicked()
{
	$('#knowClsSectionModal').modal('show');
	$('#knowClsSectionModalLoginId').val('');
	$('#knowClsSectionModalLoginError').html('');
	$('#knowClsSectionModalTable').html('');
	setTimeout(function(){
        $("#knowClsSectionModalLoginId").focus(); }, 500);		
}

function faqsModalClicked(){
	$('#faqsSectionModal').modal('show');
	$('#faqsSectionModalTable').html('');
	getFaqsData();
}
function getFaqsData(){
	var formData={
			loginId:""
	};
	doAjaxCall('getFAQsInfo', 'POST', formData, function(data) {
		$('#faqsSectionModalTable').html(data);
		return false;
	});
	
}
function getStudentClassSectionInfo()
{
	var loginId=$('#knowClsSectionModalLoginId').val();
	if(loginId && loginId.length>5)
	{
		$('#knowClsSectionModalLoginError').html('');
		
		var formData = {
				loginId : loginId,
			};
		doAjaxCall('getStudentClassInfo', 'POST', formData, function(data) {
			$('#knowClsSectionModalTable').html(data);
			return false;
		});
	}
	else
	{
		$('#knowClsSectionModalLoginError').html('Please enter valid SRN/Mobile no/Email');
		return false;
	}
	
}

function StudentSurvey(id)
{
	var id = id.split("_");
	var url = id[1];
	$.redirectPost(url,
	/*
	 * { qprid : qprid[2] }
	 */ null);

}

$.extend(
		{
			redirectPost : function(location, args)
			{
				var form = '';
				if(args)
				{
				  $.each(args, function(key, value)
				  {
					value = value.split('"').join('\"')
					form += '<input type="hidden" name="' + key + '" value="' + value + '">';
				  });
				}
				$('<form action="' + location + '" method="POST">' + form + '</form>').appendTo($(document.body)).submit();
			}
		});

function saveSurvey()
{
	var answered=false;
	var loginId=$('#loginId').val();
	var formData = {};
	if(loginId && loginId.length>5)
	{
		$('#loginIdError').html('');
		formData.loginId =loginId;
	}
	else
	{
		$('#loginIdError').html('Please enter valid SRN/Mobile no/Email');
		setTimeout(function(){
		    $("#loginId").focus(); }, 500);
		$('body').scrollTop('#loginId');
		return false;
	}
	var questions=[];
	$('[id^=questionBank]').each(function(){
		answered=false;
		var questionType=$(this).attr('data-questiontype');
		var questionBank={};
		if(questionType)
		{
		switch(getInteger(questionType,0))
		{
		case 1:
			
			questionBank.questionBankId=$(this).attr('data-bankid');
			$('input[name^=ans_'+questionBank.questionBankId+']').each(function(e){
				if(this.type==="radio" && $('#'+this.id).is(':checked'))
				{
					answered=true;
					questionBank.response=$(this).val();
				}
				
			});
			if(!answered)
			{
				showMessage('Please answer all questions.','error');
				answered=false;
				return false;
			}
			
			break;	
		case 11:
			answered=true;
			questionBank.questionBankId=$(this).attr('data-bankid');
			questionBank.response=encodeURIComponent($('textarea[name^=ans_'+questionBank.questionBankId+']').val());
			if(!questionBank.response)
				{
				showMessage('Please answer all questions.','error');
				answered=false;
				return false;
				}
			break;
			
		case 16:
			questionBank.questionBankId=$(this).attr('data-bankid');
			questionBank.response='';
			$('select[name^=ans_'+questionBank.questionBankId+']').each(function(e){
				answered=false;
				var value=$(this).val();
				if(value)
				{
					answered=true;
					questionBank.response = questionBank.response  + this.id	+ "#$%#$%#$$"+ $(this).val()+ "#$%#$%#$%";
				}
				else
				{
					return false; 
				}
				
			});
			if(!answered)
				{
				showMessage('Please answer all questions.','error');
				answered=false;
				return false;
				}
			break;
		}
		questions.push(questionBank);
		}
	});
	formData.questions =JSON.stringify(questions);
	
	if(answered)
		{
	doAjaxCall('saveStudentSurvey', 'POST', formData, function(data) 
		{
		if (data.indexOf("SUCCESS") > -1) 
		{
		showMessage('Thank you for your feedback.','success');
		setTimeout(function(){window.location = $('a#surveyExit').attr('href');},5000);
		return false;
		}
		var dataArray = data.split("_")[1];
		showMessage(dataArray,'error');	
			
	});
		}
}

// //////////////////////////Related to
// Password///////////////////////////////////////


// /////////////////// Institute Management Starts ///////////////////
function instituteApp(controllerMode, actionType, id, selectedId,flag) {
	var res = {};
	if (flag || actionType==5){
		res = getInstDialogWithCombo(controllerMode, actionType, id, selectedId);
	}
	else if (!flag || typeof flag == "undefined")
		res = getInstDialogWithTitle(controllerMode, actionType, id, selectedId);
	
	return res;
}

function getInstDialogWithTitle(controllerMode, actionType, id, selectedId) {
	var res = {};
	switch (controllerMode) {
	case Constants.ControllerMode.Batches:
		if (actionType == Constants.ActionType.ADD
				|| actionType == Constants.ActionType.DELETE) {
			res = getInstAppDialogMessage(actionType, id, selectedId);
			res.callBack=true;
		setDateTimePicker();
		}
		break;
	case Constants.ControllerMode.Classess:
		if (actionType == Constants.ActionType.ADD
				|| actionType == Constants.ActionType.DELETE) {
			res = getInstAppDialogMessage(actionType, id, selectedId);
			res.callBack=true;
		}
		break;
	case Constants.ControllerMode.Section:
			if (actionType == Constants.ActionType.ADD
				|| actionType == Constants.ActionType.DELETE) {
			res = getInstAppDialogMessage(actionType, id,
					selectedId);
			
		}
		break;
	case Constants.ControllerMode.BatchClasses:
		if (actionType == Constants.ActionType.ADD
				|| actionType == Constants.ActionType.DELETE || actionType==9) {
			res = 	getInstAppDialogMessage(actionType, id,selectedId);
			res.callBack=true;
		}else if (actionType == Constants.ActionType.TIME_TABLE){
			res = {title:"Manage Time Table",callBack:true};
		}else if (actionType == Constants.ActionType.ATTENDANCE){
			res = {title:"Manage Attendance",callBack:true};
			
		}else if (actionType == Constants.ActionType.ISA_RESULTS){
			res = {title:"Manage ISA RESULTS",callBack:true};
			
		}else if (actionType == Constants.ActionType.ALLOCATE_SUBJECTS){
			res = {title:"Allocate Subjects",callBack:true};
			
		}else if(actionType == Constants1.ActionType1.MANAGE_LABS){
			res = {title:"Manage LAB Batches",callBack:true};
		}else if(actionType == Constants.ActionType.CLASS_EXCHANGE){
			res = {title:"Manage Class ExChange",callBack:true};
		}else if (actionType == Constants.ActionType.ATTENDANCE1){
			res = {title:"Manage Attendance",callBack:true};
		}else if (actionType == Constants.ActionType.FACULTY_SUBJECTS_ALLOCATION){
			res = {title:"Manage Faculty Subjects Allocation",callBack:true};
		}else if (actionType == 21){
			$('[id^=mngTTsf_]').addClass('disabled');
		}
		break;
	case InstConstants.ControllerMode.Subjects:
		res = getInstAppDialogMessage(actionType, id,
				selectedId);
		res.callBack=true;
		break;
		
	case InstConstants.ControllerMode.UsersManagement:
		if (actionType == Constants.ActionType.SHOWCOMBOBOX) {
				var selected=selectedId.split("~");
			  handleUserManagementPasswordDailauge(controllerMode, actionType, id, selected[0],selected[1],selected[2]);
		}
		else if(actionType == Constants.ActionType.EDITBUTTON){	
			var selected=selectedId.split("~");
			if(selectedId=="undefined" || selectedId == ""){
				res = getInstAppDialogMessage(actionType, id,selectedId[0]);	
			}
			else{			
				res = getInstAppDialogMessage(actionType, id,selected[0]);
			}						
		}
		else{
			if(selectedId=="undefined" || selectedId == ""){
				res = getInstAppDialogMessage(actionType, id,selectedId);	
			}
			else{
				var selected=selectedId.split("~");
				res = getInstAppDialogMessage(actionType, id,selected[0]);
			}
			
		}
		res.callBack=true;
		break;
		
	case InstConstants.ControllerMode.Institution:
		if (actionType == Constants.ActionType.ADD
				|| actionType == Constants.ActionType.DELETE || actionType==9) {
		res = getInstAppDialogMessage(actionType, id,
				selectedId);
		res.callBack=true;
		}
		break;
	case InstConstants.ControllerMode.CalendarOfEvents:
		if (actionType == Constants.ActionType.ADD
				|| actionType == Constants.ActionType.DELETE ) {
		res = getInstAppDialogMessage(actionType, id,
				selectedId);
		res.callBack=true;
		}else if(actionType){
			res.callBack=true;
			res.title=selectedId;
		}
		break;
	case InstConstants.ControllerMode.CalendarEvent:
		if (actionType == Constants.ActionType.ADD
				|| actionType == Constants.ActionType.DELETE || actionType==9) {
		res = getInstAppDialogMessage(actionType, id,
				selectedId);
		res.callBack=true;
		}
		break;
	case InstConstants.ControllerMode.EventCalendar:
		if (actionType == Constants.ActionType.ADD
				|| actionType == Constants.ActionType.DELETE || actionType==9) {
		res = getInstAppDialogMessage(actionType, id,
				selectedId);
		res.callBack=true;
		}
		break;
	case InstConstants.ControllerMode.ESA_Results:
		switch(actionType){
		case Constants.ActionType.ADD:
			res = getInstAppDialogMessage(actionType, id,selectedId);
			res.callBack=true;
			break;
		case Constants.ActionType.MANAGE_ESA_STUDENTS:
			res = {title:"MANAGE ESA Student Subjects: "+selectedId.split(":")[1],callBack:true};
			break;
		case Constants.ActionType.APP_OPEN_LINE:
			res = {title:"ESA Results Open Line: "+selectedId.split(":")[1],callBack:true};
			break;
		case Constants.ActionType.ESA_HALL_TICKET_OPEN_LINE:
			res = {title:"Hall Ticket Open Line: "+selectedId.split(":")[1],callBack:true};
			break;
		case Constants.ActionType.ESA_MARKS:
			res = {title:"MANAGE ESA Student Marks: "+selectedId.split(":")[1],callBack:true};
			break;
		case Constants.ActionType.ESA_MARKS_RESULTS_VIEW:
			res = {title:"ESA Results View: "+selectedId.split(":")[1],callBack:true};
			break;
		case Constants.ActionType.GENERATE_RESULTS:
			res = {title:"Compute Results : "+selectedId.split(":")[1],callBack:true};
			break;
			
		case Constants.ActionType.NSAR_STUDENTS:
			res = {title:"NSAR Students : "+selectedId.split(":")[1],callBack:true};
			break;

		case Constants.ActionType.ISA_RESULTS_VIEW:
			res = {title:"View Isa Results : "+selectedId.split(":")[1],callBack:true};
			break;
		}
		
		break;
	case InstConstants.ControllerMode.SummerCourse:
		switch(actionType){
		case Constants.ActionType.ADD:
			res = getInstAppDialogMessage(actionType, id,selectedId);
			res.callBack=true;
			break;
			
		case Constants.ActionType.APP_OPEN_LINE:
			res = {title:"Exam Open Line: "+selectedId,callBack:true};
			break;
			
		case Constants.ActionType.SUMMER_COURSE_HALL_TICKET_OPEN_LINE:
			res = {title:"Hall Ticket Open Line: "+selectedId,callBack:true};
			break;
		}
		break;
		
	case InstConstants.ControllerMode.FacultyDepartment:
		if((actionType == Constants.ActionType.ISA_RESULTS)){
			res = {title:"Manage Marks: "+selectedId.split("&&")[2]+" - "+selectedId.split("&&")[3]+" - "+selectedId.split("&&")[4],callBack:true};
		}else if(actionType == Constants.ActionType.ATTENDANCE1){
			res = {title:"Manage Attendance: "+selectedId.split("&&")[2]+" - "+selectedId.split("&&")[3]+" - "+selectedId.split("&&")[4],callBack:true};
		}else if(actionType == Constants.ActionType.ISA_PATTERN1 && this.isaPatFlag1){
			alert();
		} else if(actionType == Constants.ActionType.FACULTY_MAIL_SEND) {
			res = {title:"Title : " + selectedId, callBack:true};
		}
		break;
		
	case Constants.ControllerMode.Announcements:
		if (actionType == Constants.ActionType.ADD
				|| actionType == Constants.ActionType.DELETE) {
			
		res = getInstAppDialogMessage(actionType, id,
				selectedId);
	
		res.callBack=true;
		}
		if (actionType == Constants.ActionType.EDIT_VIEW ) {
		res = {title:"View Template"};
// res.callBack=true;
		}
		
		break;
	case InstConstants.ControllerMode.Attendance_OverRide:
		switch(actionType){
		case Constants.ActionType.GET_NSSR_NSAR_STUDENT_OVERRIDE:
			res = {title:"OverRide: "+selectedId,callBack:true};
			break;
		}
		break;
	case InstConstants.ControllerMode.ProgressReport:
		switch(actionType){
		case Constants.ActionType.ADD:
			res = getInstAppDialogMessage(actionType, id,selectedId);
			res.callBack=true;
			break;
		case Constants.ActionType.EDIT:
			res = getInstAppDialogMessage(actionType, id,selectedId);
			res.callBack=true;
			break;
		case Constants.ActionType.DELETE:
			res = getInstAppDialogMessage(actionType, id,selectedId);
			res.callBack=true;
			break;
		}
		break;
		
	case InstConstants.ControllerMode.TimeTableTemplate:
		switch(actionType){
		case Constants.ActionType.ADD:
			res = getInstAppDialogMessage(actionType, id,selectedId);
			res.callBack=true;
			break;
		case Constants.ActionType.EDIT:
			res = getInstAppDialogMessage(actionType, id,selectedId);
			res.callBack=true;
			break;
		case Constants.ActionType.DELETE:
			res = getInstAppDialogMessage(actionType, id,selectedId);
			res.callBack=true;
			break;
		}
		break;
		
	case InstConstants.ControllerMode.StudentAttendanceList:
		if(actionType == Constants.ActionType.STUDENT_ATTENDANCE_LIST){
			res = {title:"Manage Student Attendance: "+selectedId.split("&&")[2]+" - "+selectedId.split("&&")[3]+" - "+selectedId.split("&&")[4],callBack:true};
		}
		break;	
	case InstConstants.ControllerMode.MANAGE_BUILDING:
		if (actionType == Constants.ActionType.ADD
				|| actionType == Constants.ActionType.DELETE) {
			res = getInstAppDialogMessage(actionType, id, selectedId);
			res.callBack=true;
				}
		break;

	case Constants.ControllerMode.ManageRooms:
		if (actionType == Constants.ActionType.ADD
				|| actionType == Constants.ActionType.DELETE) {
			res = getInstAppDialogMessage(actionType, id, selectedId);
			res.callBack=true;
		}
		break;

		
	case InstConstants.ControllerMode.AssignmentType:
		if (actionType == Constants.ActionType.ADD
				|| actionType == Constants.ActionType.DELETE ) {
		res = getInstAppDialogMessage(actionType, id,
				selectedId);
		res.callBack=true;
		}
		break;
	case UtilsConstants.ControllerMode.Transcript:
		if (actionType == 103) {
			res = {title:"Transcript : "+selectedId,callBack:true};
		}
		break;
		
	case InstConstants.ControllerMode.PlacementCompanyController:
		if (actionType == Constants.ActionType.ADD
				|| actionType == Constants.ActionType.DELETE) {
			res = getInstAppDialogMessage(actionType, id, selectedId);
			res.callBack=true;
		setDateTimePicker();
		}
		break;
	case InstConstants.ControllerMode.PLACEMENTCYCLE:
		if (actionType == Constants.ActionType.ADD
				|| actionType == Constants.ActionType.DELETE ) {
		res = getInstAppDialogMessage(actionType, id,
				selectedId);
		res.callBack=true;
		}
		break;
	default:
		break;
	}
	return res;
}

function getInstDialogWithCombo(controllerMode, actionType, id, selectedId) {
	var obj = {};

	switch (controllerMode) {
	case Constants.ControllerMode.Batches:
		instAppCheckComboBox(controllerMode, actionType, id, selectedId);
		setDateTimePicker();
		break;
	case Constants.ControllerMode.Classess:
		instAppCheckComboBox(controllerMode, actionType, id, selectedId);
		break;
	case Constants.ControllerMode.Announcements:
		
		instAppCheckComboBox(controllerMode, actionType, id, selectedId);
		
		break;
	case Constants.ControllerMode.Section:
		instAppCheckComboBox(controllerMode, actionType, id, selectedId);
		break;
	case Constants.ControllerMode.BatchClasses:
		instAppCheckComboBox(controllerMode, actionType, id, selectedId);
		break;
    case InstConstants.ControllerMode.Subjects:
	instAppCheckComboBox(controllerMode, actionType, id, selectedId);
		break;
    case InstConstants.ControllerMode.Institution:
    	instAppCheckComboBox(controllerMode, actionType, id, selectedId);
    	break;
    case InstConstants.ControllerMode.UsersManagement:
    	instAppCheckComboBox(controllerMode, actionType, id, selectedData);
    		break;
    case InstConstants.ControllerMode.CalendarOfEvents:
    	instAppCheckComboBox(controllerMode, actionType, id, selectedData);
		break;
    case InstConstants.ControllerMode.CalendarEvent:
    	instAppCheckComboBox(controllerMode, actionType, id, selectedData);
		break;
    case InstConstants.ControllerMode.EventCalendar:
    	instAppCheckComboBox(controllerMode, actionType, id, selectedData);
		break;
    case InstConstants.ControllerMode.ESA_Results:
    	instAppCheckComboBox(controllerMode, actionType, id, selectedId);
    	break;
    case InstConstants.ControllerMode.SummerCourse:
    	instAppCheckComboBox(controllerMode, actionType, id, selectedId);
    	break;
	case InstConstants.ControllerMode.FacultySubjects:
		instAppCheckComboBox(controllerMode, actionType, id, selectedId);
		break;
	case InstConstants.ControllerMode.Assignments:
    	instAppCheckComboBox(controllerMode, actionType, id, selectedId);
    	break;
	case InstConstants.ControllerMode.FacultyDepartment:
    	instAppCheckComboBox(controllerMode, actionType, id, selectedId);
		break;
	case InstConstants.ControllerMode.Attendance:
		instAppCheckComboBox(controllerMode, actionType, id, selectedId);
		break;
	 case InstConstants.ControllerMode.TimeTableTemplate:
	    instAppCheckComboBox(controllerMode, actionType, id, selectedId);
	    break;
	    
	 case InstConstants.ControllerMode.ProgressReport:
		    instAppCheckComboBox(controllerMode, actionType, id, selectedId);
		    break;
	 case Constants.ControllerMode.ManageRooms:
		 instAppCheckComboBox(controllerMode, actionType, id, selectedId);
		    break;
	 case InstConstants.ControllerMode.PLACEMENTCYCLE:
		 instAppCheckComboBox(controllerMode, actionType, id, selectedId);
		    break;
	}	
	return obj;
}
function getInstAppDialogMessage(actionType, id, selectedData) {
	var msg=selectedData?selectedData.split(":"):"";
	var obj = {};
	switch (actionType) {
	case 7:
	case 11:
	case Constants.ActionType.ADD:
		if (id != 0) {
			obj.title = _MESSAGES.modalDialog.editTitle + " " + (msg[0]?msg[0]:"")+(msg[1]?": "+msg[1]:"");
			break;
		} else if (id == 0) {
			obj.title = _MESSAGES.modalDialog.addTitle + " "+(selectedData?msg[0]:"");
			break;
		}
		break;
	case Constants.ActionType.DELETE:
		obj.title = _MESSAGES.modalConfirm.deleteTitle+ " "+(selectedData?msg[0]:"");
		obj.message = _MESSAGES.modalConfirm.deleteBody.replace(/#0/g,(msg[1]?msg[1]:msg[0]));
		break;
	case Constants.ActionType.VIEW:
		obj.title = _MESSAGES.modalDialog.addTitle + " ";
		break;
	}
	return obj;
}
function instAppCheckComboBox(controllerMode, actionType, id, selectedData) {

	switch (controllerMode) {
	case Constants.ControllerMode.Batches:
		switch (actionType) {

		case Constants.ActionType.ADD:
			getCombobox('/Academy/a/i/getInstitutes', 'institutes');
		
			break;
		case Constants.ActionType.DELETE:

			break;
		case Constants.ActionType.VIEW:
			updateCurrentDataTable();
			break;
		default:
			break;
		}
	case Constants.ControllerMode.Announcements:
		switch (actionType) {

		case Constants.ActionType.ADD:
			
			
		/*	var instId=$('#instID').val();
			var pId=parseInt($("#announcementId").val());
			getCombobox('/Academy/a/i/getInstitutes', 'instID',null,null,function(){
				$('#instID option:first-child').attr("selected", "selected");
				if($('#instID').val()!= null){
				getCombobox('/Academy/a/i/getDepartmentBasedOnInstitutes/'+$('#instID').val(), 'annDepts',null,null,function(){
					getCombobox('/Academy/a/i/programByInstId/'+$('#instID').val(), 'program',null,null,function(){
			
						if($('#instID > option').length!=1)
						$("#instID").prepend('<option value=-1>select Institute</option>');	
						
						if(parseInt($("#instID").attr('data-selected'))==0)
						$('#instID option:first-child').attr("selected", "selected");
		
						if($('#program > option').length!=1)
						$("#program").prepend('<option value=-1>select program</option>');
							
						if(parseInt($("#program").attr('data-selected'))==0)
						$('#program option:first-child').attr("selected", "selected");
							
						if($('#annDepts > option').length!=1)
						$("#annDepts").prepend('<option value=-1>select department</option>');

		
						if(parseInt($("#annDepts").attr('data-selected'))==0)
						$('#annDepts option:first-child').attr("selected", "selected");
							
						})
				});
			}
			});
			
			getCombobox('/Academy/a/i/configValue/1/'+Constants.ControllerMode.Announcements, 'announcementFor',null,null,function(){
				
				if($('#announcementFor > option').length!=1)
					$("#announcementFor").prepend('<option value=-1>select announcementFor</option>');	
				if(parseInt($("#announcementFor").attr('data-selected'))==0)
				$('#announcementFor option:first-child').attr("selected", "selected");
					
				
				
				
			});*/
			
			break;
		case Constants.ActionType.DELETE:

			break;
		case Constants.ActionType.VIEW:
			break;
		default:
			break;
		}
		break;
	case Constants.ControllerMode.Classess:
		switch (actionType) {

		case Constants.ActionType.ADD:
			getCombobox('/Academy/a/i/getInstitutes', 'institutes');
			break;
		case Constants.ActionType.DELETE:

			break;
		case Constants.ActionType.VIEW:
			break;
		default:
			break;
		}
		
		
	case Constants.ControllerMode.BatchClasses:
		switch (actionType) {
		case Constants.ActionType.ADD:
			if(id==0){
				getCombobox('/Academy/a/i/getRestrictedInstitutesByGroup', 'instId',null,null,function(){
					$("#instId option:first").attr('selected','selected');
					getCombobox('/Academy/a/i/getDepartmentBasedOnInstitutes/'+$("#instId").val(), 'depts1');
					getCombobox('/Academy/a/i/getBatchBasedOnInstitutes/'+$("#instId").val(), 'batches1',null,null,function(){
						getCombobox('/Academy/a/i/programByInstId/'+$("#instId").val(), 'program',null,null,function(){
							getCombobox('/Academy/a/i/classessbyinst/'+$("#instId").val(), 'classes1',null,null,function(){});
						});
					});
				});
/*
						getCombobox('/Academy/a/i/batches', 'batches1',null,null,function(){
							$("#batches1 option:first").attr('selected','selected');
							getCombobox('/Academy/a/i/programForBatchClass', 'program',null,null,function(){
								getCombobox('/Academy/a/i/classes', 'classes1',null,null,function(){
									// getSubjects();
								});
							});
						});*/
						getCombobox('/Academy/a/i/cycle', 'cycle',null,null,function(){
							$("#cycle option:last").attr('selected','selected');
						});
			}else{
				getCombobox('/Academy/a/i/getRestrictedInstitutesByGroup', 'instId',null,null,function(){
					getCombobox('/Academy/a/i/getDepartmentBasedOnInstitutes/'+$("#instId").val(), 'depts1');
					getCombobox('/Academy/a/i/getBatchBasedOnInstitutes/'+$("#instId").val(), 'batches1',null,null,function(){
						getCombobox('/Academy/a/i/programByInstId/'+$("#instId").val(), 'program',null,null,function(){
							getCombobox('/Academy/a/i/classessbyinst/'+$("#instId").val(), 'classes1',null,null,function(){
								getSubjects();
							});
						});
					});
				});
				/*getCombobox('/Academy/a/i/batches', 'batches1',null,null,function(){
					getCombobox('/Academy/a/i/programForBatchClass', 'program',null,null,function(){
						getCombobox('/Academy/a/i/classes', 'classes1',null,null,function(){
							getSubjects();
						});
					});
				});*/
				getCombobox('/Academy/a/i/cycle', 'cycle');
			}
		
			getCombobox('/Academy/a/i/section', 'section');
			getCombobox('/Academy/a/i/getisamarktemplate', 'isa');
			break;
			
		case Constants.ActionType.DELETE:
			break;
		
//		No Required.
		case Constants.ActionType.VIEW:
//			getCombobox('/Academy/a/i/depts', 'depts');
//			getCombobox('/Academy/a/i/batches', 'batches');
			break;
			
		default:
			break;
		}
		
		if((actionType == Constants.ActionType.ISA_RESULTS)){
			getStudentSubjectCombo();
		}
		if((actionType == Constants.ActionType.ALLOCATE_SUBJECTS)){
			getAllocateSubjectCombo();
		}
		if((actionType == Constants.ActionType.ATTENDANCE)){
			getStudentSubjectCombo();
		}
		if((actionType == Constants.ActionType.ATTENDANCE1)){
			getStudentSubjectCombo();
		}
		// test
		if(actionType == Constants1.ActionType1.MANAGE_LABS){
			
			getCombobox('/Academy/a/i/batchClassSubjects2/'+id, 'subjects',null,null,function(){
				getCombobox('/Academy/a/i/batchClassSections/'+id, 'section',null,null,function(){
					displayListOfSectionBasedonBatchclassId();
					getstudentcountbysection();
				})
			
			});
		}
		
		break;
	case InstConstants.ControllerMode.Subjects:
		switch (actionType) {

		case Constants.ActionType.ADD:
			
			
			getCombobox("/Academy/a/i/getRestrictedInstitutesByGroup", "institutionId1",null,null,function(){
				if($("#institutionId1").val())
					{
					getCombobox("/Academy/a/i/getDeptBasedOnInstId/"+$('#institutionId1').val(), "multiDept");
					getCombobox("/Academy/a/i/batchesByInstIdOrParent/"+$('#institutionId1').val(), "batchId");
					getCombobox('/Academy/a/i/branchFullByInstIdOrParent/'+$('#institutionId1').val(), 'multiBranch');
					getCombobox("/Academy/a/i/getCourseType", "subjectTypeId",null,null,function(){
						getElectiveSubject();					
					});					
					}
				});
			$("#institutionId1").change(function(){
			    
				getCombobox("/Academy/a/i/getDeptBasedOnInstId/"+$('#institutionId1').val(), "multiDept");
				getCombobox("/Academy/a/i/batchesByInstIdOrParent/"+$('#institutionId1').val(), "batchId");
				getCombobox("/Academy/a/i/getCourseType", "subjectTypeId",null,null,function(){
				getElectiveSubject();					
				});
				//getCombobox('/Academy/a/i/branchFull', 'multiBranch'); 
				getCombobox('/Academy/a/i/branchFullByInstIdOrParent/'+$('#institutionId1').val(), 'multiBranch'); 
				
			});	
			
			break;
		case Constants.ActionType.VIEW:
			var that=this;		
	
			/*getCombobox("/Academy/a/i/getCourseType", "searchCourseTypeId");
			getCombobox("/Academy/a/i/getdept", "searchOfferedById");
			getCombobox("/Academy/a/i/programForBatchClass", "searchOfferedToId");
			getCombobox("/Academy/a/i/batches", "searchBatchId");

			subjectsSearch();*/
			
			getCombobox("/Academy/a/i/getRestrictedInstitutesByGroup", "institutionId",null,null,function(){
				//$("#institutionId").val($("#institutionId option:first").val());
				if($("#institutionId").val())
					{		
					
					getCombobox("/Academy/a/i/getDeptBasedOnInstId/"+$('#institutionId').val(), "multiDept");
					getCombobox("/Academy/a/i/batchesByInstIdOrParent/"+$('#institutionId').val(), "batchId");
					getCombobox('/Academy/a/i/branchFullByInstIdOrParent/'+$('#institutionId').val(), 'multiBranch');
					getCombobox("/Academy/a/i/getCourseType", "searchCourseTypeId",null,null,function(){
						subjectsSearch();	
					});
									
					}
				});
				
			break;
		default:
			break;
		}
		break;
			
			
	case InstConstants.ControllerMode.UsersManagement:
		switch (actionType) {
		case Constants.ActionType.ADD:
			/*getCombobox('/Academy/a/i/deptsByDefaultInst', 'facultygetDeptId',null,null,function(){
				var selectedValues = []; 

				     $("#facultygetDeptId :selected").each(function(){
				     	if (selectedValues.indexOf($(this).val()) < 0) {
				     		selectedValues.push($(this).val());
				 		} 
				     });
				          	   if(selectedValues.length>0){   
				          		   
				          			$('#facultygetDeptPrimaryId option:selected').each(function (index, option) { 
						                 $(option).remove(); 
						             });    
				          			
				 				getCombobox('/Academy/a/i/getPrimaryfacultyByActualselectedDept/'+selectedValues, 'facultygetDeptPrimaryId',null,null,function(){
				 	      			var selectedArray = $('#facultygetDeptPrimaryId').attr("data-selected");
					 	      		if(selectedArray.length>0){
				 						var x=selectedArray.split(",");
				 		            	   for(var i = 0; i < x.length; i++) {
				 		                	   $("#facultygetDeptPrimaryId option[value="+x[i]+"]").attr("selected",true);
				 			              }					 		            	   
				 					}
				 	   								
				 				});
				 			}    
				          	   
			});*/
			
			//getCombobox('/Academy/a/i/programbydefaultinst', 'programId',null,null,function(){});
			//getCombobox('/Academy/a/i/getWorkflowbydefaultInst', 'workflowId');			
			//getCombobox('/Academy/a/i/deptsByDefaultInst', 'deptId');
			//getCombobox('/Academy/a/i/getInstitutes', 'institutionId');	
			//getCombobox('/Academy/a/i/userRolesbydefaultinst', 'userRole');
			
			if($("#institutionId").val())
				{
				 getCombobox('/Academy/a/i/userRolesbyinst/'+$("#institutionId").val(),'userRole');
			     getCombobox('/Academy/a/i/programByInstId/'+$("#institutionId").val(),'programId');
			     getCombobox('/Academy/a/i/getWorkflowbyInst/'+$("#institutionId").val(),'workflowId');
			     getCombobox('/Academy/a/i/getDeptBasedOnInstId/'+$("#institutionId").val(), 'facultygetDeptId',null,null,function(){
						var selectedValues = []; 

						     $("#facultygetDeptId :selected").each(function(){
						     	if (selectedValues.indexOf($(this).val()) < 0) {
						     		selectedValues.push($(this).val());
						 		} 
						     });
						          	   if(selectedValues.length>0){   
						          		   
						          			$('#facultygetDeptPrimaryId option:selected').each(function (index, option) { 
								                 $(option).remove(); 
								             });    
						          			
						 				getCombobox('/Academy/a/i/getPrimaryfacultyByActualselectedDept/'+selectedValues, 'facultygetDeptPrimaryId',null,null,function(){
						 	      			var selectedArray = $('#facultygetDeptPrimaryId').attr("data-selected");
							 	      		if(selectedArray.length>0){
						 						var x=selectedArray.split(",");
						 		            	   for(var i = 0; i < x.length; i++) {
						 		                	   $("#facultygetDeptPrimaryId option[value="+x[i]+"]").attr("selected",true);
						 			              }					 		            	   
						 					}
						 	   								
						 				});
						 			}    
						          	   
					});
					}
			getCombobox('/Academy/a/i/getuserTypeId', 'getuserTypeId');
			break;
		case Constants.ActionType.VIEW:			
			if (id != 0) {
				getUserManagementDetailsBySearch(controllerMode, actionType, id,
						selectedData);
			}
			else{
				//getCombobox('/Academy/a/i/deptsByDefaultInst', 'deptId');
				getCombobox('/Academy/a/i/getInstitutes', 'getInstId');	
				//getCombobox('/Academy/a/i/userRolesbydefaultinst', 'userTypeId');
				// getCombobox('/Academy/a/i/getuserTypeId', 'getuserTypeId');
			}
			break;
				
		default:
			break;
		}
		break;	
		
		
	case InstConstants.ControllerMode.Institution:
		switch (actionType) {

		case Constants.ActionType.ADD:
		
			getCombobox('/Academy/a/i/country', 'country');
			getCombobox('/Academy/a/i/states', 'states');
			getCombobox('/Academy/a/i/city', 'city');
			getCombobox('/Academy/a/i/zipcode', 'zipcode');
			break;
		case Constants.ActionType.DELETE:

			break;
		case Constants.ActionType.VIEW:
			
			break;
		default:
			break;
		}
		
			break;
	
	 
	case InstConstants.ControllerMode.CalendarOfEvents:
		 
		switch (actionType) {
		
		case Constants.ActionType.ADD:
			 
			setDateTimePicker();
			getCombobox('/Academy/a/i/getRestrictedInstitutesByGroup', 'institutionId');
			
//			On Change Of Inst Function Written In Its Respective Page Only.
			
//			getCombobox('/Academy/a/i/getInstitutes', 'institutionId');
//			getCombobox("/Academy/a/i/batches", 'batchforcal');
//			getCombobox("/Academy/a/i/classes", 'classforcal');
//			getCombobox("/Academy/a/i/programForBatchClass", 'program');
			break;
				
			
		case Constants.ActionType.DELETE:
			break;
			
		case Constants.ActionType.VIEW:
			break;
			
		case 27:
			setDateTimePicker();
//			getCombobox('/Academy/a/i/event', 'calendarEventId', null, null, function() {
//				genericComboBoxFilterByText($('#calendarEventId'), 'calendarEventId', 'form-control');
//			});
			getCombobox('/Academy/a/i/event/' + $('#instId').val(), 'calendarEventId', null, null, function() {
				genericComboBoxFilterByText($('#calendarEventId'), 'calendarEventId', 'form-control');
			});
			getCombobox("/Academy/a/i/eventType", 'type');
			break;
			
		default:
			break;
		}
			
				break;
	 case InstConstants.ControllerMode.CalendarEvent:
		 switch (actionType) {

			case Constants.ActionType.ADD:
				getCombobox('/Academy/a/i/getInstitutes', 'institutionId');	
				getCombobox("/Academy/a/i/eventType", 'type');
				
				break;
			case Constants.ActionType.DELETE:
	
				break;
			case Constants.ActionType.VIEW:
				
				break;
			default:
				break;
			}
		 break;
	 case InstConstants.ControllerMode.EventCalendar:
		 switch (actionType) {

			case Constants.ActionType.ADD:
				setDateTimePicker();
				getCombobox('/Academy/a/i/event', 'calendarEventId');	
				getCombobox("/Academy/a/i/eventType", 'type');
				
				break;
			case Constants.ActionType.DELETE:
	
				break;
			case Constants.ActionType.VIEW:
				
				break;
			default:
				break;
			}
		 break;
	 case InstConstants.ControllerMode.ESA_Results:
			switch (actionType) {

			case Constants.ActionType.ADD:
				getCombobox('/Academy/a/i/programForBatchClass', 'programId');
				getCombobox('/Academy/a/i/getInstitutesAdmin', 'instId')
				break;
			case Constants.ActionType.MANAGE_ESA_STUDENTS:
			case Constants.ActionType.ESA_MARKS:
				var esaId=$("#esaId").val();
				if(!esaId)
					return;
				getCombobox('/Academy/a/i/getInstituteBasedOnESAId/'+esaId, 'esaInstId',null,null,function(){
					if(!$("#esaInstId").attr("data-selected"))
					$('#esaInstId option:first-child').attr("selected", "selected");					
				getCombobox('/Academy/a/i/esaProgramRestriction/'+esaId, 'esaProgId',null,null,function(){
					if(!$("#esaProgId").attr("data-selected"))
					$('#esaProgId option:first-child').attr("selected", "selected");
				getCombobox('/Academy/a/i/getRestrictedDepartmentBasedOnInstitutes/'+$("#esaInstId").val(), 'esaDeptId',null,null,function(){
				//getCombobox('/Academy/a/i/departments', 'esaDeptId',null,null,function(){
					if(!$("#esaDeptId").attr("data-selected"))
					$('#esaDeptId option:first-child').attr("selected", "selected");
					getCombobox('/Academy/a/i/getBranchOfProgramByInst/'+$("#esaProgId").val(), 'esaBranchId',null,null,function(){
						if(!$("#esaBranchId").attr("data-selected"))
						$('#esaBranchId option:first-child').attr("selected", "selected");
						getCombobox('/Academy/a/i/getRestrictedclasses', 'esaSemesterId',null,null,function(){
							if(!$("#esaSemesterId").attr("data-selected"))
							$('#esaSemesterId option:first-child').attr("selected", "selected");
							getCombobox('/Academy/a/i/cycle', 'esaCycleId',null,null,function(){
								if(!$("#esaCycleId").attr("data-selected"))
								$('#esaCycleId option:first-child').attr("selected", "selected");
								// getCombobox('/Academy/a/i/esaSubject/'+$("#esaId").val()+"/"+$("#esaProgId").val()+"/"+$("#esaDeptId").val()+"/"+$("#esaBranchId").val()+"/"+$("#esaSemesterId").val()+"/"+$("#esaCycleId").val(),
								// 'esaSubjectId');
								getCombobox('/Academy/a/i/esaSubject/'+$("#esaId").val()+"/"+$("#esaProgId").val()+"/"+$("#esaSemesterId").val()+"/"+$("#esaCycleId").val(), 'esaSubjectId');
								getEsaSectionWise();

							});
						});
					});
				});
				});
				});
		
				
				
				

				break;
			case Constants.ActionType.ISA_RESULTS_VIEW:
				var esaId=$("#esaId").val();
				if(!esaId)
					return;
				getCombobox("/Academy/a/i/batches", 'esaBatchId');
				getCombobox('/Academy/a/i/esaProgram/'+esaId, 'esaProgId',null,null,function(){
					if(!$("#esaProgId").attr("data-selected"))
					$('#esaProgId option:first-child').attr("selected", "selected");
				getCombobox('/Academy/a/i/departments', 'esaDeptId',null,null,function(){
					if(!$("#esaDeptId").attr("data-selected"))
					$('#esaDeptId option:first-child').attr("selected", "selected");
					getCombobox('/Academy/a/i/branchFullSelect', 'esaBranchId',null,null,function(){
						if(!$("#esaBranchId").attr("data-selected"))
						$('#esaBranchId option:first-child').attr("selected", "selected");
						getCombobox('/Academy/a/i/classes', 'esaSemesterId',null,null,function(){
							if(!$("#esaSemesterId").attr("data-selected"))
							$('#esaSemesterId option:first-child').attr("selected", "selected");
							getCombobox('/Academy/a/i/cycle', 'esaCycleId',null,null,function(){
								if(!$("#esaCycleId").attr("data-selected")){
								$('#esaCycleId option:first-child').attr("selected", "selected");
								}
							});
						});
					});
				});
				});
				break;
			case Constants.ActionType.ESA_MARKS_RESULTS_VIEW:
				var esaId=$("#esaId").val();
				if(!esaId)
					return;
				getCombobox('/Academy/a/i/esaProgram/'+esaId, 'esaProgId');
				getCombobox('/Academy/a/i/branchFullSelect', 'esaBranchId');
				getCombobox('/Academy/a/i/deptsAdmin', 'esaDeptId');
				getCombobox('/Academy/a/i/classes', 'esaSemesterId');
				getCombobox('/Academy/a/i/cycle', 'esaCycleId');
				break;
			case Constants.ActionType.GENERATE_RESULTS:	
				var esaId=$("#esaId").val();
				getCombobox('/Academy/a/i/esaProgram/'+esaId, 'esaProgId');
				getCombobox('/Academy/a/i/branchFullSelect', 'esaBranchId');
				getCombobox('/Academy/a/i/deptsAdmin', 'esaDeptId');
				getCombobox('/Academy/a/i/classes', 'esaSemesterId');
				getCombobox('/Academy/a/i/cycle', 'esaCycleId');
				break;
			case Constants.ActionType.APP_OPEN_LINE:
			case Constants.ActionType.HALL_TICKET_OPEN_LINE:
				break;
				
			case Constants.ActionType.NSAR_STUDENTS:
				var esaId=$("#esaId").val();
				if(!esaId)
					return;
				getCombobox("/Academy/a/i/getRestrictedInstitutesByGroup", "institutionId",null,null,function(){
					if($("#institutionId").val())
					{
						getCombobox("/Academy/a/i/batchesByInstIdOrParent/"+$('#institutionId').val(), "batchId",null,null,function(){
							getCombobox('/Academy/a/i/esaProgramNSAR/'+esaId+'/'+$("#institutionId").val(), "programId",null,null,function(){
								/*getCombobox("/Academy/a/i/depts", "deptId",null,null,function(){*/
									getCombobox('/Academy/a/i/getDeptBasedOnInstId/'+$("#institutionId").val(), 'deptId',null,null,function(){
										getAllNSARBatchClassFn(1);
										
								});
							});
						});
					}
				});
				break;
			default:
				break;
			}
			break;
			 case InstConstants.ControllerMode.SummerCourse:
				 switch (actionType) {
	
					case Constants.ActionType.ADD:
						
						
						getCombobox("/Academy/a/i/getRestrictedInstitutesByGroup", "institutionId1",null,null,function(){
							if($("#institutionId1").val())
								{
									getCombobox('/Academy/a/i/programByInstIdOrParent/'+$('#institutionId1').val(), 'programId');
									getCombobox('/Academy/a/i/batchesByInstIdOrParent/'+$('#institutionId1').val(), 'batchId');
								}
							});
						
						//getCombobox('/Academy/a/i/getRestrictedInstitutesByGroup', 'institutionId1');						
						/*getCombobox('/Academy/a/i/batches', 'batchId');
						getCombobox('/Academy/a/i/programForBatchClass', 'programId');*/
						
						$("#institutionId1").change(function(){
						    getCombobox('/Academy/a/i/programByInstIdOrParent/'+$('#institutionId1').val(), 'programId');
						    getCombobox('/Academy/a/i/batchesByInstIdOrParent/'+$('#institutionId1').val(), 'batchId');
						    
						});
						
						break;
					case Constants.ActionType.DELETE:
			
						break;
					case Constants.ActionType.VIEW:
						
						break;
					default:
						break;
					}
				 
				 break;
				 
			 case InstConstants.ControllerMode.TimeTableTemplate:
				 switch (actionType) {

					case Constants.ActionType.ADD:
						getCombobox('/Academy/a/g/getInstitutes', 'instId');
						getCombobox('/Academy/a/i/branch', 'branchId');
						getCombobox('/Academy/a/i/programForBatchClass', 'programId');
						
						break;
					case Constants.ActionType.DELETE:
			
						break;
					case Constants.ActionType.VIEW:
						
						break;
					default:
						break;
					}
				 
				 break;
				 
			 case Constants.ControllerMode.ISA_MARKS_TEMPLATE:
				 switch (actionType) {

					case Constants.ActionType.ADD:
						getCombobox('/Academy/a/g/getInstitutes', 'institutionId');
						
						break;
					case Constants.ActionType.DELETE:
			
						break;
					case Constants.ActionType.VIEW:
						
						break;
					default:
						break;
					}
				 
				 break;
			 case InstConstants.ControllerMode.FacultySubjects:
				 switch (actionType) {
				 case Constants.ActionType.VIEW:
					/*	getCombobox("/Academy/a/i/batches", "batchId",null,null,function(){
							getCombobox("/Academy/a/i/programForBatchClass", "programId",null,null,function(){
								getCombobox("/Academy/a/i/depts", "deptId",null,null,function(){
									getFacultySubjectBatchClassFn(1);
								});
							});
						});*/
					default:
						break;
					}
				
				 break;
				case InstConstants.ControllerMode.FacultyDepartment:
					if((actionType == Constants.ActionType.ISA_RESULTS)){
						if(!$("#checkISAPattern").val()){
						/*
						 * var selectedData=$("#selectedData").val();
						 * getCombobox('/Academy/a/i/isaTemplateDetails/'+selectedData,
						 * 'getStudentISATempId',"","",function(){
						 * $("#getStudentISATempId").val($("#getStudentISATempId
						 * option:first").val());
						 * isaMarksStudentSearch($("#controllerMode").val(),$("#actionType").val(),0);
						 * });
						 */
							$("#isapatviewtbl td a:first")[0].click();
						}
					}else if(actionType==Constants.ActionType.ATTENDANCE1){
						$('[id^=generic-save-id]').prop('disabled',true);
					} 
					break;
				 case InstConstants.ControllerMode.Attendance:
					 switch (actionType) {
					 case Constants.ActionType.VIEW:
							getCombobox("/Academy/a/i/batches", "batchId",null,null,function(){
								getCombobox("/Academy/a/i/programForBatchClass", "programId",null,null,function(){
									getCombobox("/Academy/a/i/depts", "deptId",null,null,function(){
										getFacultySubjectBatchClassFn(1);
									});
								});
							});
						default:
							break;
						}
					
					break;
					
					
					case InstConstants.ControllerMode.ProgressReport:
						switch(actionType)
						{
						case Constants.ActionType.ADD:
							dateCheckerProgress();
							setDateTimePicker();
							
							break;
						case Constants.ActionType.DELETE:

							break;
						case Constants.ActionType.VIEW:
							
							break;
						default:
							break;
						}
							break;
					case Constants.ControllerMode.ManageRooms:
						switch(actionType)
						{
						case Constants.ActionType.ADD:
							getCombobox('/Academy/a/i/getbuilding', 'buildingid');
							getCombobox('/Academy/a/i/getFloor', 'floorId');
							getCombobox('/Academy/a/i/getRoomType', 'roomtype');
							getCombobox('/Academy/a/i/configValue/0/384', 'assessmenttype');
							break;
						case Constants.ActionType.DELETE:

							break;
						case Constants.ActionType.VIEW:
							
							break;
						default:
							break;
						}
						break;
					 case InstConstants.ControllerMode.PLACEMENTCYCLE:
						 switch(actionType)
							{
							case Constants.ActionType.ADD:
								
								break;
							case Constants.ActionType.DELETE:

								break;
							case Constants.ActionType.VIEW:
								
								break;
							default:
								break;
							}
							break;
			
	default:break;
	}
}

function getSubjectDetails(ctxVal,controllerMode,actionType,callback){
	if(!ctxVal)
		return false;
	var formData={
			id:ctxVal,
			controllerMode:controllerMode,
			actionType:actionType,
			menuId:this.menuId
	}
	doAjaxCall(this.url,"GET", formData,function(data){
		$("#subjectDetailsDiv").html(data);
		if(callback && typeof callback==='function')
			callback();
	})
}

function attachSubjectEvents(controllerMode,actionType,basedOn,prerequisites,soMap,subjectType){
	
	var that=this;
	$("#subjectType").val(subjectType);
	
	$("input[type='radio'][name='basedOn']").on('click',function(){
		if($(this).val()==1){
			 $("#chkMarks").css("display","none");
			 $("#chkCredits").css("display","block");
			
		}else{
			$("#chkMarks").css("display","block");
			$("#chkCredits").css("display","none");
		}
	});
	
	if(parseInt($("#isLab").val())==1)
		$("#isLabId").prop("checked",true);
	$("#isLabId").on("change",function(){
		if($(this).is(":checked"))
		$("#isLab").val(1);
		else
			$("#isLab").val(0);
	})
	if(parseInt($("#isAttendanceApplicableId").val())==0)
		$("#isAttendanceApplicable").prop("checked",true);
	$("#isAttendanceApplicable").on("change",function(){
		if($(this).is(":checked"))
		$("#isAttendanceApplicableId").val(0);
		else
			$("#isAttendanceApplicableId").val(1);
	})
	if(basedOn==0 || basedOn==1)
	$("#credits").click();
	else
		$("#marks").click();
	
	$("input[type='radio'][name='prerequisites']").on('click',function(){
		if($(this).val()==1){
			 $("#chkPreReq").css("display","block");
			
		}else{
			$("#chkPreReq").css("display","none");
		}
	});
	if(prerequisites==0 || prerequisites==1)
	$("#prerequisite-yes").click();
	else
		$("#prerequisite-no").click();

	$("#curRequisite").on("keyup",function(){
		var ip=$(this).val();
		if(!ip || ip.length<3){
			$("[name=singlebutton").attr("disabled","disabled");
			return false;
		}
		var formData={
				sub_code:$(this).val(),
				controllerMode:7000,
				actionType:13,
				menuId:that.menuId
		}
		doAjaxCall(that.url,'GET',formData,function(data){
			if(data.length==0){
				$("[name=singlebutton").attr("disabled","disabled");
				return;
			}
			$("[name=singlebutton").removeAttr("disabled");
			$("#preRequisite").html('');
			$("#preRequisite").html(data);
		})
	});
	$("#rquisiteAdd").on('click',function(e){
		e.preventDefault();
		var val=$("#curRequisite").val();
		if(!val && val.length<=0)
			return false;
		var ctx=$("#preRequisite [value='"+val+"']");
		var apnd="<option value='"+$(ctx).attr('data-value')+"' selected>"+val+"</option>"
		$("#listRequisite").append(apnd);
		$(ctx).remove();
		$("#curRequisite").val('');
	})
	
	$("#rquisiteDel").on('click',function(e){
		e.preventDefault();
		var ctx=$("#listRequisite option:selected");
		if(!ctx && ctx.length==0)
			return false;
		$(ctx).each(function(){
			var val=$(this).val();
			if(!val && val.length<0)
				return false;
			var apnd="<option data-value='"+val+"' value='"+$(this).text().trim()+"'>";
			$("#preRequisite").append(apnd);
			$(this).remove();
			$("#listRequisite option").prop("selected",true);
		});
	});
	
	that.offeredTo={};
	if(soMap && soMap.length>0){
		that.offeredTo=JSON.parse(soMap);
		var preId="offeredto_";
		for(var i in that.offeredTo){
			
			for(var j in that.offeredTo[i]){
				$('#offeredto_'+i+'_'+that.offeredTo[i][j]).prop("checked",true);
			}
			f1(['offeredto',i]);
		}
		$("#offeredto").val(soMap);
	}
	$("[id^=offeredto_]").on('click',function(){
		var thisId=$(this).attr('id');
		var ids=thisId.split("_");
		var programId=ids[1];
		var arr=[];
		
		if(ids.length==2){
			if($(this).is(":checked")){
			$('[id^='+thisId+'_]').prop('checked',true).each(function(){
				arr.push(parseInt($(this).val()));
		     });
			that.offeredTo[programId]=arr;
			}
			else{
				$('[id^='+thisId+'_]').prop('checked',false);
				arr=[];
				delete that.offeredTo[programId];
			}
		}else{
			if(that.offeredTo.hasOwnProperty(programId))
				arr=that.offeredTo[programId];
			
				if($(this).is(":checked"))
					arr.push(parseInt($(this).val()));
				else{
					for(var i in arr){
						if(arr[i]==$(this).val()){
							arr.splice(i,1)
							break;
						}
					}
				}
				f1(ids);
				
				that.offeredTo[programId]=arr;
				if(that.offeredTo[programId].length==0)
					delete that.offeredTo[programId];
			
		}
		$("#offeredto").val(JSON.stringify(that.offeredTo));
	});
	function f1(ids){
		var cntChecked=0;
		var cntTotal=0;
		$('[id^='+ids[0]+'_'+ids[1]+'_]').each(function(){
			if($(this).is(":checked")) 
				cntChecked++;
			cntTotal++;
		})
		if(cntTotal==cntChecked){
			$('#'+ids[0]+'_'+ids[1]).prop('indeterminate',false);
		    $('#'+ids[0]+'_'+ids[1]).prop('checked',true);
		}
		else 
			$('#'+ids[0]+'_'+ids[1]).prop('indeterminate',true);
	}
	
}

function getElectiveSubject(){
	if(parseInt($("#subjectTypeId").val())==4){
		$("#electiveGroupId").css("display","block");
		getCombobox("/Academy/a/i/electiveGroupWithDName", "electiveGroupId");

	}else{
		$("#electiveGroupId").css("display","none");
	}
	
}
function checkselectedsubjects(){
	
	
	if($('#subjectIds').val()!=undefined && $('#subjectIds').val()!='')
	{
		var aryresult=$("#subjectIds").val().split(",");
	var selectedValues= $('#subjectIds').val().split(",");
	var allPages=subjectsToBatchClass.column().nodes();
	var lateralPages=subjectsToBatchClass.column(3).nodes();
	var sublaterl=[];
	
	if($('#lateralsubjectIds').val()!=undefined && $('#lateralsubjectIds').val()!='')
	{
		 sublaterl=$("#lateralsubjectIds").val().split(",");
	}
		$.each(allPages, function(index, currentValue)
				{
			var id=currentValue.getAttribute('data-value');
			if(!(selectedValues.indexOf(id)<0)){
				
				$("[id^=subjectDetails_"+id+"]",allPages).prop('checked', true );
				
				var x=$("[id^=subjectDetails_"+id+"]",allPages).attr("data-name");
				
				var y=x.split("_");
				
				$("#ofTBody").append("<tr id="+id+"><td class='subjectCode'>"+
			    		y[0]+
			    		"</td><td class='subjectname'>"+y[1]+"</td></tr>");
				
				
			}
		});
		$.each(lateralPages, function(index, currentValue)
				{
			var id=currentValue.getAttribute('data-value');
	
				if(  !(sublaterl.indexOf(id)<0)){
					$("[id^=lateralsubjects_"+id+"]",allPages).prop('checked', true );
				}
				
			
		});
	
	$('#selectedsubjects').text(aryresult.length);
}
}
function addremovesubjects(objRow)
{
	if($("#subjectIds").val()!=''){
		var aryresult=$("#subjectIds").val().split(",");
	}else{
		var aryresult=[];
	}
	
	
	var i=0;
			if($('#'+objRow.id).is(':checked')){
				var val = $('#'+objRow.id).val();
				aryresult.push(val);
				// /////Selected Subjects/////
				var table = document.getElementById("subjects");
				var x=$('#'+objRow.id).attr("data-name");
				var y=x.split("_");
				var rowCount = $('#subjects tr').length;
				$("#ofTBody").append("<tr id="+val+"><td class='subjectCode'>"+
			    		y[0]+
			    		"</td><td class='subjectname'>"+y[1]+"</td></tr>");
				// /////Selected Subjects End///////////
			}else{
				var index = aryresult.indexOf($('#'+objRow.id).val());
				if (index > -1) {
					aryresult.splice(index, 1);
				}
				$('#subjects tr#'+$('#'+objRow.id).val()).remove();
				$("[id^=allSubjectsChecked]").prop('checked', false );
				
			}
			$('#selectedsubjects').text(aryresult.length);
			$("#subjectIds").val(aryresult.toString());
}
function addLateralubjects(objRow)
{
	if($("#lateralsubjectIds").val()!=''){
		var aryresult=$("#lateralsubjectIds").val().split(",");
	}else{
		var aryresult=[];
	}
			if($('#'+objRow.id).is(':checked')){
				var val = $('#'+objRow.id).val();
				aryresult.push(val);
			}else{
				var index = aryresult.indexOf($('#'+objRow.id).val());
				if (index > -1) {
					aryresult.splice(index, 1);
				}
				
			}
			$("#lateralsubjectIds").val(aryresult.toString());
}
function addremoveAllsubjects(objRow){
	var aryresult=[];
	var i=0;
	 $('#ofTBody').html('');
	 var allPages=subjectsToBatchClass.column().nodes();
	if($('#'+objRow.id).is(':checked')){
		$('input[type="checkbox"]', allPages).prop('checked', true);
		
		$.each(allPages, function(index, currentValue)
				{
			var id=currentValue.getAttribute('data-value');
				var x=$("[id^=subjectDetails_"+id+"]",allPages).attr("data-name");
				
				var y=x.split("_");
				
				$("#ofTBody").append("<tr id="+id+"><td class='subjectCode'>"+
			    		y[0]+
			    		"</td><td class='subjectname'>"+y[1]+"</td></tr>");
				
				aryresult.push(id);
			
		});

	}else{
		$('input[type="checkbox"]', allPages).prop('checked', false);
		aryresult=[];
	}
	$('#selectedsubjects').text(aryresult.length);
	$("#subjectIds").val(aryresult.toString());
}




function getSubjects() {
	if(($('#batches1').val()!=null) && ($('#program').val()!=null) && ($('#classes1').val()!=null))
			{
		var selectValue = $('#batches1').val() + "_" + $('#program').val()+ "_" + $('#classes1').val()+"_"+$('#bathclassId').val();
		getDetailsBasedOnSelected('instituteApp', 8030, 12, 8030,
				'subjectDetails', selectValue, 'Batch Classes',function(){
			checkselectedsubjects();
			$('#subjectStatement').hide();
		});
			}
	
}

function getBatchClassComboBox(){
	
	getCombobox('/Academy/a/i/getDepartmentBasedOnInstitutes/'+$("#instId").val(), 'depts1');
	getCombobox('/Academy/a/i/getBatchBasedOnInstitutes/'+$("#instId").val(), 'batches1',null,null,function(){
		getCombobox('/Academy/a/i/programByInstId/'+$("#instId").val(), 'program',null,null,function(){	
			getCombobox('/Academy/a/i/classessbyinst/'+$("#instId").val(), 'classes1',null,null,function(){});
		});
	});
	
}

function setBatchClassAttendanceType(){
	$('#attendanceType').click(function() {
	if($('#attendanceType').is(":checked")){
		$('#attendanceType').val(1);
	}else{
		$('#attendanceType').val(0);
	}
	});
}
///////////Batch Class End//////////////
function getUserManagementDetailsBySearch(controllerMode, actionType, id,
		selectedData) {
	var status="";
	var j=1;
	// var keys=Object.keys(checkComboValues);
	var formData = {
		controllerMode : controllerMode,
		actionType : actionType,
		id : id,
		userTypeId:$('#userTypeId').val(),
		loginId : $('#loginId').val(),
		userId:$('#userId').val(),
		email : $('#email').val(),
		mobile : $('#mobile').val(),
		dept:$('#deptId').val(),
		institute : $("#getInstId").val(),
		menuId:this.menuId
	};
	var breakOut = false;
	$("[data-parent='6']").each(function() {
		if ($(this).val() != '') {
			breakOut = true;
			return false;
		}
	});
	if(breakOut) // || formData.institute.length>0
		breakOut = true;
	
	if (breakOut == true) {
		doAjaxCall('instituteApp', 'GET', formData, function(data) {
			$('#requestedUsersMagementData').html(data);
			// attachEnterEvent('genericSave','generic-save-id');
		});
	} else {
		showMessage("Please enter/select at least one field", "error");
		return false;
	}

}

function resetgetUserManagementDetailsBySearch() {
	$("[data-parent='6']").each(function() {
		$(this).val('')
	});
	$('#requestedUsersMagementData').html("");

}

// for edit usersmanagement details save button

function handleEditDetailsUsers(controllerMode, actionType, id, selectedData) {
	var selected=selectedData.split("~");
	getCurrentDataTable();
	var formData = {
		controllerMode : controllerMode,
		actionType : actionType,
		id : id,
		selectedData : selected[0],
		menuId : this.menuId
	};
	var obj = getDialogMessage(controllerMode, actionType, id, selectedData);
	bgCurtain();
	doAjaxCall(this.url, 'GET', formData, function(data) {
		handleEditDetailsUsersSuccess(formData, data, obj);
        removeBgCurtain();
	});

}

function handleEditDetailsUsersSuccess(formData, data, obj) {
	var that=this;
	var buttons = [
			{
				type : "button",
				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='save-span-1'></span>Save",
				className : "btn-sm btn-default",
				callback : function(e) {
					if (!$("#genericSave").valid() || that.formErrorList.length>0)
						return false;
					var value=1;
					if($("#buttonMode").val()==0)// its not close the pop
													// up(set value in jsp)
						value=0;
					return handleGenericDetailsUsersSave(formData,obj,value);
				}
			},
			{
				type : "cancel",
				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
				className : "btn-sm btn-default",
				callback : null
			} ];
	getModalDialog(
			'large',
			obj.title,
			data,
			buttons,
			function() {
				eval(this.url
						+ "(formData.controllerMode,formData.actionType,formData.id,formData.selectedData,true);");
				$("#save-span-1").parent().attr("id","generic-save-id");
				attachEnterEvent('genericSave','generic-save-id');
				handleFormValidation('genericSave');
				
			});
}


function handleGenericDetailsUsersSave(dataForm,obj,type) {
	var formContext = $("#genericSave");
	var controllerMode = parseInt($('#controllerMode').val());
	var actionType = parseInt($('#actionType').val());
	var id = id;
	var selectedData = selectedData;
	var postData = formContext.serializeArray();
	var formURL = formContext.attr("action");
	var formData = new FormData(formContext[0]);
	formData.append("menuId",this.menuId);

	var that = this;
	$("[id^=save-span]").parent().prop('disabled',true);
	switch (parseInt(type)) {
	case 1:
		break;
	case 2:
	case 3:
		/* formData.set('actionType',1); */
		break;
	default:
		break;
	}
	
	doAjaxCall(formURL, 'POST', formData, function(data) {
		var callBack = false;
		var dataArray = data.split("_");
		var status = dataArray[0].toUpperCase();
		var statusResp = dataArray[1];
		if (status == "SUCCESS") {
			callBack = true;
			showMessage(statusResp, "success");
			switch (parseInt(type)) {
			case 1:
				modalDialog.modal('hide');
				getManagementUsers(id);
				break;
			case 2:
				$(formContext)[0].reset();
				resetFormFields();
				$("[id^=save-span]").parent().removeAttr('disabled');

				if(that.offeredTo)
					that.offeredTo={};
				break;
			case 3:
				$("[id^=save-span]").parent().removeAttr('disabled');
				break;
			default:
				break;
			}
		} else if (status == "ERROR") {
			$("[id^=save-span]").parent().removeAttr('disabled');
			showMessage(statusResp, "error");
		}
		
		refreshDatatable();
		if(callBack && obj.callBack){
			callBackFunction(dataForm.controllerMode, dataForm.actionType, dataForm.id, dataForm.selectedData,formData,that.menuId);
		}
	}, false, false);

	return false;
}
// for usersmanagementsave end

function handleUserManagementPasswordDailauge(controllerMode, actionType, id, selectedId,selectedEmailid,selectedFirstName){
	var obj = {};
	
	obj.title ="Reset LoginId : "+selectedId +" Password";
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			Userid : id,			
			loginId : selectedId,
			emailId :selectedEmailid,
			firstName:selectedFirstName,
			menuId:this.menuId
		};
	
	var buttons = [
	   			{
	   				type : "button",
	   				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='save-span-1'></span>Reset Password",
	   				className : "btn-sm btn-default",
	   				callback : function(e) {
	   					handleUsersManagementGenericSave(formData);

	   				}
	   			},
	   			{
	   				type : "cancel",
	   				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
	   				className : "btn-sm btn-default",
	   				callback : null
	   			} ];
	   	getModalDialog(
	   			'medium',
	   			obj.title,
	   			'<h5>&nbsp;&nbsp;&nbsp; Are You Sure you Want to Reset Password?<h5>',
	   			buttons,
	   			function() {	 				
	   				$("#save-span-1").parent().attr("id","generic-save-id");
	   				attachEnterEvent('genericSave','generic-save-id');
	   			});	
}

function handleUsersManagementGenericSave(formData){
	doAjaxCall('instituteApp', 'GET', formData, function(data) {
		var dataArray = data.split("_");
		var status = dataArray[0];
		var statusResp = dataArray[1];		
	
		if (status == "1001") {
			showMessage(statusResp, "success");
		} else{
			showMessage(statusResp, "error");
		}
		if (!globalDatatable) {

			$("#menuTab_" + this.menuId).trigger("click");
		}
		refreshDatatable();
	});
}
function dateChecker()
{

	$("#eDate").on('change',function ()  {
	    var startDate = document.getElementById("sDate").value;
	    var endDate = document.getElementById("eDate").value;

	    if ((Date.parse(startDate) > Date.parse(endDate))) {
	    	showMessage("End Date should be greater than Start Date",'error');
	        
	    }
	});	
}

function timeChecker(){
	$("#eTime").on('change',function ()  {
		var startDate = document.getElementById("sDate").value;
		var endDate = document.getElementById("eDate").value;
	    var sTime = document.getElementById("sTime").value;
	    var eTime = document.getElementById("eTime").value;
	    
	    if(startDate == endDate){
		    if (sTime >= eTime) {
		    	showMessage("End Time should be greater than Start Time",'error');
		        
		    }
	    }
	});	
}


function subjectsSearch(){

	var that=this;
	$("#subjectSearchForm").submit(function(e){
		e.preventDefault();
		var formData=new FormData($(this)[0]);
		formData.append("menuId",that.menuId);
		bgCurtain();
		doAjaxCall(that.url,'POST',formData,function(data){
			removeBgCurtain();
			$("#subjectDetailsDiv").html(data);
			updateCurrentDataTable();
		},false,false);
		return false;
	});
}

function resetSubjectSearch(){
	$("#institutionId").val('');
	$("#subjectDetailsDiv").html('');
	$("#searchSubjectNameId").val('');
	$("#searchSubjectCodeId").val('');
	$("#searchCourseTypeId").html('');
	$("#searchOfferedById").html('');
	$("#searchOfferedToId").html('');
	$("#searchBatchId").html('');
}

function getSectionsOfBatchClassToShowStudents(controllerMode, actionType, id, selectedData)
{
	var buttons = [{
		type : "cancel",
		label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
		className : "btn-sm btn-default",
		callback : null
	} ];
	var data= '<div class="wrapper-modal-content-area-pad"><div class="form-horizontal"><div class="col-md-12">'
        +'<label class="col-md-4 control-label" for="">Section</label>'
        +'<div class="col-md-4"> <select id="classBatchSections"  class="form-control" name="classBatchSections" '
        +'onchange="getStudentsOfSectionByBatchClass(this.value)">'
        +'</select></div>'
        +'</div><div  class="col-md-12" id="showStudentsBasedOnSection" data-batchclass="'+id+'"></div> <div class="col-md-12"><p class="error"  id="studentClicked"></p><div  id="studentBatchClassSubjects">'
        +'</div></div></div></div>';
	
getModalDialog('large', 'Show students', data,buttons, function(){
	getCombobox('/Academy/a/i/getClassBatchSectionsWithBatchClass/'+id,'classBatchSections',null,null,function(data, selectedValue){
		
		
	});
	
});
}
function getStudentsOfSectionByBatchClass(value)
{
	getDetailsBasedOnSelected('instituteApp', 8030, 8, '+selectedData+', 'showStudentsBasedOnSection', value,'BatchClass',function(formData, data){
		$('#assignedStudentDetailView').removeClass('wrapper-modal-content-area-pad');
		
		$('[id^=studentUsn]').on('dblclick', function(event){
			var userId=$(this).attr('data-userid');
			var usn=$(this).attr('data-usn');
			
			var batchClassId=$('#showStudentsBasedOnSection').attr('data-batchclass');
			if(userId && usn)
				{
				var formData={
						controllerMode : 8030,
						actionType :95,
						userId:userId,
						batchClassId:batchClassId,
						menuId:354
				}
				doAjaxCall('instituteApp','POST',formData,function(data){
					$("#studentBatchClassSubjects").html(data);
					$('#studentClicked').html('Subjects of '+usn);
					
				});
				}
		})
	})
}

function verifyCommaSeperatedUSNs(facultyId, batchClassId, subjectId, facultyName, classBatchSectionId,subjectTypeId){
	
	var formData = {
			controllerMode : 6740,
			actionType : 75,
			batchClassId : batchClassId,
			classBatchSectionId : classBatchSectionId,
			subjectTypeId : subjectTypeId,
			subjectId : subjectId,
			facultyId : facultyId,
			facultyName : facultyName,
			studentsUSNs : $("#studentsUSNs").val(),
			menuId : this.menuId
		};
	
	$('#displayUSNValidationReport').html("");
	
	doAjaxCall(url, 'POST', formData, function(data) {	
		$('#displayUSNValidationReport').html(data);
		return ;
	});
}


function getStudentSubjectCombo(){
	getCombobox("/Academy/a/i/batches", "getStudentBatchId",null,null,function(){
		getCombobox("/Academy/a/i/programForBatchClass", "getStudentProgramId",null,null,function(){
			getCombobox("/Academy/a/i/depts", "getStudentDepartmentId",null,null,function(){
				getStudentDeptFn();
			});
		});
	});
}


function getAllocateSubjectCombo(){
	getCombobox("/Academy/a/i/batches", "getStudentBatchId",null,null,function(){
		getCombobox("/Academy/a/i/programForBatchClass", "getStudentProgramId",null,null,function(){
			getCombobox("/Academy/a/i/depts", "getStudentDepartmentId",null,null,function(){
				getAllocateSubDeptFn();
			});
		});
	});
}

function getAllocateSubDeptFn(){
	var batchId=$("#getStudentBatchId").val(),
	programId=$("#getStudentProgramId").val(),
	deptId=$("#getStudentDepartmentId").val();
	if(!batchId || !programId || !deptId)
		return false;
	getCombobox('/Academy/a/i/batchClass/'+batchId+"/"+programId+"/"+deptId+"/"+1, 'getStudentBatchClassId',null,null,function(){
		getAllocateSubBatchClassFn($("#getStudentBatchClassId").attr('data-id'));
	});
}

function getAllocateSubBatchClassFn(val) {
	var batchClassId = $("#getStudentBatchClassId").val();
	if(!batchClassId) {
		$("#getStudentSectionId").html('');
		return;
	}
	var prepend="<option value=0>All</option>";
	getCombobox('/Academy/a/i/batchClassSections/' +batchClassId, 'getStudentSectionId', null, prepend, function() {
		$("#getStudentSectionId").val($("#getStudentSectionId option:first").val());
	});
} 

function getStudentBatchFn(value) {
	getStudentDeptFn();
}

function getStudentProgramFn(val) {
	getStudentDeptFn();
}

function getStudentDeptFn(value) {
	$("#showISAStudents").html('');
	var batchId=$("#getStudentBatchId").val(),
	programId=$("#getStudentProgramId").val(),
	deptId=$("#getStudentDepartmentId").val();
	if(!batchId || !programId || !deptId)
		return false;
	getCombobox('/Academy/a/i/batchClass/'+batchId+"/"+programId+"/"+deptId+"/"+1, 'getStudentBatchClassId',null,null,function(){
		getStudentBatchClassFn($("#getStudentBatchClassId").attr('data-id'));
	});
}

function getStudentBatchClassFn(val) {
	$("#showISAStudents").html('');
	var batchClassId=$("#getStudentBatchClassId").val();
	
	if(!batchClassId) {
		$("#getStudentSectionId").html('');
		$("#getStudentSubjectId").html('');
		return;
	}
	
	var prepend = "";  // "<option value=0>All</option>";
	getCombobox('/Academy/a/i/batchClassSections/' + batchClassId, 'getStudentSectionId', null, prepend, function() {
		$("#getStudentSectionId").val($("#getStudentSectionId option:first").val());
		var sectionId = $("#getStudentSectionId").val();
		getCombobox('/Academy/a/i/batchClassSubjects/' + batchClassId + '/' + sectionId, 'getStudentSubjectId', null, null, function() {
			$("#getStudentSubjectId").val($("#getStudentSubjectId option:first").val());
			if(val==2) {
				getAttendanceSearchComboBox();
				getAttendanceElectiveFaculties();
			} else if(val==1) {
				getSubjectFacultiesInISA();
			}
		});
		if(val==1) {

		}
	});
}

function getIsaDialog(controllerMode, actionType, id, selectedData) {
	
	var buttonName = $("a:focus").text();
	var formData = {
		controllerMode : parseInt(controllerMode),
		actionType : parseInt(actionType),
		id : id,
		selectedData : selectedData,
		menuId : this.menuId
	};
	
	var buttons = [ {
		type : "cancel",
		label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
		className : "btn-default btn-sm",
		callback : null
	} ];
	
	var that = this;
	var genTitile = selectedData;
	if (!genTitile)
		genTitile = "";

	var title = handleCommonViewTitle(controllerMode, actionType, id, selectedData);
	bgCurtain();

	doAjaxCall(this.url, 'GET', formData, function(data) {
		removeBgCurtain();
		$('#adminContent').html(data);
		$(".outside-action-btn").removeClass("disabled");
	});
}

function handleBatchClassDialog(controllerMode, actionType, id, selectedData) {
	
	var buttonName = $("a:focus").text();
	var formData = {
		controllerMode : parseInt(controllerMode),
		actionType : parseInt(actionType),
		id : id,
		selectedData : selectedData,
		menuId : this.menuId
	};
	
	var buttons = [ {
		type : "cancel",
		label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
		className : "btn-default btn-sm",
		callback : null
	} ];
	
	var that = this;
	var genTitile = selectedData;
	if (!genTitile)
		genTitile = "";

	var title = handleCommonViewTitle(controllerMode, actionType, id, selectedData);
	bgCurtain();

	doAjaxCall(this.url, 'GET', formData, function(data) {
		removeBgCurtain();
		getModalDialog('large',	title,data,buttons,function() {
			eval(that.url + "(formData.controllerMode,formData.actionType,formData.id,formData.selectedData,true);");
			$("#save-span-1").parent().attr("id","generic-save-id");
	/*		attachEnterEvent('genericSave','generic-save-id');
			handleFormValidation('genericSave');*/
		});
		$(".outside-action-btn").removeClass("disabled");
	});
}
function isaMarksStudentSearch(controllerMode, actionType, id,  isamarksmasterid) {

	var that = this;
	var formData = {
			controllerMode:controllerMode,
			actionType:actionType,
			facultySubjectId:$('#facultySubjectId').val(),
			isamarksmasterid:isamarksmasterid,
			id:id,
			isaType:1,
			menuId:this.menuId,		
	}
	
	bgCurtain();
	doAjaxCall(this.url, 'POST', formData, function(data) {
		removeBgCurtain();
		$("#showISAStudents").html(data);
/*//		$("[class^=showpst_").css("display","none");
		$("#isamaster_"+isaMasterId2).css("")
// 		if( parseInt($("#isCBTEnabled").val())!=1)
// 		$(".showpst_"+isaMasterId2+"_0").css("display","inline");
		$("#showMarksFor").html($("#isamaster_"+isaMasterId2).attr("name"));
		$("#getStudentISATempId").val(isaMasterId1);
		$("#currentISATempId").val(isaMasterId2);*/
	});
}

function savePasteAllISAStudents(controllerMode,actionType,isaMarksMasterId){
	if(	parseInt($("#isCBTEnabled").val())==1)
		return;
	
	var that=this;

		var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			subjectId:$("#isamarksubjectId").val(),
			isaMarksMasterId:isaMarksMasterId,
			isaMaxMarks:$("#isaMaxMarks_"+isaMarksMasterId).val(),
			isaScaledMarks:$("#isaScaledMarks_"+isaMarksMasterId).val(),
			isaMarkssubidtype:$("#isaMarkssubidtype").val(),
			marks:JSON.stringify(getISAMarksData(isaMarksMasterId)),
			menuId:this.menuId
		}
		
	
		bgCurtain();
		doAjaxCall(that.url,'POST',formData,function(data){
			removeBgCurtain();
			var dataArray = data.split("_")[1];
			if (data.indexOf("SUCCESS") > -1) {
			showMessage(dataArray,'success');
			updateIsaLasteUpdateDate();
			}else
				showMessage(dataArray,'error');
		});
	
}

function saveSingleISAStudents(controllerMode,actionType,context,isaMarksMasterId){
	if(	parseInt($("#isCBTEnabled").val())==1)
		return;
	
	if(this.validateSingleISAMarksEntry.length>0){
		showMessage("Invalid input!");
		return;
	}
	
	var obj={};
	var arr=[];
	if($(context).length>0){
		obj.roll=$(context).attr('data-roll');
		obj.usn=$(context).attr('data-usn');
		obj.uid=$(context).attr('data-uid');
		obj.bcid=$(context).attr('data-bcid');
		obj.cbsid=$(context).attr('data-cbsid');
		obj.marks=$(context).val();
		obj.coffmarks=$("#coff_"+$(context).attr("id")).val();
	}

	
	$(context).removeAttr("style");
	arr.push(obj);
	
	var formData = {
		controllerMode : controllerMode,
		actionType : actionType,
		marks:JSON.stringify(arr),
		menuId:this.menuId,
		subjectId:$("#isamarksubjectId").val(),
		isaMarksMasterId:$(context).attr('data-pst'),
		isaMaxMarks:$("#isaMaxMarks_"+$(context).attr('data-pst')).val(),
		isaScaledMarks:$("#isaScaledMarks_"+$(context).attr('data-pst')).val(),
		isaMarkssubidtype:$("#isaMarkssubidtype").val(),
	}
	
	
	
	doAjaxCall(this.url,'POST',formData,function(data){
		var dataArray = data.split("_")[1];
		if (data.indexOf("SUCCESS") > -1) {
		showMessage(dataArray,'success');
		updateIsaLasteUpdateDate();
		}else
			showMessage(dataArray,'error');
	});
	
}

function setClaculatedScaledIsaMarks(context){
	
	var obtainedMarks=parseFloat($(context).val());
	var id=$(context).attr("id");
	var max=parseFloat($("#isaMaxMarks_"+id.split("_")[1]).val());
	var scaled=parseFloat($("#isaScaledMarks_"+id.split("_")[1]).val());
	if(isNaN(obtainedMarks))
		$("#coff_"+id).val($(context).val());
	else
		$("#coff_"+id).val(((obtainedMarks/max)*scaled).toFixed(4));
}

function getISAMarksData(isaMarksMasterId){
	var objArr=[];
	var obj={};
	var that=this;
	var flag=true;
	$("#isaMarksTable >tbody tr").each(function(i){
		obj={};
		$(this).children().each(function(){
		/*$("#isaMaxMarks_"+isaMarksMasterId).children().each(function(){*/
			var t=$(this).children('input[id^=marks_'+isaMarksMasterId+']');
			if(t.length>0 && !$(t).attr("ip-invalid") && $(t).attr('data-pst')==isaMarksMasterId && $(t).val()!="" && $(t).val()!=undefined && $(t).val()!=null){
				obj.roll=$(t).attr('data-roll');
				obj.usn=$(t).attr('data-usn');
				obj.uid=$(t).attr('data-uid');
				obj.bcid=$(t).attr('data-bcid');
				obj.cbsid=$(t).attr('data-cbsid');
				obj.marks=$(t).val();
				obj.coffmarks=$("#coff_"+$(t).attr("id")).val();

			objArr.push(obj);
			}/*else if(t.length>0 && $(t).attr("ip-invalid")  && $(t).attr('data-pst')==isaMarksMasterId && $(t).val()!="" && $(t).val()!=undefined && $(t).val()!=null){
				obj.roll=$(t).attr('data-roll');
				obj.usn=$(t).attr('data-usn');
				obj.uid=$(t).attr('data-uid');
				obj.bcid=$(t).attr('data-bcid');
				obj.cbsid=$(t).attr('data-cbsid');
				obj.marks=0;
				obj.coffmarks=0;

			objArr.push(obj);
			}*/
		});
		
			
	});
	return objArr;
}

function finalizeISAStudents(controllerMode,actionType,adminFacultyType,isaMarksMasterId){
	var checkMarks=true;
	$("[id^=marks_"+isaMarksMasterId+"]").each(function() {
		if(!$(this).val()){
			showMessage("Please Enter Marks For All Students ...!", "error");
			checkMarks=false;
		return false;
		}
		
	});
	if(checkMarks){
	
	var that=this;
	if(this.validateISAMarksEntryList.length>0){
		showMessage("Invalid input can't be finalized!");
		return;
	}
	
	var subject=$("#getStudentSubjectId option:selected").text(),
	isaTemp=$("#getStudentISATempId option:selected").text();
	getConfirmDialog("Save ISA Marks", "Do you want to finalize marks for Subject: <strong>"+subject+"</strong>; ISA: <strong>"+isaTemp+"</strong>?", function(){
		

	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			isamarksmasterid:isaMarksMasterId,
			menuId:this.menuId,
			subjectId:$("#isamarksubjectId").val(),
			students:$("#students").val()
		}
	
		bgCurtain();
		doAjaxCall(that.url,'POST',formData,function(data){
			removeBgCurtain();
			var dataArray = data.split("_")[1];
			if (data.indexOf("SUCCESS") > -1) {
			showMessage(dataArray,'success');
			isaMarksStudentSearch($("#controllerMode").val(),$("#actionType").val(),adminFacultyType,$("#isaMarksMasterId").val())
			updateIsaLasteUpdateDate();
			}else
				showMessage(dataArray,'error');
		});
	});
	}
}

function isaPasteAll(type,adminFacultyType,masterId){
	/*if(masterId!=parseInt($("#isaMarksMasterId").val())){
		showMessage("Select proper assessment type to paste all","error");
		return;
	}*/
	adminFacultyType=masterId;
	this.isIsaPasteAll=false;
	var that=this;
	var pasteDialog=    '<div class="wrapper-modal-content-area-pad">'+
    '<form class="form-horizontal">'+
    ' <div class="col-md-12">'+'<fieldset class="grp_frmfld" style="padding-top: 15px;">'+
         '<div class="form-group pastinblk">'+'<label class="col-md-12 control-label" for="">Please paste the SRN and marks here </label>'+
         '<p class="error" style="padding-left: 15px;"><strong>Quick Help:</strong> Please paste the values separated with comma(,) <br>ex:- <br>PES12017XXXXX, 20.3<br>01FB14ECSXXX, 20</p>'+
         '<div class="col-md-12">'+'<textarea class="form-control" autofocus id="pastedIsaMarks"></textarea>'+'</div>'+
        '     </div>'+
         '</fieldset>'+'</div>'+' </form>'+'</div>';
	
	var buttons = [ {
		type : "button",
		label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Paste",
		className : "btn btn-sm btn-default pasteButtonDisable",
		callback : function(e){
			$("button.pasteButtonDisable").prop("disabled", true);
			isaPasteValue(type,adminFacultyType);
			that.isIsaPasteAll=true;
			

		}
	} ];
	
	getModalDialog('medium','Paste All',pasteDialog,buttons,function() {
	});
 
}


function isaPasteValue(type,adminFacultyType){
var val=$("#pastedIsaMarks").val();
if(val && val.length>0)
	var vals=val.split("\n");
else{
	showMessage("No data provided.");
	return false;
}
	
var obj={};
for(var i in vals){
	var t=vals[i].split(",");
	obj[t[0].trim()]=t[1];
}
var that=this;
var isstudentexits=false;
$("#isaMarksTable >tbody tr").each(function(i){
	$(this).children().each(function(){
		var ctx=$(this).children('input[id^=marks_'+adminFacultyType+']');
		if($(ctx).length>0){
			var usn=$(ctx).attr('data-usn').trim();
			var val=obj[usn];
			if(val){
				isstudentexits=true;
				$(ctx).val(val.trim());
			}
				
			 setClaculatedScaledIsaMarks(ctx);
			validateISAMarks(ctx,0);
		}
	})
});
if(isstudentexits){
	savePasteAllISAStudents($("#controllerMode").val(),$("#actionTypeSaveAll").val(),adminFacultyType)
}else{
	showMessage("Invalid Data !","error");

}
}


function validateISAMarksEntry(isaMarksMasterId){
	

	var that=this;
		this.validateISAMarksEntryList =[];
		$("[id^=marks_]").on('change',function(){
			 that.validateSingleISAMarksEntry =[];
			 
			var singleEntry=1;
			validateISAMarks(this,singleEntry);
			saveSingleISAStudents($("#controllerMode").val(),$("#actionTypeSaveSingle").val(),this,this.id.split('_')[1]);
		});
		$("[id^=isaMaxMarks_]").on('change',function(){
			var obj={};
			var flg=false;
					$("#isaMarksTable >tbody tr").each(function(i){
						$(this).children().each(function(){
							var ctx=$(this).children('input[id^=marks_]');
							if($(ctx).length>0){
								var usn=$(ctx).attr('data-usn').trim();
								 setClaculatedScaledIsaMarks(ctx);
								validateISAMarks(ctx,0);
								flg=true;
							}
						})
					});

					if(this.validateISAMarksEntryList==null && flg==true){
						savePasteAllISAStudents($("#controllerMode").val(),$("#actionTypeSaveAll").val(),this.id.split('_')[1])
					}
						
				});
		
		
}

function validateISAMarks(context,type){

	setClaculatedScaledIsaMarks(context);
		var usn=$(context).attr('data-usn').trim();
		var val=$(context).val();
		var id=$(context).attr("id");
		
		if($('#'+id).val()!=null && $('#'+id).val()!=undefined && $('#'+id).val()!=''){
		if(val)
			val=val.trim();
		
		// var re =/[^\.0-9aA]/gi;
		 
		  var re =/^[]?\d+(\.\d+)?$/;
		 //var re=/^(?:a\b|A\b|AP\b|Ap\b|aP\b|ap\b)/;

		 var idx=this.validateISAMarksEntryList.indexOf(usn);
			if(idx>-1)
				this.validateISAMarksEntryList.splice(idx,1);
			
			if(type==1){
				var idx1=this.validateSingleISAMarksEntry.indexOf(usn);
				if(idx1>-1)
					this.validateSingleISAMarksEntry.splice(idx1,1);
			}
		 $(context).next().remove();
		 if (val && !re.test(val)) {
			 var re1=/^(?:a\b|A\b|AP\b|Ap\b|aP\b|ap\b)/;
			 
			 if(re1.test(val)){
				 
			 }else{
				 $(context).next("span.error").remove();				 
				 $(context).after('<span class="error">Not a valid mark</span>');
				 if(type==1)
					 this.validateSingleISAMarksEntry.push(usn);
				 
				 this.validateISAMarksEntryList.push(usn);

				 $(context).attr("ip-invalid",true); 
			 }
	
			 
			}else if(parseFloat(val)>parseFloat($("#isaMaxMarks_"+id.split("_")[1]).val())){
					$(context).next("span.error").remove();
					 $(context).after('<span class="error">Entered mark is greater than max marks!</span>');
					 if(type==1)
						 this.validateSingleISAMarksEntry.push(usn);
					 
					this.validateISAMarksEntryList.push(usn);
					 $(context).attr("ip-invalid",true);
				
			}else{
				// $(ip).attr("ip-invalid",false);
			}
		}
}

function isaHomePage(){
	$("#menuTab_" + 882).trigger("click");
}


// ISA Related Ends
function getStudentSectionFn(val){
	$("#showISAStudents").html('');
	
	var batchClassId=$("#getStudentBatchClassId").val();
	var sectionId=$("#getStudentSectionId").val();
	getCombobox('/Academy/a/i/batchClassSubjects/'+batchClassId+'/'+sectionId, 'getStudentSubjectId');
	
}

function getStudentSubjectFn() {
	$("#showISAStudents").html('');
}

function showAllocatedSubjects(controllerMode, actionType) {
	
	var type = 1;
	var batchClassId = $("#getStudentBatchClassId").val();
	var classBatchSectionId = $("#getStudentSectionId").val();
	
	var formData = {
			controllerMode:controllerMode,
			actionType:actionType,
			batchClassId:batchClassId,
			classBatchSectionId:classBatchSectionId,			
			menuId:this.menuId,
			type:type
	}

	if(!classBatchSectionId || !batchClassId) {
		showMessage('Select all Fields', "error");
		return;
	}
	
	$("#showAllocatedSubjects").html('');
	bgCurtain();
	doAjaxCall(this.url, 'POST', formData, function(data) {
		$("#showAllocatedSubjects").html(data);
		$("#showAllocateSubjectsId").addClass('disabled');
		removeBgCurtain();
	});
}

function updateISAMaxMarksCheckBoxVal(isaId){
	if ($('#isamaxmarkscheck_'+isaId).is(':checked')){
		$('#isamaxmarkscheck_'+isaId).val(1);
		$("#isaMaxMarks_"+isaId).prop('readonly', false);

	}else{
		$('#isamaxmarkscheck_'+isaId).val(0);
		$("#isaMaxMarks_"+isaId).prop('readonly', true);


	}
	
	
}
function updateIsaLasteUpdateDate(){
	var d=new Date();
	var date_time=d.getDate()+"-"+(d.getMonth()+1)+"-"+d.getFullYear()+" "+d.getHours()+":"+d.getMinutes()+":"+d.getSeconds();
	$('#lasteupdatedate').html(date_time);
}

function clearAllocateSubDiv() {
	$("#showAllocatedSubjects").html("");
}

 function saveAllocatedSubjects(controllerMode,actionType){
	 var formData={
		 controllerMode:controllerMode,
		 actionType:actionType,
		 batchClassId : $("#batchClassId").val(),
		 classBatchSectionId:$("#classBatchSectionId").val(),
		 menuId:this.menuId,
		 data:JSON.stringify(getSelectedAllocateSubjects())
	 }

 	doAjaxCall(this.url,'POST',formData,function(data){

// $("#showAllocatedSubjects").html("");
 		var dataArray = data.split("_")[1];
		if (data.indexOf("SUCCESS") > -1) {
		showMessage(dataArray,'success');
		$("#actionType").val(41)
		}else
			showMessage(dataArray,'error');
 	});
	 
		$("#showAllocateSubjectsId").addClass('disabled');	
 }
 
 function exportAllocatedSubjects() {
	 var type = 1;
	 var branchId = $("#getStudentBranchId").val();
	 var batchClassId = $("#getStudentBatchClassId").val();
	 var classBatchSectionId = $("#getStudentSectionId").val();
	 var text=escape($("#getStudentBatchClassId option:selected").text().trim().replace(/\./g,'_'));
	 window.open('reports/Reports/exportocatedSubjects/'+batchClassId+"/"+classBatchSectionId+"/"+branchId+"/"+text,'_blank');
 }
 
 function saveReminders(controllerMode,actionType, id){
	 var formData={
			 controllerMode:controllerMode,
			 actionType:actionType,
			 menuId:this.menuId,
			 data:JSON.stringify(getSelectedCheckBoxes(id))
		 }

	 	doAjaxCall(this.url,'POST',formData,function(data){
	 		
	 		var dataArray = data.split("_")[1];
			if (data.indexOf("SUCCESS") > -1) {
			showMessage(dataArray,'success');
			$("#actionType").val(actionType)
			}else
				showMessage(dataArray,'error');
			
			document.getElementById('searchStudents').click();
	 	});
 }
 
 function saveReminder(ele, controllerMode,actionType){
	 var userId=[];
	 userId.push(ele.value);
	 if (ele.checked) {
		 var formData={
				 controllerMode:controllerMode,
				 actionType:actionType,
				 menuId:this.menuId,
				 data:JSON.stringify(userId)
			 }
	
		 	doAjaxCall(this.url,'POST',formData,function(data){
		 		
		 		var dataArray = data.split("_")[1];
				if (data.indexOf("SUCCESS") > -1) {
				showMessage(dataArray,'success');
				$("#actionType").val(actionType)
				}else
					showMessage(dataArray,'error');
				
// document.getElementById('searchStudents').click();
		 	});
	 }
 }
 
 function saveApprovals(ele, controllerMode,actionType, id, approve){
	 var value = 0
	 if (ele.checked) {
		 value = 1;
	 } 
	 var formData={
			 controllerMode:controllerMode,
			 actionType:actionType,
			 menuId:this.menuId,
			 approve:approve,
			 value:value,
			 data:JSON.stringify(getSelectedCheckBoxes(id))
		 }

	 	doAjaxCall(this.url,'POST',formData,function(data){
	 		
	 		var dataArray = data.split("_")[1];
			if (data.indexOf("SUCCESS") > -1) {
			showMessage(dataArray,'success');
			$("#actionType").val(actionType)
			}else
				showMessage(dataArray,'error');
			
	 	});
 }
 
 function setPrintStatus(ele, controllerMode,actionType, approve){
	 var userId=[];
	 userId.push(ele.value);
	 if (ele.checked) {
		 var formData={
				 controllerMode:controllerMode,
				 actionType:actionType,
				 menuId:this.menuId,
				 approve:approve,
				 value:1,
				 data:JSON.stringify(userId)
			 }
	
		 	doAjaxCall(this.url,'POST',formData,function(data){
		 		
		 		var dataArray = data.split("_")[1];
				if (data.indexOf("SUCCESS") > -1) {
				showMessage(dataArray,'success');
				$("#actionType").val(actionType)
				}else
					showMessage(dataArray,'error');
				
		 	});
	 } else {
		 var formData={
				 controllerMode:controllerMode,
				 actionType:actionType,
				 menuId:this.menuId,
				 approve:approve,
				 value:0,
				 data:JSON.stringify(userId)
			 }
	
		 	doAjaxCall(this.url,'POST',formData,function(data){
		 		
		 		var dataArray = data.split("_")[1];
				if (data.indexOf("SUCCESS") > -1) {
				showMessage(dataArray,'success');
				$("#actionType").val(actionType)
				}else
					showMessage(dataArray,'error');
				
		 	});
	 }
 }
 
function resetGetStudent(val) {

}

 function formatDate(date,format){
	return moment(date).format(format);
 }
 
 function getInteger(val,defaultVal){
	    return parseInt(val) || defaultVal;
	}
	function getFloat(val,defaultVal){
	    return parseFloat(val) || defaultVal;
	}


	function isEmpty(obj) {
	    return Object.keys(obj).length === 0;
	}
	
function resetBatchClassSearch() {
//	$('#program1').val('');
//	$('#batches').val('');
//	$('#depts').val('');
//	$('#searchclassId').val('');
	$('#searchInstId').val('');
	$('#program1').empty();
	$('#batches').empty();
	$('#depts').empty();
	$('#searchclassId').empty();
	$('#batchClassesDetails').html('');
}

function resetManageSyllabusSearch() {
	$('#institutionId').val('');
	$('#programId').empty();
	$('#batchId').empty();
	$('#classId').empty();
	$("#getSeletedSyllabusSubjects").html('');
}

function onEscResetAllFields(id){
	$('body').keydown(function(e) {
    if (e.keyCode == 27) {
    	$('.daterangepicker ').hide();
    }
});
}

function getAttendanceElectiveFaculties(){
	var batchClassId=$("#getStudentBatchClassId").val();
	var subjectId=$("#getStudentSubjectId").val();
	var classBatchSectionId=$("#getStudentSectionId").val()
	$.ajax({
		url : '/Academy/a/i/getElectiveFacultiesBySubject/'+batchClassId+'/'+subjectId+'/'+classBatchSectionId,
		success : function(result) {
			$('#userId').empty();
			$('#subjectBatchId').empty();
			result=JSON.parse(result);
			if(result.faculties){
				$('#getStudentFacultyIdDiv').show();
				$('#userId').append(result.faculties);
				$("#userId").val($("#userId option:first").val());
				getSubjectBatchesByFaculty();
			}else{
				$('#getStudentFacultyIdDiv').hide();
				$('#getSubjectBatchIdDiv').hide();
			}
		}
	});
	
}










function getSubjectBatchesByFaculty(){
	var batchClassId=$("#getStudentBatchClassId").val();
	var classBatchSectionId=$("#getStudentSectionId").val();
	var subjectId=$("#getStudentSubjectId").val();
	var userId=$("#userId").val();
	$.ajax({
		url : '/Academy/a/i/getSubjectBatchesByFaculty/'+batchClassId+'/'+classBatchSectionId+'/'+subjectId+'/'+userId,
		success : function(result) {
			$('#subjectBatchId').empty();
			result=JSON.parse(result);
			if(result.subjectBatch){
				$('#getSubjectBatchIdDiv').show();
				$('#subjectBatchId').append(result.subjectBatch);
				
				$("#subjectBatchId option").each(function(){
					if($(this).text()=='null'){
						$(this).text("All");
					}
				});
				$("#subjectBatchId").val($("#subjectBatchId option:first").val());
			}else{
				$('#getSubjectBatchIdDiv').hide();
			}	
		}
	});
	
}

function checkIsDeptWise(){
	if(this.menuId==850){
		var userId=$("#facultyId_"+$("#getStudentSubjectId").val()).val();
		$("#userId").val("");
		if(userId){
			$("#userId").val(userId);
		}else{
			$("#getStudentSectionId").val($("#getFacultySectionId").val());
		}
		$("#getStudentSectionId").val($("#getFacultySectionId").val());
		var subjectBatchId=$("#subjectBatchId_"+$("#getStudentSubjectId").val()).val();
		if(subjectBatchId){
			$("#subjectBatchId").val("");
			$("#subjectBatchId").val(subjectBatchId);	
		}

		
	}
}

function handleTimeTableCommonView(controllerMode, actionType, id, selectedData) {
	var rep=false;
	$('[id^=mngTTsf_]').addClass('disabled');
	this.formErrorList=[];
	var buttonName = $("a:focus").text();
	var formData = {
		controllerMode : parseInt(controllerMode),
		actionType : parseInt(actionType),
		id : id,
		selectedData : selectedData,
		menuId : this.menuId
	};
	var buttons = {};
	var buttons = [ {
		type : "cancel",
		label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Close",
		className : "btn-sm btn-default",
		callback : null
	} ];
	var genTitile = selectedData;
	if (!genTitile)
		genTitile = "";
	var title = "Manage " + genTitile;
	if(rep==false){
	doAjaxCall(this.url, 'get', formData, function(data) {
		getModalDialog('large', title, data, buttons, function() {
			rep=true;
			$('[id^=mngTTsf_]').removeClass('disabled');
		});
		});
	}
}
// /////////////////// Institute Management Ends ///////////////////

function adminDashBoard(){
	var formData = {
			
			controllerMode : 5000,
			actionType : 5,
			flag:1,
			menuId:this.menuId
		};
	
	doAjaxCall('appAdmin', 'get', formData, function(data) {
		$('#adminDashBoard').html(data);
	});
}
// /////////////////For Faculty Profile////////////////////////////

function getIntegerValue(actual, returnVal) {
	return parseInt(actual) || returnVal;
}

function generateSectionBatches(noOfBatches) {
	if(parseInt($('#subjectBatchId').val())>0) {
		generateSectionBatchesForUnAllocatedStudents(noOfBatches);
		return;
	}
var sectionName=$('select[name=section] option:selected').text();
    sectionName=sectionName[sectionName.length -1].toUpperCase();
	var totalNoOfStds=parseInt($('#noStudents').val());
	var noOfBatches=parseInt(noOfBatches);
	
	if(noOfBatches <= totalNoOfStds ) {
		
		if(noOfBatches > 0){
			if(noOfBatches <= 10){
				
				var remainNoOfStd = parseInt((totalNoOfStds % noOfBatches));
				var assignNoOfStd = parseInt((totalNoOfStds / noOfBatches));
				var toassignNoOfStd=0;
				var totalNumberOfStudents=0;
				
				text="";
				text +="<table id='subjectBatchTable' class='table compact table-striped table-bordered' style='width: 100%;'><tr><th>Batch Name</th><th class='text-center'>No. Of Students</th></tr>";
					for(i=1;i<=noOfBatches;i++){
						
						/* toassignNoOfStd = assignNoOfStd; */
						
						text +="<tr><td><label' for='noOfSections'>"+sectionName+""+i+"</label>" +
								"<input type='hidden' name='batchName' id='batchName_"+i+"' value='"+sectionName+""+i+"' >" +
								"</td>" +
								"<td><input type='text' class='form-control' data-validate='only-numeric' name='noOfStdsEachSection_"+i+"' id='noOfStdsEachSection_"+i+"' value='"+assignNoOfStd+"' placeholder='No of students' autocomplete='off' style='max-width: 60px; margin: auto;' required readonly></td></tr>";
						toassignNoOfStd = parseInt((toassignNoOfStd + assignNoOfStd));
						
					}

					text +="</table>";
				$('#showBatchSections').empty();
				$('#showBatchSections').append(text);	
				
				
				// remaining students allocating
				if(remainNoOfStd > 0){
					for(i=1;i<=noOfBatches;i++){
						if(totalNoOfStds > toassignNoOfStd)
						{
							var assignValue = parseInt($('#noOfStdsEachSection_'+i).val()) + 1;
						$('#noOfStdsEachSection_'+i).val(assignValue);
						toassignNoOfStd = parseInt((toassignNoOfStd + 1));
						}
					}
				}
			
				/*// calculating number of studennts
				for(i=1;i<=noOfBatches;i++){
					totalNumberOfStudents = totalNumberOfStudents + parseInt($('#noOfStdsEachSection_'+i).val());
					
					$('#noOfStudentAllocated').val(totalNumberOfStudents);
				}*/
				
			}else{
				$('#noOfBatches').val('');
				$('#noOfStudentAllocated').val('');
				showMessage("Please enter less than or Equals 10 only.", "Error");
				
			}
		}else{
			text="";
			showMessage("Please enter greator than 0 only.", "Error");
			$('#showBatchSections').append(text);	
		}

	}
	else{
		showMessage("Please enter less than or Equal of Number of Student.", "Error");
		$('#noOfBatches').val('');
		$('#noOfStudentAllocated').val('');
	}
}

function getstudentcountbysection(){
	$('#noOfBatches').val("");
	$('#noOfStudentAllocated').val("");
	
	var sec=$('#section').val();
	var batches=$('#noOfBatches').val();
	var formData = {
			controllerMode : 8030,
			actionType : 23,
			id :sec,
			menuId : this.menuId
		};
doAjaxCall(this.url, "GET", formData, function(data){
	document.getElementById('noStudents').value=getInteger(data,0);
	});
	
	if(batches > 0){
		generateSectionBatches(batches);
	}else{
	
		$('#showBatchSections').empty();
		
	}
	// call for displaying
	displayListOfSectionBasedonBatchclassId();
	
}


function displayListOfSectionBasedonBatchclassId(){
	var selectValue = $('#batchClassId').val() + "_" + $('#subjects').val() + "_" + $('#section').val();
	getDetailsBasedOnSelected('instituteApp', 8030, 42, 8030,
			'ListOfSections', selectValue, 'BATCHCLASSES',function(selectValue,data){
		$('#displayListOfExistedSections').html(data);
	});
}

function getStudentDetails(id) {
	if(!$('#usnNumber').val()){
		showMessage("Required USN Number", "Error");
		ret=false;
	}else {
	var formData = {
		controllerMode : 8040,
		actionType : 5,
		id : id,
		menuId : this.menuId,
		usn : $('#usnNumber').val()
	};

	doAjaxCall('instituteApp', 'get', formData, function(data) {
		$('#studentDetailsBasedOnUsnNumber').html(data);
	});
	}

}


function getStudentClasses(id) {
	if(!$('#usnNumber').val()){
		showMessage("Required USN Number", "Error");
		ret=false;
	}else {
	var formData = {
		controllerMode : this.controllerMode,
		actionType : this.actionType,
		id : id,
		menuId : this.menuId,
		usn : $('#usnNumber').val()
	};

	doAjaxCall('instituteApp', 'get', formData, function(data) {
		$('#studentSubjectsBasedOnUsnNumber').html(data);
	});
	}
}


function getStudentBatchClassDetails(){
	var programId=$('#programId').val();
	var classesId=$('#classesId').val();
	var branchId=$('#branchId').val();// batchClassId
	var that=this.menuId;
	doAjaxCall('/Academy/a/i/batchClasses/'+branchId+"/"+programId+"/"+classesId, 'get',{menuId:that.menuId},
	function(data){

		if(data!=null && data!=""){
			 $('select[name^=batchClassId]').html(data);
			 getStudentSectionAndSubjectDetails();
		}else{
			 $('select[name^=batchClassId]').val('');
			 $('select[name^=section]').val('');
			 $('select[name^=targetSubjectId_]').val('');
			 
			 
			 $('select[name^=batchClassId]').html(data);
			 $('select[name^=section]').html(data);
			 $('select[name^=targetSubjectId_]').html(data);
			 
			
		}
	});
}

function getStudentSectionAndSubjectDetails(){
	var programId=$('#programId').val();
	var classesId=$('#classesId').val();
	var branchId=$('#branchId').val();
	var batchClassId=$('#batchClassId').val();
	var that=this;
	getCombobox('/Academy/a/i/studentSections/'+batchClassId, 'section');
	
	// getCombobox('/Academy/a/i/targetSubjects/'+branchId+"/"+programId+"/"+classesId+"/"+batchClassId,
	// 'targetSubjectId');
	 doAjaxCall('/Academy/a/i/targetSubjects/'+branchId+"/"+programId+"/"+classesId+"/"+batchClassId, 'get', {menuId:that.menuId},
		        function(data) {
					 if(data!=null && data!=""){
			            $('select[name^=targetSubjectId_]').html(data);
					 }else{
						 $('select[name^=targetSubjectId_]').val('');
						 $('select[name^=targetSubjectId_]').html(data);
					 }     
		        });
}



function updateStudentBranchInformation(){
	if (!$("#genericSave").valid())
		return false;
	getConfirmDialog(
			"Confirm Change Branch",
			" Do you want to Change the Branch?",
			function() {
	var formContext = $("#genericSave");
	var formURL = formContext.attr("action");
	var formData = new FormData(formContext[0]);
	formData.append("menuId",this.menuId);
	doAjaxCall(formURL, 'POST', formData, function(data) {
		var dataArray = data.split("_");
		var status = dataArray[0];
		var statusResp = dataArray[1];		
	
		if (status == "SUCCESS") {
			showMessage(statusResp, "success");
			document.getElementById('SearchByUSNumberId').click();
		} else{
			showMessage(statusResp, "error");
		}
	
	}, false, false);
			});

	return false;
}


function cancelChangeBranch(){
// $("#menuTab_" + 360).trigger("click");
	$('#studentDetailsBasedOnUsnNumber').html('');
	$('#usnNumber').val("");
	}



// ////////////////Event Calendar//////////////////////
// page is now ready, initialize the calendar.../////
var calendarofeventsid='';
var calendareventdat='';
function fullcalendar(events,id){
	var obj = JSON.parse(events);
	// calendarofeventsid=id;
	var eventsArray=[];
	 for(var i=0;i<obj.length;i++){
		 var event={};
		 var startDate = new Date(obj[i].startDate);
		 var endDate = new Date(obj[i].endDate);

		 // time = ((startDate.getHours() >= 10) ? startDate.getHours() : "0"
			// + startDate.getHours()) + ":" + ((startDate.getMinutes() >= 10) ?
			// startDate.getMinutes() : "0" + startDate.getMinutes()) + " - " +
			// ((endDate.getHours() >= 10) ? endDate.getHours() : "0" +
			// endDate.getHours()) + ":" + ((endDate.getMinutes() >= 10) ?
			// endDate.getMinutes() : "0" + endDate.getMinutes());

		 var startFormatDate = ((startDate.getFullYear() > 10) ? startDate.getFullYear() : "0" + startDate.getFullYear()) + "-" 
		 + (((startDate.getMonth() + 1) >= 10) ? (startDate.getMonth() + 1) : "0" + (startDate.getMonth() + 1)) + "-" 
		 + 
		 ((startDate.getDate() >= 10) ? startDate.getDate() : "0" + startDate.getDate());

		 var endFormatDate = ((endDate.getFullYear() > 10) ? endDate.getFullYear() : "0" + endDate.getFullYear()) + "-" 
		 + (((endDate.getMonth() + 1) >= 10) ? (endDate.getMonth() + 1) : "0" + (endDate.getMonth() + 1)) + "-" 
		 + 
		 ((endDate.getDate() >= 10) ? endDate.getDate() : "0" + endDate.getDate());

		 event.id=obj[i].calendarEventDetailId;
		 event.title=obj[i].name;
		 event.start=startFormatDate;
		 event.end=endFormatDate;
		 event.color=obj[i].color;
		 eventsArray.push(event);
		 
		// event+={title:obj[i].name,start:startFormatDate,end:endFormatDate,color:obj[i].color}+",";
	 }
	
$('#calendar').fullCalendar({
	
	
    // put your options and callbacks here
    header: {
        left: 'prev,next today',
        center: 'title',
        right: 'month,listMonth'
    },
    navLinks: false, // can click day/week names to navigate views
    businessHours: true, // display business hours
    editable: true,
    // editable: (createdby == "Admin") ? true:false,
    selectable: true,
    hiddenDays: [0],
    
    events: eventsArray,// [
             /*
				 * { title: 'Business Lunch', start: '2017-04-03', //constraint:
				 * 'businessHours' }, { title: 'Meeting', start: '2017-04-13',
				 * //constraint: 'availableForMeeting', // defined below color:
				 * '#257e4a' }, { title: 'Conference', start: '2017-04-18', end:
				 * '2017-04-20' }, { title: 'Party', start: '2017-04-29', end:
				 * '2017-05-01' },
				 */ // ],
    eventClick: function(event) {
    	start=$.fullCalendar.formatDate(event.start, 'YYYY-MM-DD');
	 	
	    starttime =$.fullCalendar.formatDate(event.start, 'DD-MMMM-YYYY');
	    var endDate = new Date(event.end._d);
	    endDate.setDate(endDate.getDate() - 1); 
	    event.end._d=endDate;
         endtime =$.fullCalendar.formatDate(event.end, 'DD-MMMM-YYYY');
         end=$.fullCalendar.formatDate(event.end, 'YYYY-MM-DD');
         endDate.setDate(endDate.getDate() + 1); 
 	    event.end._d=endDate;
    	handleCalendarEvent(0, 7030, 27, event.id,'Event:'+event.title,function(){
        	manageEvent(starttime,endtime,start,end);
        });
    },
    eventResize: function(event, delta, revertFunc) {
    	
    	
    	 	start=$.fullCalendar.formatDate(event.start, 'YYYY-MM-DD');
    	 	
    	    starttime =$.fullCalendar.formatDate(event.start, 'DD-MMMM-YYYY');
    	    var endDate = new Date(event.end._d);
    	    endDate.setDate(endDate.getDate() - 1); 
    	    event.end._d=endDate;
             endtime =$.fullCalendar.formatDate(event.end, 'DD-MMMM-YYYY');
             end=$.fullCalendar.formatDate(event.end, 'YYYY-MM-DD');
             endDate.setDate(endDate.getDate() + 1); 
      	    event.end._d=endDate;
    	    id= event.id;
    	    handleCalendarEvent(0, 7030, 27, id,'Event:'+event.title,function(){
            	manageEvent(starttime,endtime,start,end);
            });
    	    
    	    revertFunc();
        

    },


    eventDrop: function(event, delta, revertFunc) {
    	
    	
    	 start=$.fullCalendar.formatDate(event.start, 'YYYY-MM-DD');
         
         
         
    	starttime =$.fullCalendar.formatDate(event.start, 'DD-MMMM-YYYY');
    	var endDate = new Date(event.end._d);
	    endDate.setDate(endDate.getDate() - 1); 
	    event.end._d=endDate;
        var endtime =$.fullCalendar.formatDate(event.end, 'DD-MMMM-YYYY');
        end=$.fullCalendar.formatDate(event.end, 'YYYY-MM-DD');
        endDate.setDate(endDate.getDate() + 1); 
  	    event.end._d=endDate;
	    id= event.id;
	    handleCalendarEvent(0, 7030, 27, id,'Event:'+event.title,function(){
        	manageEvent(starttime,endtime,start,end);
        });
	    
	    revertFunc();
       

    },
    select: function(start, end, event) {
        // var title = prompt('Event Title:');
        var eventData;
        sdate=$.fullCalendar.formatDate(start, 'YYYY-MM-DD');
        edate=$.fullCalendar.formatDate(start, 'YYYY-MM-DD');
       
        starttime = $.fullCalendar.formatDate(start, 'DD-MMMM-YYYY');
        endtime =$.fullCalendar.formatDate(start, 'DD-MMMM-YYYY');
       
        
        // check if user is Admin, if not, unselect and return
        // if (userRole != 'Admin') {
        // alert("You do not have the permissions to edit events.");
        // $("#calendar").fullCalendar( 'unselect' );
        // return
        // } else {

        // }
        handleCalendarEvent(0, 7030, 27, 0,'Create Event',function(){
        	manageEvent(starttime,endtime,sdate,edate);
        });
       // handle(2,7050,3,0,"Event");
           /*
			 * $.ajax({ url: 'manage-event.html', type: 'get', success:
			 * function(data) { //alert('Hello'); modalDialog = bootbox.dialog({
			 * size: 'medium', title: 'Manage Event', show: false, message:
			 * data, onEscape: function() { }, buttons: { save: { label: '<span
			 * class="glyphicon glyphicon-ok-circle" aria-hidden="true"></span>
			 * Save', className: "btn-sm btn-default", callback: function() {
			 * var evntcolor = ""; console.log($('#startDate').val()); switch
			 * (parseInt($("#assessmentId").val())) { case 1: evntcolor =
			 * "#b12000"; break; case 2: evntcolor = "#b12000"; break; case 3:
			 * evntcolor = "#257e4a"; break; case 4: evntcolor = "#333"; break;
			 * default: evntcolor = "#3a87ad"; break; } if
			 * ($('#evntTitle').val()) { eventData = { title:
			 * $('#evntTitle').val(), start: $('#startDate').val(), end:
			 * $('#endDate').val(), color: evntcolor };
			 * $('#calendar').fullCalendar('renderEvent', eventData, true); //
			 * stick? = true } $('#calendar').fullCalendar('unselect'); } },
			 * cancel: { label: '<span class="glyphicon
			 * glyphicon-remove-circle" aria-hidden="true"></span> Close
			 * window', className: "btn-sm btn-default", callback: function() { } } }
			 * }); modalDialog.on('shown.bs.modal', function() {
			 * 
			 * });
			 * 
			 * modalDialog.on('hidden.bs.modal', function() {
			 * 
			 * });
			 * 
			 * manageEvent(starttime);
			 * 
			 * modalDialog.modal('show'); } });
			 */
    },
    dayClick: function(date, jsEvent, view) {

        // console.log('Clicked on: ' + date.format());

        // console.log('Coordinates: ' + jsEvent.pageX + ',' + jsEvent.pageY);

        // console.log('Current view: ' + view.name);

        // change the day's background color just for fun
        console.log(date.format());


        // $(this).css('background-color', 'red');

    },
    eventMouseover: function(calEvent, jsEvent) {
        var tooltip = '<div class="tooltipevent" style="width:auto;height:auto;color:#fff;background:#333;position:absolute;z-index:10001;padding:10px 10px 10px 10px;border-radius:5px;line-height: 100%;">' + calEvent.title + '</div>';

        var $tooltip = $(tooltip).appendTo('body');

        $(this).mouseover(function(e) {
            $(this).css('z-index', 10000);
            $tooltip.fadeIn('500');
            $tooltip.fadeTo('10', 1.9);
        }).mousemove(function(e) {
            $tooltip.css('top', e.pageY + 10);
            $tooltip.css('left', e.pageX + 10);
        });
    },
    eventMouseout: function(calEvent, jsEvent) {
        $(this).css('z-index', 8);
        $('.tooltipevent').remove();
    },
    eventResizeStart: function () {
                tooltip.hide()
            },
            eventDragStart: function () {
                tooltip.hide()
            },
            viewDisplay: function () {
                tooltip.hide()
            },
});
}

function getEventForStudent(listofevents)
{
	var obj = JSON.parse(listofevents);
	var eventsArray=[];
	 for(var i=0;i<obj.length;i++){
		 var event={};
		 var startDate = new Date(obj[i].startDate);
		 var endDate = new Date(obj[i].endDate);
		 var startFormatDate = ((startDate.getFullYear() > 10) ? startDate.getFullYear() : "0" + startDate.getFullYear()) + "-" 
		 + (((startDate.getMonth() + 1) >= 10) ? (startDate.getMonth() + 1) : "0" + (startDate.getMonth() + 1)) + "-" 
		 + 
		 ((startDate.getDate() >= 10) ? startDate.getDate() : "0" + startDate.getDate());

		 var endFormatDate = ((endDate.getFullYear() > 10) ? endDate.getFullYear() : "0" + endDate.getFullYear()) + "-" 
		 + (((endDate.getMonth() + 1) >= 10) ? (endDate.getMonth() + 1) : "0" + (endDate.getMonth() + 1)) + "-" 
		 + 
		 ((endDate.getDate() >= 10) ? endDate.getDate() : "0" + endDate.getDate());

		 event.id=obj[i].calendarEventDetailId;
		 event.title=obj[i].name;
		 event.start=startFormatDate;
		 event.end=endFormatDate;
		 event.color=obj[i].color;
		 eventsArray.push(event);
     }
	 
	 $('#StudentCalendarEvent').fullCalendar({
		    // put your options and callbacks here
		    header: {
		        left: 'prev,next today',
		        center: 'title',
		        right: 'month,listMonth'
		    },
		    navLinks: false, // can click day/week names to navigate views
		    businessHours: true, // display business hours
		    editable: false,
		    selectable: true,
		    hiddenDays: [0],
		    events: eventsArray,
		    eventMouseover: function(calEvent, jsEvent) {
		        var tooltip = '<div class="tooltipevent" style="width:auto;height:auto;color:#fff;background:#333;position:absolute;z-index:10001;padding:10px 10px 10px 10px;border-radius:5px;line-height: 100%;">' + calEvent.title + '</div>';

		        var $tooltip = $(tooltip).appendTo('body');

		        $(this).mouseover(function(e) {
		            $(this).css('z-index', 10000);
		            $tooltip.fadeIn('500');
		            $tooltip.fadeTo('10', 1.9);
		        }).mousemove(function(e) {
		            $tooltip.css('top', e.pageY + 10);
		            $tooltip.css('left', e.pageX + 10);
		        });
		    },
		    eventMouseout: function(calEvent, jsEvent) {
		        $(this).css('z-index', 8);
		        $('.tooltipevent').remove();
		    },
		    eventResizeStart: function () {
		                tooltip.hide()
		            },
		            eventDragStart: function () {
		                tooltip.hide()
		            },
		            viewDisplay: function () {
		                tooltip.hide()
		            },
		});
}
function manageEvent(evnt_startdate,evnt_enddate,sdate,edate) {
	calendareventdat= $('#endDate').val();
    $('#startDate').val(sdate);
    $('#endDate').val(edate);
    $('#sDate').val(evnt_startdate);
    $('#eDate').val(evnt_enddate);
    // $('.form_date').datetimepicker("setDate", new Date());
    initiateDate();
}

function initiateDate() {
    $('.form_date').datetimepicker({
        weekStart: 1,
        todayBtn: 1,
        autoclose: 1,
        todayHighlight: 1,
        startView: 2,
        minView: 2,
        forceParse: 0,
        showClose: true,
    });
    // .datetimepicker("setDate", new Date());
}

function beforeCalendarEventSave(formData){
	var x=formData.id;
	if(x==0){
		$('#coeId').val(calendarofeventsid);
	}
	
		 var startDate = new Date($('#endDate').val());
		 startDate.setDate(startDate.getDate()+1 ); 
		 
		 var endDate=((startDate.getFullYear() > 10) ? startDate.getFullYear() : "0" + startDate.getFullYear()) + "-" 
		 + (((startDate.getMonth() + 1) >= 10) ? (startDate.getMonth() + 1) : "0" + (startDate.getMonth() + 1)) + "-" 
		 + 
		 ((startDate.getDate() >= 10) ? startDate.getDate() : "0" + startDate.getDate());
		 $('#endDate').val(endDate);
	
	
}



function handleCalendarEvent(type, controllerMode, actionType, id, selectedData, callBack) {
	
	bgCurtain();
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			menuId : this.menuId,
			id : id,
			instId : $('#instId').val(),
			calenderOfEventsId : $('#calenderOfEventsId').val()
	};

	var title = getDialogMessage(controllerMode, actionType, id, selectedData);
	doAjaxCall(this.url, 'GET', formData, function(data) {
		handleCalendarEventEditShow(formData, id, data, title.title, function() {
//			manageEvent(startDate,endDate);
		});
		removeBgCurtain();
		if(callBack  &&  typeof callBack==='function' ) {
			callBack();
		}
	});
}


function handleCalendarEventEditShow(formData, id, data, title, callBack) {
	var buttons = [];
	if(id!=0){
		 buttons = [
		   			{
		   				type : "button",
		   				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true'></span>Save",
		   				className : "btn-sm btn-default",
		   				callback : function(e) {
		   					if (!$("#genericSave").valid())
		   						return false;
		   					
		   					beforeCalendarEventSave(formData);
		   					return handleCalendarEventSave(formData, title);
		   				}
		   			},
		   			{
		   				type : "button1",
		   				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true'></span>Delete",
		   				className : "btn-sm btn-default",
		   				callback : function(e) {
		   					getConfirmDialog(title, "Are you sure you want to Delete ? "+title, function() {
		   						return handleCaldendarEventDelete(formData,id);
		   					}, function() {
		   						
		   					});
		   					
		   					
		   				}
		   		},
		   			{
		   				type : "cancel",
		   				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
		   				className : "btn-sm btn-default",
		   				callback : null
		   			} ];
	}else{
		buttons = [
					{
						type : "button",
						label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true'></span>Save",
						className : "btn-sm btn-default",
						callback : function(e) {
							if (!$("#genericSave").valid())
								return false;
							
							beforeCalendarEventSave(formData);
							return handleCalendarEventSave(formData, title);
						}
					},
					
					{
						type : "cancel",
						label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
						className : "btn-sm btn-default",
						callback : null
					} ];
	}
	
	
	getModalDialog(
			'large',
			title,
			data,
			buttons,
			function() {
				eval(this.url
						+ "(formData.controllerMode,formData.actionType,formData.id,formData.selectedData,true);");
				if(callBack  &&  typeof callBack==='function' ){
					callBack();
				}
				
			});
}

function handleCaldendarEventDelete(form,id){
	var formData = {
			controllerMode : form.controllerMode,
			actionType : 39,
			menuId : form.menuId,
			id : form.id
		};
	var url="instituteApp";
	
	doAjaxCall(url, 'POST', formData, function(data) {
		var callBack = false;
		var dataArray = data.split("_");
		var status = dataArray[0].toUpperCase();
		var statusResp = dataArray[1];
		if (status=="SUCCESS") {
			callBack = true;
			showMessage("Successfully Deleted", "success");
			
			$('#calendar').fullCalendar( 'removeEvents',form.id);
				
		} else if (status == "ERROR") {
			
			showMessage(statusResp, "error");
		}
		
	});
	return false;
	
}
function handleCalendarEventSave(formData, title) {
	var formContext = $("#genericSave");
	var controllerMode = parseInt($('#controllerMode').val());
	var actionType = parseInt($('#actionType').val());
	var id = 0;
	var selectedData = 0;
	var postData = formContext.serializeArray();
	var formURL = formContext.attr("action");
	var formData = new FormData(formContext[0]);
	formData.append("menuId",this.menuId);
	var that = this;

	doAjaxCall(formURL, 'POST', formData, function(data) {
		var callBack = false;
		var dataArray = data.split("_");
		var status = dataArray[0].toUpperCase();
		var statusResp = dataArray[1];
		if (data) {
			callBack = true;
			showMessage("Successfully Saved", "success");
			/* $('#calendar').html(''); */
			modalDialog.modal('hide');
			calenderAddEvent(data);
			// fullcalendar(data);
			// $('#calendar').fullCalendar( 'refetchEvents' );
				
				// $("#menuTab_" + that.menuId).trigger("click");
				// handle(2,7030,28,"manageDataId","Calendar Of
				// Events:selectedData");
				
		} else if (status == "ERROR") {
			$("[id^=save-span]").parent().removeAttr('disabled');
			showMessage(statusResp, "error");
		}
		
	}, false, false);
	return false;
}
function handleCalendar(controllerMode, actionType, id, selectedData){
	this.formErrorList=[];
	var buttonName = $("a:focus").text();
	var formData = {
		controllerMode : parseInt(controllerMode),
		actionType : parseInt(actionType),
		id : id,
		selectedData : selectedData,
		menuId : this.menuId
	};
	var buttons = {};
	var buttons = [ {
		type : "cancel",
		label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
		className : "btn-default",
		callback : null
	} ];
	var genTitile = selectedData;
	if (!genTitile)
		genTitile = "";

	var title = "" + genTitile + " " + buttonName;

	doAjaxCall(this.url, 'get', formData, function(data) {
		getModalDialog('large', title, data, buttons, function() {
			
			 eval(this.url + "(controllerMode,actionType,id,selectedData);");
			 formData.actionType=29;
			 doAjaxCall(this.url, 'get', formData, function(data){
				 
				 fullcalendar(data);
				 calendarofeventsid=id;
			 });

		});

	});
}
function calenderAddEvent(data){
	
	var dataArray = data.split("_");
	var startDate= new Date(dataArray[3]);
	var endDate=new Date(dataArray[4]);
	var startFormatDate=((startDate.getFullYear() > 10) ? startDate.getFullYear() : "0" + startDate.getFullYear()) + "-" 
	 + (((startDate.getMonth() + 1) >= 10) ? (startDate.getMonth() + 1) : "0" + (startDate.getMonth() + 1)) + "-" 
	 + 
	 ((startDate.getDate() >= 10) ? startDate.getDate() : "0" + startDate.getDate());

	 var endFormatDate = ((endDate.getFullYear() > 10) ? endDate.getFullYear() : "0" + endDate.getFullYear()) + "-" 
	 + (((endDate.getMonth() + 1) >= 10) ? (endDate.getMonth() + 1) : "0" + (endDate.getMonth() + 1)) + "-" 
	 + 
	 ((endDate.getDate() >= 10) ? endDate.getDate() : "0" + endDate.getDate());
	
	 eventData = {
			 id:dataArray[1],
             title: dataArray[2],
             start: startFormatDate,
             end: endFormatDate,
             color: dataArray[5]
         };
	 $('#calendar').fullCalendar( 'removeEvents',eventData.id);
	 $('#calendar').fullCalendar('renderEvent', eventData, true);
}

function genericComboBoxFilterByText(selectBox,name,class_name) {
    return selectBox.each(function() {
        var $select = selectBox;
        var options = [];
        $($select).find('option').each(function() {
            options.push({value: $(this).val(), text: $(this).text()});
        });
        
        $($select).data('options', options);
        var $this=$.fn.parents($select);
        
        // $($select).bind('click mouseup mousedown',function(e,t){
        	var listId='dataListComboBox'+name;
        	var $dataListComboBoxinput=listId+name+'inputId';
        	 var $this=$("<div>");
        	 
        	 if($('#'+$dataListComboBoxinput).length>0)
        		 {
        		 $('#'+$dataListComboBoxinput).remove();
        		 $('#'+listId).remove();
        		 }
        	$select.before($this);
            $select.appendTo($this);
            
            var $input   = $('<input class="'+class_name+'" name="'+$dataListComboBoxinput+'" autocomplete="off" required />');
            $this.after($input);
            var $dataList=$('<datalist>');
            $input.after($dataList);
            $($input).attr('list',listId);
            $($input).attr('id',$dataListComboBoxinput);
            $($dataList).attr('id',listId);
           
        	var options = $($select).data('options');
        	var dataListOptions='';
        	$.each(options, function(i) {
                var option = options[i];
               dataListOptions +='<option data-value="'+option.value+'" value="'+option.text+'" data-selected></option>';
            });
        	$($select).hide();
        	$(getIdFromString(listId)).html(dataListOptions);
        	
        	
        	 var  flag=false;
        	$(getIdFromString($dataListComboBoxinput)).on('focusout', function () {
        	    var val = this.value;
        	    var $data_value;
        	     $('#'+listId+' option').each(function(){
        	    	 $data_value=$(this).attr('data-value');
        	    	 if(this.value === val){
        	    		$(selectBox).val($data_value).change();
        	    		flag=false;
              	       return false;
        	    	 }
        	    	 else if(this.value != val){
        	    		flag=true;
        	    	 }
        	    });
        	     
        	     if(flag){
         			// setTimeout(showMessage("Typed value should be in the
					// list", "error"), 5000);
         			 $(getIdFromString($dataListComboBoxinput)).val('');
         			 $(selectBox).val('').change();
         		}
        	   
        	});
        	
        	if($($select).find(' option:selected').length>0)
        	{
        		$(getIdFromString($dataListComboBoxinput)).val($($select).find(' option:selected').text());
        		$('#'+listId+' option').attr('data-selected',$($select).find(' option:selected').val());
        	}
    });
};
function getIdFromString(string){
	return '#'+string;
}

function createCalendarEvent() {
	$("#event").off('click');
	$("#event").on('click',function() {
		if($("#event").is(':checked')) {
			$("#eventCreate").css('display', 'block');
			document.getElementById('event').value=1;
			$("#dataListComboBoxcalendarEventIdcalendarEventIdinputId").attr('required', false);
		} else {
			$("#eventCreate").css('display', 'none');
			$("#dataListComboBoxcalendarEventIdcalendarEventIdinputId").attr('required', true);
			document.getElementById('event').value=0;
		}
	});
}
// ////////////////End Event Calendar/////////////////||||||| .r11601

// /////Change Institute/////////////
function handleChangeInstitute(){
	
	if($('#institutionId').val()==null){
		showMessage("Select Institute", "error");
		return false;
	}
		
	var formData = {
			controllerMode : 700,
			actionType : 1,
			id : $('#institutionId').val(),
			selectedData : "",
			menuId : this.menuId
		};
	doAjaxCall('appAdmin', 'POST', formData, function(data) {
		var callBack = false;
		var dataArray = data.split("_");
		var status = dataArray[0].toUpperCase();
		var statusResp = dataArray[1];
		if (status == "SUCCESS") {
			callBack = true;
			showMessage(statusResp, "success");
			
		} else if (status == "ERROR") {
			$("[id^=save-span]").parent().removeAttr('disabled');
			showMessage(statusResp, "error");
		}
		$("#menuTab_" + menuId).trigger("click");
	});

	return false;
}


// ////////End Change Institute/////////////


// //--- Start TimeTable-----////

function handleTimeTableArray(thisVal,thisId){
	 var arr=[];
	 if($("#tTArray").val())
		  thisTimtTableReq.timeTableArray= JSON.parse($("#tTArray").val());
		 var idArray = thisId.split("_");
		 var idStartWith=idArray[0];
		 var timeSlot=parseInt(idArray[1]);
		 var currentRow=parseInt(idArray[2]);
		 var currentRowSub = idArray[3] ? parseInt(idArray[3]) : 0
		var selectedText="";	 
		 var valueStartWith="";
		 if(currentRowSub!=0)
			 idStartWith=idStartWith+"_"+currentRowSub; 
		 
		 if(idStartWith.startsWith("ttFaculty")){
			 selectedText=thisVal;	 
			 var respArr=getTTSelectedDataFromDataList(timeSlot,currentRow,currentRowSub,thisVal,thisId);
			 if(respArr.length!=0){
				 thisVal=respArr[0];
				 selectedText=respArr[1];
			 }else{
				 thisVal="";
			 }
		 }else{
			 selectedText=($("#"+thisId+" option:selected").html()).toUpperCase();	 
		 }
		 // //--- Start Store selcted values into array in TimeTable-----////
		 
		 var tempDetailsId=$("#mngTTsf_"+dayVal+"_"+timeSlot).attr('data-tempDetailsId');
		 var insertRow= "ttMngRow_"+dayVal+"_"+timeSlot+"_"+currentRow;
		
		
		 
		 if(thisTimtTableReq.timeTableArray.hasOwnProperty(insertRow)){
			arr=thisTimtTableReq.timeTableArray[insertRow];
			if(idStartWith.startsWith("ttSubject")){
				var batch= $("#ttBatch_"+timeSlot+"_"+currentRow).val();
				checkBatch(arr);
			}
			for(var i in arr){
				if(currentRowSub!=0)
					valueStartWith=arr[i].split("_")[0]+"_"+arr[i].split("_")[1];
				else
					valueStartWith=arr[i].split("_")[0];
				
				if(valueStartWith.startsWith(idStartWith)){
					arr.splice(i,1)
					break;
				}
			}
		}
		if(thisVal!='' && thisVal !=0)
			arr.push(idStartWith+"_"+thisVal);
		
		
		 deleteRecord(arr,'tempDetailsId');
		 deleteRecord(arr,'day');
		 deleteRecord(arr,'isModified');
		 deleteRecord(arr,'isHistory');
		 
		 if(arr.length>0)
			  arr.push("isModified"); 
	 	if(arr.length==0 && checkExistingTTFacultySubject(insertRow)){
	 		 // check data removed from existing(databse) array
	 			 arr.push("isHistory");
	 			 arr.push("isModified"); 
	 		}	

	 if(arr.indexOf("tempDetailsId_"+tempDetailsId)<0)
		 arr.push("tempDetailsId_"+tempDetailsId);
	 if(arr.indexOf("day_"+dayVal)<0)
		 arr.push("day_"+dayVal); 
		 
	 
	 thisTimtTableReq.timeTableArray[insertRow]=arr;
	 
	// //--- End Store selcted values into array in TimeTable-----////
	 
	 
	// //--- Start Store selcted text into array in TimeTable-----////
	 
	 arr=[]; 
	 valueStartWith=""
	 insertRow="ttDivText_"+dayVal+"_"+timeSlot+"_"+currentRow;
	 
	 if(thisTimtTableReq.timeTableArray.hasOwnProperty(insertRow)){
		arr=thisTimtTableReq.timeTableArray[insertRow];
		if(idStartWith.startsWith("ttSubject")){
			checkBatch(arr);
		}
		for(var i in arr){
			if(currentRowSub!=0)
				valueStartWith=arr[i].split("_")[0]+"_"+arr[i].split("_")[1];
			else
				valueStartWith=arr[i].split("_")[0];
			if(valueStartWith.startsWith(idStartWith)){
				arr.splice(i,1)
				break;
			}
		}
	}

	 if(thisVal!='' && thisVal !=0) 
		arr.push(idStartWith+"_&&"+selectedText);
	 
 thisTimtTableReq.timeTableArray[insertRow]=arr;
 
	// //--- End Store selcted text into array in TimeTable-----////
 
  $("#tTArray").val(JSON.stringify(thisTimtTableReq.timeTableArray));
  displaySelectedInfoOnTimeTable(timeSlot,2);
  
}

function displaySelectedInfoOnTimeTable(selectedTimeSlot,displayType){
	var selectedDayandTimeId="";
	var lastselectedDayandTimeId="";
	var mainDiv="";
		 if (displayType == 2) {
			  thisTimtTableReq.timeTableArray= JSON.parse($("#tTArray").val());
		 }else{
			 thisTimtTableReq.timeTableArray= timeTableJson;
			 $("#tTArray").val(JSON.stringify(thisTimtTableReq.timeTableArray));
		 }
		 if(thisTimtTableReq.timeTableArray){
		   var sortArray=Object.keys(thisTimtTableReq.timeTableArray).sort()
		   for ( var i in sortArray) {
			   if(sortArray[i].startsWith("ttDivText")){
				   var mainArray=thisTimtTableReq.timeTableArray[sortArray[i]];
				   var rowArray=sortArray[i].split("_");
				   var existingDay=rowArray[1];
				   var timeSlotAt=rowArray[2];
				   var curretnPositionAt=rowArray[3];
				   var display=false;
				   if (displayType == 2) {					  
					   if(timeSlotAt == selectedTimeSlot)
						 display = true;
					   selectedDayandTimeId="ttDivText_"+dayVal+"_"+selectedTimeSlot;
				   		} else {
				   		display = true;
						dayVal=existingDay;
						selectedTimeSlot=timeSlotAt;
						 selectedDayandTimeId="ttDivText_"+dayVal+"_"+selectedTimeSlot;
						if(selectedDayandTimeId!=lastselectedDayandTimeId){
							mainDiv="";
							lastselectedDayandTimeId=selectedDayandTimeId
						}
				   }
				   selectedDayandTime="ttDivText_"+dayVal+"_"+selectedTimeSlot+"_"+curretnPositionAt;

				   if(existingDay==dayVal && display==true){
					   var sbjRowDiv="<div class='sbj_row' id='"+selectedDayandTime+"'>";
					   var noData="<div class='sbj_row'><span>no schedule</span></div>";
					   var facultyDiv ="";
					   var batchDiv ="";
					   var subDiv ="";
					   mainArray.sort();
					   for ( var j in mainArray) {
						   if(mainArray[j].startsWith("ttSubject")){
							   var subject=mainArray[j].split("&&")[1];
							   if(subject!='' && typeof subject != 'undefined')
								  subDiv += "<span>"+subject+"</span>";
						   }else if(mainArray[j].startsWith("ttFaculty")){
								   var facultyArray= mainArray[j].split("&&")
								 	if(facultyArray[1]!='' && typeof facultyArray[1] != 'undefined')
								 	 facultyDiv += facultyArray[1]+", "
						   }else if(mainArray[j].startsWith("ttBatch")){
							   var batch=mainArray[j].split("&&")[1];
							   if(batch!='' &&  batch != null && batch!="0"){
								    batchDiv +=batch+",";
							   }
						   }
					   }
					   if(facultyDiv)
					   facultyDiv="<span class='fcltlist'>"+facultyDiv+"</span>";
					   if(batchDiv)
					   batchDiv="<span class='bchlist'>"+batchDiv+"</span>";
					  
					   
					   var spanDiv=subDiv+facultyDiv+batchDiv;
					   	sbjRowDiv +=spanDiv+"</div>";
						   if(timeSlotAt == selectedTimeSlot){
							   mainDiv +=sbjRowDiv;
							   document.getElementById(selectedDayandTimeId).innerHTML="";
							   document.getElementById(selectedDayandTimeId).innerHTML=mainDiv;
						   }else{
							   selectedTimeSlot=timeSlotAt;
							   mainDiv="";
						   }  
				   }
				   if($("#"+selectedDayandTimeId).html()=="")
				  	 document.getElementById(selectedDayandTimeId).innerHTML=noData;
			   }
			   }
		  
		   
	 }
}

function getDate(val){
	if(typeof val != 'undefined')
	return val.slice(0, 5)+val.slice(8);
}


function timeTableReset() {
	var formData = {
		controllerMode : 8030,
		actionType : 45,
		sectionId : parseInt($('#section').val()),
		batchclassid:localStorage.getItem("batchClassId"),
		menuId : this.menuId,
		roomId :  parseInt($("#rooms").val()),
	};
	if($('#tTArray').val()=="{}"){
		showMessage('Select at least one schedule to reset the TimeTable ', "error");
		return;
	}
	getConfirmDialog(
			"Reset TimeTable",
			" Do you want to Reset the TimeTable. Are you sure ?",
			function() {
		$('#timeTableReset').prop('disabled',true);
		doAjaxCall(this.url, 'GET', formData, function(data) {
		getTimeTable();
		$('#timeTableReset').prop('disabled',false);
		var dataArray = data.split("_");
		var status = dataArray[0].toUpperCase();
		var statusResp = dataArray[1];
		if (status == "SUCCESS") {
			showMessage(statusResp, "success");
		} else if (status == "ERROR") {
			showMessage(statusResp, "error");
		}
	});
		
	});
	
}

function saveTimeTable() {
	
	var fSArray=checkValidDataInTimeTable();
		var respType=fSArray[0];
		var facultySubjectArray=fSArray[1];
		if(respType==1){
		if(facultySubjectArray=="{}"){
			showMessage('Select at least one Subjects and Faculty', "error");
			return;
			}
		}else if(respType==2){
			 var dayErr=days[--(sf.split("_")[1])];
			 var timeErr=timeArray[sf.split("_")[2]];
			if(facultySubjectArray=="{}"){
				showMessage('Select at least one Subject and Faculty in '+timeErr+'-('+dayErr+')', "error");
				return;
				}
		}else if(respType==3){
			showMessage('No changes happen in this section', "error");
			return;
		}
		facultySubjectArray=getEntireDaywithTimeSlotData(facultySubjectArray);
		var formData = {
				controllerMode : 8030,
				actionType : 14,
				classBatchSectionId : $("#classBatchSectionId").val(),
				batchclassid:localStorage.getItem("batchClassId"),
				roomId :  parseInt( parseInt($("#rooms").val())),
				menuId : this.menuId,
				tTArray:facultySubjectArray,
			};
		$("#saveTT").addClass('disabled');
		 bgCurtain();
		doAjaxCall(this.url, 'POST', formData, function(data) {
		var dataArray = data.split("_");
		var status = dataArray[0].toUpperCase();
		var statusResp = dataArray[1];
		if (status == "SUCCESS") {
			showMessage(statusResp, "success");
			ttDataBaseArray=thisTimtTableReq.timeTableArray;
			displayTTLastFinalizedDate(formatDate(new Date(),"DD-MMM-YYYY hh:mm A"));
		} else if (status == "ERROR") {
			showMessage(statusResp, "error");
			$("#saveTT").removeClass('disabled');
		}
		removeBgCurtain();
		});
	
}

function checkValidDataInTimeTable(){
	
		var getArr=[];
		var resp=false;
		var respType=1;
		 var facultySubjectResp={};
		 if($("#tTArray").val()){
				thisTimtTableReq.timeTableArray= JSON.parse($("#tTArray").val());
				if(!checkIsAnyModifiedTTSF()){
				 		getArr=[];
				 		respType=3;
						getArr.push(respType);
						getArr.push(JSON.stringify(facultySubjectResp));
						return getArr;
				}
					 for(sf in thisTimtTableReq.timeTableArray){
							 getArr=thisTimtTableReq.timeTableArray[sf];
							 if(sf.startsWith("ttMngRow") && isExist(getArr,'isModified')){
								 if(isExist(getArr,'ttSubject') && isExist(getArr,'ttFaculty')){
									 resp=true;
								 }else if(isExist(getArr,'isHistory')){
									 resp=true;
								 }else{
									 resp=false;
								 }
								 if(resp){
									 facultySubjectResp[sf]=getArr;
								 }else{
									 facultySubjectResp={};
									 respType=2;
									 getArr=[];
									 getArr.push(respType);
									 getArr.push(JSON.stringify(facultySubjectResp));
									 getArr.push(sf);
									 return getArr;
								 }
							 }
					 }	

		 }
		 		getArr=[];
		 		getArr.push(respType);
		 		getArr.push(JSON.stringify(facultySubjectResp));
			  return getArr;
}



function checkExistingTTFacultySubject(idArray){
	var resp=false;
	if (!isEmpty(ttDataBaseArray)){
	 if(ttDataBaseArray.hasOwnProperty(idArray)){
		 var sArr=ttDataBaseArray[idArray];
			if(isExist(sArr,'ttSubject') && isExist(sArr,'ttFaculty')){
				 resp=true;
		 }
		}
	}
	return resp;
}

function getEntireDaywithTimeSlotData(facultySubjectArray){
	facultySubjectArray=JSON.parse(facultySubjectArray);
 for(var sf in facultySubjectArray){
	 var modifiedDayWithTime=sf.slice(0,-2);
	 for(var tt in thisTimtTableReq.timeTableArray){
		 var unModifiedDayWithTime=tt.slice(0,-2);
		 if(unModifiedDayWithTime==modifiedDayWithTime){
			var getArr=thisTimtTableReq.timeTableArray[tt];
				if(!isExist(getArr,'isModified')){
					getArr.push("isModified");
					facultySubjectArray[tt]=getArr;
				}
		 }
		 
	 }
 }
 return JSON.stringify(facultySubjectArray)
}

function checkIsAnyModifiedTTSF(){
	var resp=false;
	 for(var s in thisTimtTableReq.timeTableArray){
			 if(isExist(thisTimtTableReq.timeTableArray[s],'isModified')){
				 return true;
			 }
	 }
	if (!isEmpty(ttDataBaseArray) && !resp){
		resp= false;
	 }else{
	   resp= true;
	 }
	return resp;
}


function finalizeTimeTable() {
	var formData = {
		controllerMode : 8030,
		actionType : 57,
		sectionId : parseInt($('#section').val()),
		menuId : this.menuId,
		status:1
	};
	if(!checkIsFinalizedDataExist()){
		showMessage('Select at least one schedule to finalize the Timetable', "error");
		return;
	}
	getConfirmDialog(
			"Finalize TimeTable",
			" Do you want to Finalize the TimeTable. Are you sure ?",
			function() {
		$('#getTimeTable').prop('disabled',true);
		doAjaxCall(this.url, 'GET', formData, function(data) {
		$('#finalizeTT').prop('disabled',false);
		var dataArray = data.split("_");
		var status = dataArray[0].toUpperCase();
		var statusResp = dataArray[1];
		if (status == "SUCCESS") {
			showMessage(statusResp, "success");
			displayTTLastFinalizedDate(formatDate(new Date(),"DD-MMM-YYYY hh:mm A"));
		} else if (status == "ERROR") {
			showMessage(statusResp, "error");
		}
	});
		
	});
}


function checkIsFinalizedDataExist(){
	var resp=false;
	 for(var s in thisTimtTableReq.timeTableArray){
		 if(isExist(thisTimtTableReq.timeTableArray[s],'ttSubject') && isExist(thisTimtTableReq.timeTableArray[s],'ttFaculty')){
				 return true;
			 }
	 }
	return resp;
}

// //--- End TimeTable-----////


// //--- Start FacultySubjectsAllocation-----////

function isExist(arr,val){
	var exist=false;
	for(var i in arr){
		if(arr[i].startsWith(val)){
			exist=true;
			break;
		}
	}
	return exist;
}
function deleteRecord(arr,val){
	for(var i in arr){
		if(arr[i].split("&&")[0].startsWith(val)){
			arr.splice(i,1);
			break;
		}
	}
}
function facultySubjectsAttachedEvents(){
	$("[data-parent='sf']").on('input',function(){
		var thisReq=$(this);
		var enteredValue = $(thisReq).val();
	    var currentDataList=$(thisReq).attr('list');
	    var facultyValue="";
	    var respVal=showDataList(enteredValue,currentDataList,$(thisReq).attr('id'));
	    if(respVal){
	    	enteredValue=respVal;
	    }
	   $('#'+currentDataList + ' option').filter(function() {
		  			if($(this).val() === enteredValue && enteredValue){
		  				facultyValue=$(this).attr('data-value');
		  				$('#'+currentDataList).empty();
		  				return facultyValue;
		  		}
	       });	  
	   addOrRemoveFacultySubjectsInArray(facultyValue,currentDataList);
	});

}
function showDataList(value,dataListId,inuptId)
{
	$('#'+dataListId).empty();
	var rep="";
	if(value){
	var name=value.trim().toUpperCase();
	var count=0;
		for(var f in facultyJson){
			if(f.indexOf(name)>=0){
				rep+=facultyJson[f];
				count++;
				if(count==10)break;
			}
	}
	}
			$('#'+dataListId).append(rep);
		  if(name && name.indexOf("@")>=0){
			  var selectedVal=$('#'+dataListId+" option").val();
			   if(selectedVal){
				   $("#"+inuptId).val(selectedVal);
				   return $("#"+inuptId).val();  
			   }
				
		  }
	  
}
var facultyJson="";
var facultyInfoJson="";
var facultyValue="";
function getFacultyBySearch(where,id){
	if(!where)
	  return;
		var formData = {
				menuId:this.menuId,
				where:where,
				id:id,
			};
			doAjaxCall('/Academy/a/getFacultyBySearch', 'GET', formData, function(data) {
			if(data){
				facultyJson="";
				facultyJson=JSON.parse(data);
				facultyInfoJson=facultyJson;

				var rep="";
				var finalJson={};
				for(i=0;i<facultyJson.length;i++){
					var email="";
					var name=facultyJson[i].FacultyDeptName.trim().toUpperCase();
					if(facultyJson[i].Email){
						var email=facultyJson[i].Email.trim().toUpperCase();	
						email=email.replace(/\s\s+/g, ' ');
					}
					name=name.replace(/\s\s+/g, ' ');
					var rep="<option data-value="+facultyJson[i].UserId+">"+name+"</option>";
					finalJson[name+" "+email]=rep;
					}
				facultyJson=finalJson;
			}
		});
				
}
function addOrRemoveFacultySubjectsInArray(value,currentDataList){
	 if($("#facultySubjectArray").val())
		 thisFacultySubjectsReq.facultySubjectsArray= JSON.parse($("#facultySubjectArray").val());
	var splitId=currentDataList.split("_");
	var currentId=splitId[0];
	var currentSectionId=splitId[1];
	var currentSubjectId=splitId[2];
	 $("#saveFS_"+currentSectionId).removeClass('disabled');
	 var arr=[]; 
	 if(thisFacultySubjectsReq.facultySubjectsArray.hasOwnProperty(currentSectionId)){
		 thisFacultySubjectsReq.subjectsArray=thisFacultySubjectsReq.facultySubjectsArray[currentSectionId];
		 if(thisFacultySubjectsReq.subjectsArray.hasOwnProperty(currentSubjectId)){
			 arr= thisFacultySubjectsReq.subjectsArray[currentSubjectId];
			 deleteRecord(arr,currentId);
			 deleteRecord(arr,currentId);
			 deleteRecord(arr,'isModified');
			 deleteRecord(arr,'isHistory');
		 }
		}else{
			thisFacultySubjectsReq.subjectsArray={};
		}
	 if(value!='' && value !=0){
		 arr.push(currentId+"&&"+value+"&&1&&0");
	 }
	 if(arr.length>0)
	  arr.push("isModified"); 
	 // check data removed from existing(databse) array
	if(arr.length==0 && checkExistingFacultySubject(currentSectionId,currentSubjectId)){
			 arr.push("isHistory");
			 arr.push("isModified"); 
		}	 
	thisFacultySubjectsReq.subjectsArray[currentSubjectId]=arr;
	thisFacultySubjectsReq.facultySubjectsArray[currentSectionId]=thisFacultySubjectsReq.subjectsArray;
	 $("#facultySubjectArray").val(JSON.stringify(thisFacultySubjectsReq.facultySubjectsArray));
}

function checkExistingFacultySubject(currentSectionId,currentSubjectId){
	var resp=false;
	if (!isEmpty(facultySubJson)){
		 modifiedFacultySubjectsArray = facultySubJson;
	 if(modifiedFacultySubjectsArray.hasOwnProperty(currentSectionId)){
		 var modifiedSubjectsArray=modifiedFacultySubjectsArray[currentSectionId];
		 if(modifiedSubjectsArray.hasOwnProperty(currentSubjectId)){
			var sArr= modifiedSubjectsArray[currentSubjectId];
			 if(isExist(sArr,'sfAnchor') && isExist(sArr,'sfFaculty')){
				 resp=true;
			 }
		 }
		}
	}
	return resp;
}

function resetSavedFacultySubjectArray(currentSectionId){
		 var resp=false;
		 delete facultySubJson[currentSectionId];
		 var existingSubjectsArray=thisFacultySubjectsReq.facultySubjectsArray[currentSectionId];
		 for(ss in existingSubjectsArray){
			 var arryOfFS=existingSubjectsArray[ss];
			 if(isExist(arryOfFS,'sfAnchor') && isExist(arryOfFS,'sfFaculty')){
				 deleteRecord(arryOfFS,'isModified');
				 deleteRecord(arryOfFS,'isHistory');
				 existingSubjectsArray[ss]=arryOfFS;
				 facultySubJson[currentSectionId]=existingSubjectsArray;
			 }else{
				 delete existingSubjectsArray[ss];
			 }
		 }
		
	return resp;
}
function saveFacultySubjects(idType,sectionId ,sectionName) {
	var fSArray=getFacultySubjectFromArray(sectionId,1);
		var respType=fSArray[0];
		var facultySubjectArray=fSArray[1];
		var fsA=$('#facultySubjectArray').val();
		if(respType==1){
		if((fsA==""|| facultySubjectArray=="{}")){
			showMessage('Select at least one Subjects,Anchor and Faculty in '+sectionName, "error");
			return;
			}
		}else if(respType==2){
			var subjectErr=subjectsJson[fSArray[2]].split("&&")[0];
			if(fsA==""|| facultySubjectArray=="{}"){
				showMessage('Select at least one Anchor and Faculty in '+subjectErr+'-('+sectionName+')', "error");
				return;
				}
		}else if(respType==3){
				showMessage('No changes happen in '+sectionName, "error");
				return;
			}
		var formData = {
				controllerMode : 6740,
				actionType : 48,
				sectionId : parseInt(sectionId),
				menuId : this.menuId,
				facultySubjectArray:facultySubjectArray,
				sectionName:sectionName,
				idType:idType,
			};
		$("#resetFS_"+sectionId).addClass('disabled');
		$("#saveFS_"+sectionId).addClass('disabled');
		bgCurtain();
		doAjaxCall(this.url, 'POST', formData, function(data) {
		$("#resetFS_"+sectionId).removeClass('disabled');
		var dataArray = data.split("_");
		var status = dataArray[0].toUpperCase();
		var statusResp = dataArray[1];
		if (status == "SUCCESS") {
			showMessage(statusResp, "success");
			resetSavedFacultySubjectArray(sectionId);
			displayFacultySubjectsSectionStatus();
		} else if (status == "ERROR") {
			showMessage(statusResp, "error");
			$("#saveFS_"+sectionId).removeClass('disabled');
		}
		removeBgCurtain();
	});
	
}



function getFacultySubjectFromArray(sectionId,type){
	var facultySubjectResp={};
	var getArr=[];
	var resp=false;
	var respType=1;
	 if($("#facultySubjectArray").val()){
		 thisFacultySubjectsReq.facultySubjectsArray= JSON.parse($("#facultySubjectArray").val());
			 if(thisFacultySubjectsReq.facultySubjectsArray.hasOwnProperty(sectionId)){
				 thisFacultySubjectsReq.subjectsArray=thisFacultySubjectsReq.facultySubjectsArray[sectionId];
				 if(type==2){ // check if this condition called by
								// resetFacultySubjects()
						getArr=[];
						getArr.push(respType);
				 		getArr.push(JSON.stringify(thisFacultySubjectsReq.subjectsArray));
				 		return getArr;
				 }
				 if(!checkIsAnyModifiedSubjects(sectionId)){
					 	getArr=[];
					 	respType=3;
				 		getArr.push(respType);
				 		getArr.push(JSON.stringify(facultySubjectResp));
				 		return getArr;
				 }
				 for(s in thisFacultySubjectsReq.subjectsArray){
					 if(thisFacultySubjectsReq.subjectsArray.hasOwnProperty(s)){
						 getArr=thisFacultySubjectsReq.subjectsArray[s];
						 if(isExist(getArr,'isModified')){
							 if(isExist(getArr,'sfAnchor') && isExist(getArr,'sfFaculty')){
								 resp=true;
							 }else if(isExist(getArr,'isHistory')){
								 resp=true;
							 }else{
								 resp=false;
							 }
							 if(resp){
								 facultySubjectResp[s]=getArr;
							 }else{
								 facultySubjectResp={};
								 respType=2;
								 getArr=[];
								 getArr.push(respType);
								 getArr.push(JSON.stringify(facultySubjectResp));
								 getArr.push(s);
								 return getArr;
							 }
						 }
					 }
					 
				 }	
				
			 
			 }
				}
	 		getArr=[];
	 		getArr.push(respType);
	 		getArr.push(JSON.stringify(facultySubjectResp));
		  return getArr;
	 }
	

function checkIsAnyModifiedSubjects(sectionId){
	var resp=false;
	 for(s in thisFacultySubjectsReq.subjectsArray){
		 if(thisFacultySubjectsReq.subjectsArray.hasOwnProperty(s)){
			 var subArr=thisFacultySubjectsReq.subjectsArray[s];
			 if(isExist(subArr,'isModified')){
				 return true;
			 }
		 }
	 }
	if (!isEmpty(facultySubJson) && !resp){
	if(typeof facultySubJson[sectionId]!='undefined' && !isEmpty(facultySubJson[sectionId])){
		resp= false;
	}else{
		resp= true;
		}
	}else{
	resp= true;
	}
	return resp;
}
function displaySelectedFacultySubjects(){
	var dispArr=[];
	if (!isEmpty(facultySubJson)){
		 thisFacultySubjectsReq.facultySubjectsArray = facultySubJson;
for ( var i in thisFacultySubjectsReq.facultySubjectsArray) {
	 thisFacultySubjectsReq.subjectsArray=thisFacultySubjectsReq.facultySubjectsArray[i];
	 for ( var s in thisFacultySubjectsReq.subjectsArray) {
		 dispArr=thisFacultySubjectsReq.subjectsArray[s];
		 dispArr.sort();
		 var anchor=1;
		 var faculty=1;
			for(var f in dispArr){
				var id=dispArr[f].split("&&")[0];
				var value=dispArr[f].split("&&")[1];
				if(id.startsWith('sfAnchor'+anchor+'Text')){
					anchor++;
					displayOrRemoveDataInDataList(id.slice(0,-4),value,i,s,1)
				}else if(id.startsWith('sfFaculty'+faculty+'Text')){
					faculty++;
					displayOrRemoveDataInDataList(id.slice(0,-4),value,i,s,1)
				}else if(id.startsWith('guestLectureText')){
					displayOrRemoveDataInDataList(id.slice(0,-4),value,i,s,1)
				}
				
			}
		 
	 }

}
$("#facultySubjectArray").val(JSON.stringify(thisFacultySubjectsReq.facultySubjectsArray));
}
}



function displayOrRemoveDataInDataList(id,value,i,s,type){
	// Here type is check, Is it add(type=1) or remove(type=2)
	$("[data-parent='sf']").each(function(){
		var thisReq=$(this);
	    var dataList=$(thisReq).attr('list');
	    var selectedDataList=id+"_"+i+"_"+s;
	    if(dataList===selectedDataList){
	    	if(type==1){
		    	$(thisReq).val(value.trim().toUpperCase());
	    	}else if(type==2){
		    	$(thisReq).val("");
	    	}
	    	 return false;
	    }
	})
	
	
}

function displayFacultySubjectsSectionStatus(){
	if(!$("#batchClassId").val() || !$("#deptId").val())
		return false;
	
		var formData = {
				menuId : this.menuId,
				url : this.url,
				controllerMode : 6740,
				actionType : 49,
				batchClassId:$("#batchClassId").val(),
				departmentId :$("#deptId").val(),
				subjectsArr:JSON.stringify(subjectsJson),
			};
		doAjaxCall(this.url, 'GET', formData, function(data) {
		$('#showSectionStatusDiv').html('');
		$('#showSectionStatusDiv').html(data);
		});
}

function resetFacultySubjects(idType,sectionId ,sectionName) {
	var formData = {
		controllerMode : 6740,
		actionType : 50,
		sectionId : parseInt(sectionId),
		menuId : this.menuId,
		sectionName:sectionName,
		idType:idType,
	};
	var resp=false;
	var fsA=$('#facultySubjectArray').val();
	if(fsA!=""){
		var fSArray=getFacultySubjectFromArray(sectionId,2);
		if(fSArray[1]=="{}"){
			resp=true;
			}	
	}else{
		resp=true;
	}
if(resp){
	showMessage('No selected data found in '+sectionName, "error");
	return;
}
	getConfirmDialog(
			"Reset "+sectionName,
			" Do you want to Reset "+sectionName+". Are you sure ?",
			function() {
			clearFacultySubjectsInSelectedSection(sectionId);
		$("#resetFS_"+sectionId).addClass('disabled');
		doAjaxCall(this.url, 'GET', formData, function(data) {
		$("#resetFS_"+sectionId).removeClass('disabled');
		var dataArray = data.split("_");
		var status = dataArray[0].toUpperCase();
		var statusResp = dataArray[1];
		if (status == "SUCCESS") {
			displayFacultySubjectsSectionStatus();
			showMessage(statusResp, "success");
			 delete facultySubJson[sectionId];
		} else if (status == "ERROR") {
			showMessage(statusResp, "error");
		}
	});
		
	});
	
}
function clearFacultySubjectsInSelectedSection(sectionId){
	 if($("#facultySubjectArray").val()){
		 thisFacultySubjectsReq.facultySubjectsArray= JSON.parse($("#facultySubjectArray").val());
			 if(thisFacultySubjectsReq.facultySubjectsArray.hasOwnProperty(sectionId)){
				 thisFacultySubjectsReq.subjectsArray=thisFacultySubjectsReq.facultySubjectsArray[sectionId];
				 for(s in thisFacultySubjectsReq.subjectsArray){
					 if(thisFacultySubjectsReq.subjectsArray.hasOwnProperty(s)){
						var dispArr=thisFacultySubjectsReq.subjectsArray[s];
						for(var val=1;val<=4;val++){
						displayOrRemoveDataInDataList('sfAnchor'+val,'',sectionId,s,2);
						displayOrRemoveDataInDataList('sfFaculty'+val,'',sectionId,s,2);
						displayOrRemoveDataInDataList('guestLecture','',sectionId,s,2);
						}
						 delete thisFacultySubjectsReq.facultySubjectsArray[sectionId];
						 $("#facultySubjectArray").val(JSON.stringify(thisFacultySubjectsReq.facultySubjectsArray));					
					 }
				 }	
				

				 }
				}
}
function getFacultySubjectBatchClassFn(type){
	var batchId=$("#batchId").val();
	var programId=$("#programId").val();
	var deptId=$("#deptId").val();

	if(!batchId || !programId || !deptId)
		return false;
	getCombobox('/Academy/a/i/batchClass/'+batchId+"/"+programId+"/"+deptId+"/"+1, 'batchClassId',null,null,function(){
	  	$('#batchClassId option[value!=""]:first').prop("selected",true);

	});
}

function getFacultySubjectBatchClassFnByInst(type){
	var batchId=$("#batchId").val();
	var programId=$("#prgramIdSearch").val();
	var deptId=$("#deptId").val();
	var instId=$("#instIdSearch").val();

	if(!batchId || !programId || !deptId || !instId)
		return false;
	getCombobox('/Academy/a/i/getBatchClass/'+batchId+"/"+programId+"/"+deptId+"/"+instId+"/"+1, 'batchClassId',null,null,function(){
	  	$('#batchClassId option[value!=""]:first').prop("selected",true);

	});
}

function getSectionsWithSubjectsSearch(controllerMode,actionType,id,searchType){
	if(!$("#batchClassId").val() || !$("#instIdSearch").val()){
		showMessage("Please select all are required fields", "error");
		return false;
	}
	 	bgCurtain();
		var formData = {
				menuId : this.menuId,
				url : this.url,
				controllerMode : controllerMode,
				actionType : actionType,
				batchClassId:$("#batchClassId").val(),
				departmentId :$("#deptId").val(),
				instId:$("#instIdSearch").val(),
			};
		doAjaxCall(this.url, 'GET', formData, function(data) {
		$('#showSectionWiseDiv').html('');
		$('#showSectionWiseDiv').html(data);
		displayFacultySubjectsSectionStatus();
		removeBgCurtain();
		});
		
	}

function setFacultySubjectsComboBox(bId,deptId){
	if(bId!=null && bId!=0){
		var formData = {
				batchClassId : bId,
				departmentId : deptId,
				menuId:this.menuId
			};
			doAjaxCall('/Academy/a/i/getSubjectsBasedOnBatchClass', 'GET', formData, function(data) {
				$('#subjects').empty();
				 $("#subjects").append('<option value="0">Please Select</option>');
				$('#subjects').append(data);
			 doAjaxCall('/Academy/a/i/getFacultyBasedOnDepartment', 'GET', formData, function(data) {
				 $("[data-parent='0']").each(function(){
					 $("#"+this.id).empty();
					 $("#"+this.id).append(data);
				 })
					var secId = $('#section option[value!=""]:first').val();
					var subId =$('#subjects option[value!="0"]:first').val();
					  	$("#subjects option[value='"+subId+"']").prop("selected",true);
					    getSelectedFacultySubjects(secId,subId);
					
				
					
			});			 
		});
			}	

}

function getSelectedFacultySubjects(sectionId,subjectId){
		clearFacultySubjects();
		var formData = {
				sectionId : sectionId,
				subjectId : subjectId,
			};
		if(typeof sectionId!='undefined' && typeof subjectId!='undefined'){
			doAjaxCall('/Academy/a/i/getFacultyBasedOnsSecAndSub', 'POST', formData, function(data) {
				var facultyList=JSON.parse(data);
				var anchorId=1;
				var facultyId=1;
				if(facultyList.length!=0){
					for(i in facultyList){
						if(facultyList[i].type==1){
						  	$("#anchorId_"+anchorId+" option[value='"+facultyList[i].userId+"']").prop("selected",true);
							facultyArray.push("anchorId_"+anchorId+"&&"+facultyList[i].userId)
						  	anchorId++;
						}else if(facultyList[i].type==2){
							  $("#facultyId_"+facultyId+" option[value='"+facultyList[i].userId+"']").prop("selected",true);
								facultyArray.push("facultyId_"+facultyId+"&&"+facultyList[i].userId);
							  facultyId++;
						}
					  	$("#subjects option[value='"+facultyList[i].subjectId+"']").prop("selected",true);
					  	if(facultyList[i].guestLecturer)
					  	$('#guestLecturer').val(facultyList[i].guestLecturer);		
					}
					$("#facultyArray").val(facultyArray);
				}
		});
		}
}
function clearFacultySubjects()
{
	$('#generic-save-id').prop('disabled',false);
	facultyArray=[];
	$("#facultyArray").val("");
	$("[data-parent='0']").find('option').removeAttr("selected");
	$('#guestLecturer').val("");
}

function getSelectedFaculty(thisReq){
var val=thisReq.id+"&&"+thisReq.value;
for(var i in facultyArray){
	if(facultyArray[i].startsWith(thisReq.id)){
		facultyArray.splice(i,1)
		break;
	}
}
	facultyArray.push(val);
	$("#facultyArray").val(facultyArray);
}
// //--- End FacultySubjectsAllocation-----////
// ESA RESULTS

function getBranchByDept(value){
	// return;
	getCombobox('/Academy/a/i/branchByDept/'+value, 'esaBranchId');
	$("#esaSubjectId").val(null)
	$("#esaSubjectId").html('');
}

function getBranchByDeptId(value){
	// return;
	getCombobox('/Academy/a/i/branchByDept/'+value, 'branchId');
}
function getProgramBranch(){
	var esaProgId = $("#esaProgId").val();
	getCombobox('/Academy/a/i/getBranchOfProgramFull/'+esaProgId, 'esaBranchId',null,null,function(){
		if(!$("#esaBranchId").attr("data-selected"))
		$('#esaBranchId option:first-child').attr("selected", "selected");
	});
}
function  getSubjectsByCombo(){
			var esaBranchId = $("#esaBranchId").val(),
			esaSemesterId = $("#esaSemesterId").val(),
			esaCycleId = $("#esaCycleId").val(),
			esaDeptId = $("#esaDeptId").val(),
			esaProgId = $("#esaProgId").val(),
			esaId=$("#esaId").val();
			
			if(!esaProgId || !esaBranchId || !esaSemesterId  || !esaCycleId || !esaId){
				bootbox.alert("Select Corresponding fields")
				return;
			}
			
			
			getCombobox('/Academy/a/i/esaSubject/'+esaId+"/"+esaProgId+"/"+esaSemesterId+"/"+esaCycleId, 'esaSubjectId');

}
function  getSubjectsByComboForISA(){
	var esaBranchId = $("#esaBranchId").val(),
	esaSemesterId = $("#esaSemesterId").val(),
	esaCycleId = $("#esaCycleId").val(),
	esaDeptId = $("#esaDeptId").val(),
	esaProgId = $("#esaProgId").val(),
	esaId=$("#esaId").val();
	
	if(!esaProgId || !esaDeptId || !esaSemesterId  || !esaCycleId || !esaId){
		bootbox.alert("Select Corresponding fields")
		return;
	}
	getCombobox('/Academy/a/i/esaSubject/'+esaId+"/"+esaProgId+"/"+esaDeptId+"/"+esaBranchId+"/"+esaSemesterId+"/"+esaCycleId, 'esaSubjectId');

			getCombobox('/Academy/a/i/esaSubject/'+esaId+"/"+esaProgId+"/"+esaSemesterId+"/"+esaCycleId, 'esaSubjectId');


}
function getEsaSubjectForResults(){
	if( $("#esaId").val()){
	var esaProgId=null;
	var esaBranchId = null;
	if($("#esaProgId").val()){
		esaProgId = $("#esaProgId").val();
	}
	if($("#esaBranchId").val()){
		esaBranchId = $("#esaBranchId").val();
	}
	var esaId=$("#esaId").val();
	getCombobox('/Academy/a/i/esasubjects/'+esaId+"/"+esaProgId+"/"+esaBranchId, 'esaSubjectId');
	}
}

function getEsaSubjects()
{

	$('#previewResultId').html('');
	getCombobox('/Academy/a/i/esaSubjectForResults/'+$('#esaId').val()+'/'+$('#esaProgId').val()+'/'+$('#esaDeptId').val()+'/'+$('#esaSemesterId').val()+'/'+$('#esaCycleId').val(), 'esaSubjectId');
	getCombobox('/Academy/a/i/classBatchSectionsESA/' + $('#esaProgId').val()+'/'+$('#esaDeptId').val()+'/'+ $('#esaSemesterId').val()+'/'+$('#esaCycleId').val()+'/'+ $('#esaId').val(),'esaSectionId');

}
function getEsaSubjectWeightage(controllerMode,actionType){
	$('#previewResultId').html('');
	if($('#esaSubjectId').val()){
		bgCurtain();
		var formData = {
				controllerMode : controllerMode,
				actionType : actionType,
				esaBranchId : $("#esaBranchId").val(),
				esaId:$("#esaId").val(),
				esaProgId :$("#esaProgId").val(),
				esaClassId: $("#esaSemesterId").val(),
				esaCycleId:$("#esaCycleId").val(),
				esaDeptId:$("#esaDeptId").val(),
				esaSubjectId:$('#esaSubjectId').val(),
				menuId:this.menuId
			};
		doAjaxCall(url,"POST",formData,function(data){
			$('#esasubjectsdiv').html(data);
			removeBgCurtain();
		});
	}else{
		$('#esasubjectsdiv').html('');
	}
}

function generateResults(controllerMode,actionType){
	if($("#esaId").val()&&$("#esaProgId").val()&&$("#esaDeptId").val()&&$("#esaSemesterId").val()&&$("#esaCycleId").val()&&$("#esaSubjectId").val()&&$("#esaSectionId").val()){
		
		
		var formData = {
				controllerMode : controllerMode,
				actionType : actionType,
				id:0,
				esaBranchId : $("#esaBranchId").val(),
				esaId:$("#esaId").val(),
				esaProgId :$("#esaProgId").val(),
				esaClassId: $("#esaSemesterId").val(),
				esaCycleId:$("#esaCycleId").val(),
				esaDeptId:$("#esaDeptId").val(),
				esaCBSId:$("#esaSectionId").val().toString(),
				esaSubjectId:$("#esaSubjectId").val(),
				menuId:this.menuId
			};
		doAjaxCall(url,"POST",formData,function(data){
			showMessage("Results Generating..", "success");
			// setTimeout(getEsaSubjects,500);
			
				
		});
		
	}else{
		
		if(!$("#esaProgId").val()){
			showIdMessage("Please Select Program","error",'esaProgId');
		}else if(!$("#esaDeptId").val()){
			showIdMessage("Please Select Department","error",'esaDeptId');
		}else if(!$("#esaSemesterId").val()){
			showIdMessage("Please Select Stream","error",'esaSemesterId');
		}else if(!$("#esaCycleId").val()){
			showIdMessage("Please Select Cycle","error",'esaCycleId');
		}else if(!$("#esaSubjectId").val()){
			showIdMessage("Please Select Subject","error",'esaSubjectId');
		}else if(!$("#esaSectionId").val()){
			showIdMessage("Please Select Section","error",'esaSectionId');
		}
	}
	
}
function previewResults(controllerMode,actionType){
	if($("#esaId").val()&&$("#esaProgId").val()&&$("#esaDeptId").val()&&$("#esaSemesterId").val()&&$("#esaCycleId").val()&&$("#esaSubjectId").val()&&$("#esaSectionId").val()){
		
		var formData = {
				controllerMode : controllerMode,
				actionType : actionType,
				id:0,
				esaBranchId : $("#esaBranchId").val(),
				esaId:$("#esaId").val(),
				esaProgId :$("#esaProgId").val(),
				esaClassId: $("#esaSemesterId").val(),
				esaCycleId:$("#esaCycleId").val(),
				esaDeptId:$("#esaDeptId").val(),
				esaCBSId:$("#esaSectionId").val().toString(),
				esaSubjectId:$("#esaSubjectId").val(),
				menuId:this.menuId
			};
		bgCurtain();
		doAjaxCall(url,"POST",formData,function(data){
			$('#previewResultId').html(data);
			removeBgCurtain();
		});
		
		
	}else{
		if(!$("#esaProgId").val()){
			showIdMessage("Please Select Program","error",'esaProgId');
		}else if(!$("#esaDeptId").val()){
			showIdMessage("Please Select Department","error",'esaDeptId');
		}else if(!$("#esaSemesterId").val()){
			showIdMessage("Please Select Stream","error",'esaSemesterId');
		}else if(!$("#esaCycleId").val()){
			showIdMessage("Please Select Cycle","error",'esaCycleId');
		}else if(!$("#esaSubjectId").val()){
			showIdMessage("Please Select Subject","error",'esaSubjectId');
		}else if(!$("#esaSectionId").val()){
			showIdMessage("Please Select Section","error",'esaSectionId');
		}
			
	}
	
}


function saveModerateSubjectWeightage(controllerMode,actionType){
	
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			type:3,
			id:$("#esaId").val(),
			subjectId:$("#esaSubjectId").val(),
			esamarks:$("#esaratio").val(),
			isamarks:$("#isamarks").val(),
			esavaluedmarks:$("#esavaluedmarks").val(),
			menuId:this.menuId
		};
	doAjaxCall(this.url, 'GET', formData, function(data) {
		var dataArray = data.split("_");
		var status = dataArray[0].toUpperCase();
		var statusResp = dataArray[1];
		if (status == "SUCCESS") {
			showMessage(statusResp, "success");
			getEsaSubjectWeightage(370,12);
		}
	});
	
}
function getISAResultsView(controllerMode,actionType,id){
	if($("#esaSubjectId").val()){
		bgCurtain();
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			id:0,
			esaBatchClassId:$("#esaBatchClassId").val(),
			esaSectionId:$("#esaSectionId").val().toString(),
			subjectId:$("#esaSubjectId").val(),
			menuId:this.menuId
		};
	doAjaxCall(this.url, 'GET', formData, function(data) {
		$('#showISAResults').html(data);
		removeBgCurtain();
	});
}else{
	showIdMessage("Please Select Subject","error",'esaSubjectId');
}
}
function getISAResultsViewReport(){
if($("#esaSectionId").val() && $("#esaSubjectId").val()){
	var esaSectionId=$("#esaSectionId").val().toString();
	var url="reports/Reports/isaresults/"+esaSectionId+"/"+$("#esaSubjectId").val();
	window.open(url,null);
}else{
	showMessage("Please Select Class and Subject","error");
}
}

function getbatchclassforisaview(){
	getCombobox('/Academy/a/i/getBatchClassForEsa/'+$('#esaId').val()+'/'+$('#esaProgId').val()+'/'+$('#esaDeptId').val()+'/'+$('#esaSemesterId').val()+'/'+$('#esaCycleId').val() , 'esaBatchClassId');
}
function getSubjectsByComboForISAResultView(){
	getCombobox('/Academy/a/i/batchClassSubjects2/'+$("#esaBatchClassId").val(),'esaSubjectId');
	getCombobox('/Academy/a/i/batchClassSections/'+$("#esaBatchClassId").val(),'esaSectionId');
}


// ESA RESULTS ENDS



// //--- start ClassExhange in TT-----////

function setClassExChangeComboBox(bId,deptId){
if(bId!=null && bId!=0){
	var formData = {
			batchClassId : bId,
			departmentId : deptId,
			menuId:this.menuId
		};
		doAjaxCall('/Academy/a/i/getSubjectsBasedOnBatchClass', 'GET', formData, function(data) {
			$("#ttSubject").empty();
			 $("#ttSubject").append('<option value="0">Please Select</option>');
			 $("#ttSubject").append(data);	
			  $("#ttSubject option[value='"+subjectId+"']").attr("selected",true)
		});	
		 doAjaxCall('/Academy/a/i/getFacultyBasedOnDepartment', 'GET', formData, function(data) {
			 $("#ttFaculty").empty();
		      $("#ttFaculty").append(data);
			 $("#ttFaculty option[value='"+facultyId+"']").attr("selected",true)

	});
		}	

}
function addClassExChangeBySection(id,sectionId,type) {
	
	if(typeof type != 'undefined'){
		$("#nonMenu_Id").hide()
		sectionId=$('#section').val();	
	}else{
		$("#nonMenu_Id").show();
	}
	
var formData = {
	controllerMode : 8030,
	actionType : 32,
	id : id,
	batchClassId:batchClassId,
	sectionId : parseInt(sectionId),
	classType:classType,
	menuId : this.menuId,
	
};
bgCurtain();
doAjaxCall(this.url, 'GET', formData, function(data) {
	$('#addClassExchangeBySection').empty();
	$('#addClassExchangeBySection').append(data);
	$("#classType").val(classType);
	setDateTimePicker();
	setClassExChangeComboBox(batchClassId,deptId);
	getCheckCombobox("/Academy/a/i/getTimeSlotsByDate/"+classType, "timeSlotId-timeSlotIds");
	if(typeof type != 'undefined'){
		getClassExchangeBySectionList(0,type);
	}
});

}


function getClassExchangeBySectionList(selectedVal,type){	
	var startDate="",endDate="";
	if(type==1){
		startDate=$("#startDate").val();
		endDate=$("#endDate").val();
	}else{
		startDate=startDateVal;
		endDate=endDateVal;
	}
	if(startDate =="" && endDate==""){
		showMessage("Select Start Date and End Date", "error");
		return
	}
	var formData = {
			controllerMode : 8030,
			actionType : 31,
			id : classBatchSectionId,
			startDate : startDate,
			endDate :endDate,
			classType:classType,
			menuId : this.menuId,
			subMenuId:subMenuId
		};
		doAjaxCall(this.url, 'GET', formData, function(data) {
			$('#getClassExchangeBySectionList').empty();
			$('#getClassExchangeBySectionList').append(data);
			$("#classExChangeSave-id").parent().prop('disabled',false);
		});


	}


function handleDeleteClassExChange(id, selectedData) {
	
	var title = _MESSAGES.modalConfirm.deleteTitle+ " "+"Time Slot";
	var message = _MESSAGES.modalConfirm.deleteBody.replace(/#0/g,selectedData);
	getConfirmDialog(title, message, function() {
		var formData = {
			controllerMode : 8030,
			actionType : 34,
			id : id,
			classType:classType,
			menuId : this.menuId,
		};
		doAjaxCall(this.url, 'GET', formData, function(data) {
			var dataArray = data.split("_");
			var status = dataArray[0].toUpperCase();
			var statusResp = dataArray[1];
			if (status == "SUCCESS") {
				showMessage(statusResp, "success");
				getClassExchangeBySectionList("",1);
			} else if (status == "ERROR") {
				showMessage(statusResp, "error");
			}
			
		});
	});
}

function handleClassExChange(controllerMode, actionType, id, selectedData,type) {
	subMenuId = $("a:focus").attr('subMenu-id');
	var formData = {
		controllerMode : controllerMode,
		actionType : actionType,
		id : id,
		selectedData : selectedData,
		menuId : this.menuId,
		subMenuId:subMenuId
	};
	var obj = getDialogMessage(controllerMode, actionType, id, selectedData);
	doAjaxCall(this.url, 'GET', formData, function(data) {
		handleClassExChangeInformation(data,type);
		classType=type;
	});

}

function handleClassExChangeInformation(data,type) {
	var text="";
	if(type==1){
		text="Manage Class ExChange";
	}else{
		text="Manage Special Class";
	}
	
	var buttons = [
			{
				type : "button",
				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='classExChangeSave-id'></span>Save",
				className : "btn-sm btn-default",
				callback : function(e) {
					if (!$("#genericSave").valid())
						return false;
					return saveClassExChangeInformation();
				}
			},
			{
				type : "cancel",
				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
				className : "btn-sm btn-default",
				callback : null
			} ];
	getModalDialog(
			'large',
			text,
			data,
			buttons,
			function() {
				handleFormValidation('genericSave');
			});
}

function saveClassExChangeInformation(){
	var rep=true;
	$(".mandatory").each(function() {
		if($(this).val()==0 || $(this).val()==''|| $(this).val()==null){
			rep=false;
			return;
		}
	});
	if(rep==true){
	$("#classExChangeSave-id").parent().prop('disabled',true);
	 startDateVal=$("#startDate").val();
	 endDateVal=$("#endDate").val();
	var formContext = $("#genericSave");
	var formURL = formContext.attr("action");
	var formData = new FormData(formContext[0]);
	formData.append("menuId",this.menuId);
	doAjaxCall(formURL, 'POST', formData, function(data) {
		var dataArray = data.split("_");
		var status = dataArray[0];
		var statusResp = dataArray[1];		
		if (status == "SUCCESS") {
			showMessage(statusResp, "success");
			getClassExchangeBySectionList(0,2);
		} else{
			showMessage(statusResp, "error");
			$("#classExChangeSave-id").parent().prop('disabled',true);
		}
		
	}, false, false);
	}else{
		showMessage("Please fill all required fields", "error");
	}
	return false;
}
// //--- end ClassExhange in TT-----////

function getAttendanceRegister(controllerMode, actionType, batchClassId, selectedData)
{
	 window.open('reports/Reports/attendanceRegisterReport/'+batchClassId,'_blank');
	

}
// ESA elated

function getESADialog(controllerMode, actionType, id, selectedData) {
	var buttonName = $("a:focus").text();
	var subMenuId = $("a:focus").attr('submenu-id');
	var formData = {
		controllerMode : parseInt(controllerMode),
		actionType : parseInt(actionType),
		id : id,
		selectedData : selectedData,
		menuId : this.menuId,
		subMenuId:subMenuId
	};
	var buttons = [ {
		type : "cancel",
		label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
		className : "btn-default btn-sm",
		callback : null
	} ];
	var that=this;
	var obj = getDialogMessage(controllerMode, actionType, id, selectedData);
	doAjaxCall(this.url, 'GET', formData, function(data) {
		getModalDialog('large',	obj.title,data,buttons,function() {
			eval(that.url
					+ "(formData.controllerMode,formData.actionType,formData.id,formData.selectedData,true);");
			$("#save-span-1").parent().attr("id","generic-save-id");
			// attachEnterEvent('genericSave','generic-save-id');
			// handleFormValidation('genericSave');
			modalDialog.addClass="ddddd";
});
		
		$(".outside-action-btn").removeClass("disabled");
	});
	

}

function getEsaProgramBranch(value){
	getCombobox('/Academy/a/i/getBranchOfProgramByInst/'+$("#esaProgId").val(), 'esaBranchId',null,null,function(){
		if(!$("#esaBranchId").attr("data-selected"))
		$('#esaBranchId option:first-child').attr("selected", "selected");
	});
}

function esaElegibleStudentSearch(controllerMode,actionType,esaType){
	
	var esaType=1;
	var esaId=$("#esaId").val();
	var esaInstId = $("#esaInstId").val();
	var checkboxValue = 0;
	
	if($('input:checkbox[name=backlogId]').is(':checked'))
	{
		checkboxValue = 1;		
	}
	
			var esaProgId = $("#esaProgId").val();
			var esaDeptId=$("#esaDeptId").val();
			var esaBranchId=$("#esaBranchId").val();
			var esaSemesterId=$("#esaSemesterId").val();
			var esaCycleId=$("#esaCycleId").val();
			
			var esaSectionId=$("#esaSectionId").val();
			
			if(checkboxValue==0)
				{			
					if(!esaBranchId || !esaSemesterId || !esaCycleId){
						bootbox.alert("Select Corresponding fields")
						return;
					}
				}
			var that=this;
			var formData={
					controllerMode:controllerMode,
					actionType:actionType,
					esaProgId:esaProgId,
					esaDeptId:esaDeptId,
					esaBranchId:esaBranchId,
					esaSemesterId:esaSemesterId,
					esaCycleId:esaCycleId,
					menuId:this.menuId,
					esaType:esaType,
					esaId:esaId,
					checkboxValue : checkboxValue,
					esaSectionId:esaSectionId,
					esaInstId : esaInstId			
	}	
	
	bgCurtain();
	doAjaxCall(this.url,'POST',formData,function(data){
		removeBgCurtain();
		$("#showESAStudents").html(data);
	});
}




function assignESAStudents(studs,options){
	var tbody="";
	
	var alltr="";
	var users={};
	var k=1;
	var flag5=true;
	var esaStatusMessageFlag=true;
	var esaStatusMessage="";
	var	totalCount=6;
	
		for(var i in studs){
			var onetr="",count=0,count1=0;
			// onetr+="<td>"+k+"</td>";
				$("#esaStudentsTable >thead tr>th").each(function(){
					var flag=false;
					var data_val=$(this).attr("data-val");
					count1++;
					if(count1>totalCount){
					for(var j in studs[i]){
						if(esaStatusMessageFlag){
							switch (studs[i][j]['approvalType']) {
							case 0:
								esaStatusMessage="<strong>Department Approval:</strong> Pending &nbsp;&nbsp;&nbsp;<strong>COE Approval:</strong> Pending";
								break;
							case 1:
								esaStatusMessage="<strong>Department Approval:</strong> Approved &nbsp;&nbsp;&nbsp;<strong>COE Approval:</strong> Pending &nbsp;&nbsp;&nbsp;<strong> Done By:</strong> "+studs[i][j]['createdByName']+" &nbsp;&nbsp;&nbsp;<strong>On:</strong>"+studs[i][j]['createdDate'];
								break;
							case 2:
								esaStatusMessage="<strong>Department Approval:</strong> Approved &nbsp;&nbsp;&nbsp;<strong>COE Approval:</strong> Approved &nbsp;&nbsp;&nbsp; <strong> Done By:</strong> "+studs[i][j]['createdByName']+"&nbsp;&nbsp;&nbsp; <strong>On:</strong>"+studs[i][j]['createdDate'];
								$("#CheckFinalApproveFlag").val(2);
								
								break;

							default:
								break;
							}
							$("#change-all-esa-status-div").html(getESAStatusCombo("id='change-all-esa-status-select'","<option value=-1>Action</option>",options));
							esaStatusMessage="";
							$("#esaStatusMessage").html(esaStatusMessage);
							esaStatusMessageFlag=false;
						}
					var selectAttrs="";
					if(count==0){
						selectAttrs="id='parent_"+studs[i][j]['usn']+"' studentId="+studs[i][j]['userId']+" batchClassId="+studs[i][j]['batchClassId']+" classBatchSectionId="+studs[i][j]['classBatchSectionId']+" data-programId="+studs[i][j]['programId']+" data-departmentId="+studs[i][j]['departmentId']+" data-branchId="+studs[i][j]['branchId']+" data-classId="+studs[i][j]['classId']+"  data-cycleId="+studs[i][j]['cycle']+"   select-type='parent'  is-changed=0 name='userId' hallticket="+studs[i][j]['hallTicketNo']+" approval-type="+studs[i][j]['approvalType'];
						onetr+="<td>"+k+"</td><td>"+getESAStatusCombo(selectAttrs,"",options)+"</td>";
						onetr+="<td>"+studs[i][j]['usn']+"</td>";
						onetr+="<td style='text-align:left'>"+studs[i][j]['firstName'].toUpperCase()+"</td>";
						onetr+="<td student-confirm='esa' studentConfirmStatusInfo='"+studs[i][j]['studentConfirmStatusInfo']+"' id=esaStudent_"+studs[i][j]['userId']+" esaid="+studs[i][j]['esaid']+" studentConfirmStatus="+studs[i][j]['studentConfirmStatus']+" classBatchSectionId="+studs[i][j]['classBatchSectionId']+" studentId="+studs[i][j]['userId']+"></td>";	
						// if(hallTicketConfirm)
						onetr+="<td id=hallTktStudent_"+studs[i][j]['userId']+" studentId="+studs[i][j]['userId']+">"+getHallTicketCheckBox(studs[i][j]['userId'],studs[i][j]['esaid'],studs[i][j]['hallticketStatus'],studs[i][j]['hallTicketNo'])+"</td>";	
						$("#esaName").val("");
						$("#esaName").val(studs[i][j]['esadescription']);
					}
						
					if(data_val==studs[i][j]['subjectCode']){
						 /*
							 * if(studs[i][j]['status']==1){ onetr+="<td></td>";
							 * }else{
							 */
							selectAttrs="id='parent_"+studs[i][j]['usn']+"_"+studs[i][j]['subjectId']+"' esaid="+studs[i][j]['esaid']+" data-selected="+studs[i][j]['subjectStatus']+" subject-id="+studs[i][j]['subjectId']+" data-nsar='nsar' nsar-id="+studs[i][j]['studentNSARId']+" nsar-status="+studs[i][j]['overRideStatus']+" nsar-studentId="+studs[i][j]['userId']+" select-type='child' name='subjectId' is-changed=0";
							onetr+="<td title='last modified by: "+studs[i][j]['createdByName']+"'>"+getESAStatusCombo(selectAttrs,"",options)+"</td>";
						// }
							
							flag=true;
					count++;
					break;
					}
					count++;
					}
					if(!flag){
						onetr+="<td></td>";
					}
					
					}
					});
				alltr+="<tr id='"+studs[i][0]['usn']+"'>"+onetr+"</tr>";
				k++;
		}
	$("#esaStudentsTable >tbody").html(alltr);
	
	$("select[select-type='child']").each(function(){
		// if(!flag5){
			$(this).val($(this).attr('data-selected'));
		// }
	});
	
	$("select[id^=parent_][select-type='parent']").on('change',function(){
		var parent=$(this).attr('id');
		$(this).attr("is-changed",1);
		$("[id^="+parent+"_]").val($(this).val());
		$("[id^="+parent+"_]").attr("is-changed",1);
	});
	
	$("select[id^=parent_][select-type='child']").on('change',function(){
			$(this).attr("is-changed",1);
	});
	
	$("#change-all-esa-status-select").on('change',function(){
		if(parseInt($(this).val())>=0)
			$("[id^=parent_]").val($(this).val());
	});
	checkStudentNsar();
	checkStudentESAConfirmDetails();
	}

function getESAStatusCombo(selectAttrs,preppend,postpend){
	return combo="<select "+selectAttrs+">"+preppend
	+"<option value=-1>"+"--Select Action--"+"</option>"
	+"<option value=0>"+"Eligible"+"</option>"
	+"<option value=1>"+"Completed"+"</option>"
	+"<option value=2>"+"Withdrawn"+"</option>"
	+"<option value=3>"+"In-Eligible"+"</option>"
	+"<option value=4>"+"Pending"+"</option>"+postpend+"</select>";
	
}

function saveESAStudents(controllerMode,actionType){
	var that=this;
	
	getConfirmDialog("Save ESA Marks", "Do you want to finalize the students", function(){
		
		var esaSectionId = $("#esaSectionId").val();
		if($('input:checkbox[name=backlogId]').is(':checked'))	
		{
			esaSectionId=$("#esaGetSectionId").val();
		}	
		
	var formData = {
		controllerMode :controllerMode,
		actionType : actionType,
		deptId : $("#esaDeptId").val(),
		programId : $("#esaProgId").val(),
		branchId : $("#esaBranchId").val(),
		semId : $("#esaSemesterId").val(),
		cycleId : $("#esaCycleId").val(),
		esaId : $("#esaId").val(),
		data:JSON.stringify(getSelectedSujects()),
		menuId:that.menuId,
		isMail:$("#coeMail").is(":checked")?1:0,				
	   esaSectionId:esaSectionId,
	   esaInstId : $("#esaInstId").val()
	}
	
	bgCurtain();
	doAjaxCall(that.url,'POST',formData,function(data){
		removeBgCurtain();
		var dataArray = data.split("_")[1];
		if (data.indexOf("SUCCESS") > -1) {
		showMessage(dataArray,'success');
		$("#actionType").val(41);
		$("#esaElegibleStudentSearchId")[0].click();
		}else
			showMessage(dataArray,'error');
	});
	});
	
}

function esaMarksStudentSearch(controllerMode,actionType,esaType){
	var esaType=1;
	var esaProgId=$("#esaProgId").val();
	var esaDeptId=$("#esaDeptId").val();
	var esaBranchId=$("#esaBranchId").val();
	var esaSemesterId=$("#esaSemesterId").val();
	var esaCycleId=$("#esaCycleId").val();
	var esaSubjectId=$("#esaSubjectId").val();
	var resultVersion=$("#resultVersion").val();

	var esaId=$("#esaId").val();
	
	if(!esaProgId || !esaBranchId || !esaSemesterId || !esaCycleId || !esaSubjectId){
		bootbox.alert("Select Corresponding fields")
		return;
	}
	var that=this;
	var formData={
			controllerMode:controllerMode,
			actionType:actionType,
			esaProgId:esaProgId,
			esaDeptId:esaDeptId,
			esaBranchId:esaBranchId,
			esaSemesterId:esaSemesterId,
			esaCycleId:esaCycleId,
			esaSubjectId:esaSubjectId,
			resultVersion:resultVersion,
			menuId:this.menuId,
			esaType:esaType,
			esaId:esaId
	}
	bgCurtain();
	doAjaxCall(this.url,'POST',formData,function(data){
		$("#showESAStudentsWithMarks").html(data);
		removeBgCurtain();
	});
}
function getesaresultsview(controllerMode,actionType){
	if($("#esaSubjectId").val() && $("#esaSectionId").val()){

	var esaSubjectId=$("#esaSubjectId").val();
	var cbsIds=$("#esaSectionId").val().toString();
	
	var esaId=$("#esaId").val();
	
/*
 * if(!esaProgId || !esaDeptId || !esaSemesterId || !esaCycleId ||
 * !esaSubjectId){ bootbox.alert("Select Corresponding fields") return; }
 */
	var that=this;
	var formData={
			controllerMode:controllerMode,
			actionType:actionType,
			
			esaSubjectId:esaSubjectId,
			cbsIds:cbsIds,
			menuId:this.menuId,
			esaId:esaId
	}
	doAjaxCall(this.url,'POST',formData,function(data){
		var dataArray = data.split("_");
		var status = dataArray[0].toUpperCase();
		var statusResp = dataArray[1];
		if (status == "ERROR") {
			showMessage("Results not Found", "error");
			$("#showesastudentsresults").html('');
		}else{
		$("#showesastudentsresults").html(data);
		}
	});
	}else{
		showIdMessage("Please Select Subject", "error","esaSubjectId")
	}
}


function getESAMarksData(){
	var esaObj=[];
	var obj={};
	var that=this;
	$("#esaMarksTable >tbody tr").each(function(i){
		obj={};
		$(this).children().each(function(){
			var t=$(this).children('input[id^=marks_]');
			
			if(t.length>0){
			obj.usn=$(t).attr('data-usn');obj.uid=$(t).attr('data-sid');
			obj.progId=$(t).attr('data-programid');obj.deptId=$(t).attr('data-departmentid');
			obj.branchId=$(t).attr('data-branchid');obj.classId=$(t).attr('data-classid');
			obj.batchClassId=$(t).attr('data-batchclassid');obj.cycleId=$(t).attr('data-cycleid');
			obj.classbatchsectionid=$(t).attr('data-classbatchsectionid');
			
			if( !$(t).attr("ip-invalid")){
				obj.marks=$(t).val();
				esaObj.push(obj);
			}else if($(t).attr("ip-invalid")){
				obj.marks=0;
				esaObj.push(obj);
			}
			}
		});
	});
	return esaObj;
}

function getSelectedSujects(){
	var allStuds=[];
	$("#esaStudentsTable >tbody tr").each(function(){
		var oneStud={};
		var subs={};
		var x=1;
		var allSubs=[];
		$(this).children().find("select").each(function(){
			var selectType=$(this).attr('select-type');
			var isChanged=$(this).attr('is-changed');
			if(selectType=='parent'){
				oneStud['userId']=$(this).attr('studentId');
				oneStud['hallticket']=$(this).attr('hallticket');
				oneStud['batchClassId']=$(this).attr('batchClassId');
				oneStud['classBatchSectionId']=$(this).attr('classBatchSectionId');
				oneStud['programId']=$(this).attr('data-programId');
				oneStud['departmentId']=$(this).attr('data-departmentId');
				oneStud['branchId']=$(this).attr('data-branchId');
				oneStud['classId']=$(this).attr('data-classId');
				oneStud['cycle']=$(this).attr('data-cycleId');
				oneStud['approvalType']=$(this).attr('approval-type');
			}else{
				if(isChanged==1){
				subs[$(this).attr('subject-id')]=$(this).val();
				oneStud['subjects']=subs;
				}
				allSubs.push($(this).attr('subject-id'));
				oneStud['allSubs']=allSubs;
			}
				
		});
		allStuds.push(oneStud);
	});
	return allStuds;
}

function esaPasteAll(){
	var pasteDialog=    '<div class="wrapper-modal-content-area-pad">'+
    '<form class="form-horizontal">'+
    ' <div class="col-md-12">'+'<fieldset class="grp_frmfld" style="padding-top: 15px;">'+
         '<div class="form-group pastinblk">'+'<label class="col-md-12 control-label" for="">Please paste the values here </label>'+
         '<div class="col-md-12">'+'<textarea class="form-control" autofocus id="pastedEsaMarks"></textarea>'+'</div>'+
        '     </div>'+'<p class="error"><strong>Note:</strong> Please paste the values separated with comma(,) ex:- <br>USN, marks<br>USN, marks</p>'+
         '</fieldset>'+'</div>'+' </form>'+'</div>';
	
	var buttons = [ {
		type : "button",
		label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Paste",
		className : "btn btn-sm btn-default",
		callback : function(e){
			esaPasteValue();
		}
	} ];
	
	getModalDialog('medium','Paste All',pasteDialog,buttons,function() {
	});
 
}

function esaPasteValue(){
var val=$("#pastedEsaMarks").val();
if(val)
	var vals=val.split("\n");
var obj={};
for(var i in vals){
	var t=vals[i].split(",");
	obj[t[0].trim()]=t[1];
}
var that=this;

$("#esaMarksTable >tbody tr").each(function(i){
	$(this).children().each(function(){
		var ctx=$(this).children('input[id^=marks_]');
		if($(ctx).length>0){
			var usn=$(ctx).attr('data-usn').trim();
			var val=obj[usn];
			if(val)
				val=val.trim()
				
			$(ctx).val(val);
			
			validateESAMarks(ctx);
		}
	})
});

	savePasteAllESAStudents(370,45)
}


function validateESAMarksEntry(){
	var that=this;
		this.validateESAMarksEntryList =[];
		$("[id^=marks_]").on('change',function(){
			 that.validateSingleESAMarksEntry =[];

			validateESAMarks(this,1);
			saveSingleESAStudents(370,78,this);
		});
		
}

function validateESAMarks(context,type){

		var usn=$(context).attr('data-usn').trim();
		var val=$(context).val();
		if(val)
			val=val.trim();
		
		 var re =/[^\.0-9aAfFiIpP]/gi;
		 
		 var idx=this.validateESAMarksEntryList.indexOf(usn);
			if(idx>-1)
				this.validateESAMarksEntryList.splice(idx,1);
			
			if(type==1){
				var idx1=this.validateSingleESAMarksEntry.indexOf(usn);
				if(idx1>-1)
					this.validateSingleESAMarksEntry.splice(idx1,1);
			}
		 $(context).next().remove();
		 if (val && re.test(val)) {
			 $(context).next("span.error").remove();				 
			 $(context).after('<div class="error">Not a valid mark</div>');
			 if(type==1)
				 this.validateSingleESAMarksEntry.push(usn);
			 
			 this.validateESAMarksEntryList.push(usn);

			 $(context).attr("ip-invalid",true);
			}else if(parseFloat(val)>parseFloat($("#esaMaxMarks").val())){
					$(context).next("span.error").remove();
					 $(context).after('<div class="error">Entered mark is greater than max marks!</div>');
					 if(type==1)
						 this.validateSingleESAMarksEntry.push(usn);
					 
					this.validateESAMarksEntryList.push(usn);
					 $(context).attr("ip-invalid",true);
				
			}else{
				// $(ip).attr("ip-invalid",false);
			}
}

function saveSingleESAStudents(controller,actionType,ctx){
	console.log($(ctx).val());
	var that=this;
	if(this.validateSingleESAMarksEntry.length>0){
		showMessage("Invalid input!");
		return;
	}
	var formData = {
		controllerMode : controllerMode,
		actionType : actionType,
		esaId : $("#esaId").val(),
		subjectId : $("#esaSubjectId").val(),
		resultVersion:$("#resultVersion").val(),
		esaProgId:$(ctx).attr("data-programid"),
		esaDeptId:$(ctx).attr("data-departmentid"),
		esaBranchId:$(ctx).attr("data-branchid"),
		esaSemesterId:$(ctx).attr("data-classid"),
		esaCycleId:$(ctx).attr("data-cycleid"),
		batchclassid:$(ctx).attr("data-batchclassid"),
		classbatchsectionid:$(ctx).attr("data-classbatchsectionid"),
		studentId:$(ctx).attr("data-sid"),
		usn:$(ctx).attr("data-usn"),
		marks:$(ctx).val(),
		menuId:this.menuId
	}
	
         
	doAjaxCall(this.url,'POST',formData,function(data){
		var dataArray = data.split("_")[1];
		if (data.indexOf("SUCCESS") > -1) {
		showMessage(dataArray,'success');
		
		// $("#esaMarksStudentSearchId")[0].click();
		}else
			showMessage(dataArray,'error');
	});
}

function savePasteAllESAStudents(controller,actionType){
	var that=this;

	var formData = {
		controllerMode : controllerMode,
		actionType : actionType,
		esaId : $("#esaId").val(),
		subjectId : $("#esaSubjectId").val(),
		resultVersion:$("#resultVersion").val(),
		marks:JSON.stringify(getESAMarksData()),
		menuId:this.menuId
	}
	
	doAjaxCall(this.url,'POST',formData,function(data){
		var dataArray = data.split("_")[1];
		if (data.indexOf("SUCCESS") > -1) {
		showMessage(dataArray,'success');
		
		// $("#esaMarksStudentSearchId")[0].click();
		}else
			showMessage(dataArray,'error');
	});

}

function finalizeESAStudents(controllerMode,actionType){
	var that=this;
	if(this.validateESAMarksEntryList.length>0){
		showMessage("Invalid input can't be finalized!");
		return;
	}
	
	var subject=$("#esaSubjectId option:selected").text(),
	resVer=$("#resultVersion").next().text();
	getConfirmDialog("Save ESA Marks", "Do you want to finalize marks for Subject: <strong>"+subject+"</strong>; Result: <strong>"+resVer+"</strong>?", function(){
		

		var formData = {
				controllerMode : controllerMode,
				actionType : actionType,
				esaId : $("#esaId").val(),
				subjectId : $("#esaSubjectId").val(),
				resultVersion:$("#resultVersion").val(),
				esaProgId:$("#esaProgId").val(),
				esaDeptId:$("#esaDeptId").val(),
				esaBranchId:$("#esaBranchId").val(),
				esaSemesterId:$("#esaSemesterId").val(),
				esaCycleId:$("#esaCycleId").val(),
				marks:JSON.stringify(getESAMarksData()),
				menuId:this.menuId
			}
		bgCurtain();
		doAjaxCall(that.url,'POST',formData,function(data){
			removeBgCurtain();
			var dataArray = data.split("_")[1];
			if (data.indexOf("SUCCESS") > -1) {
			showMessage(dataArray,'success');
			}else
				showMessage(dataArray,'error');
		});
	});
}

function directDownloadESAHallticket(){
	var usn=$("#hallticketUSN").val();
	var esaId=$("#esaId").val();
	if(!usn || usn.length==0 || !esaId){
		showMessage("Enter USN/SRN", "error");
		return;
	}
	 window.open('reports/Reports/downloadHallTicket/'+usn+"/"+esaId,'_blank');

}
// ESA ENDS
function handleWithDrawSubject(studentSubjectId, controllerMode, actionType){
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			menuId : this.menuId,
			studentSubjectId : studentSubjectId
		}
	
		doAjaxCall(this.url, 'POST', formData, function(data) {
			var dataArray = data.split("_");
			var status = dataArray[0].toUpperCase();
			var statusResp = dataArray[1];
			if (status == "SUCCESS") {				
				showMessage(statusResp, "success");
				document.getElementById('showSubjects').click();	
			} else if (status == "ERROR") {
				showMessage(statusResp, "error");
			}		
		});	
		
}
function withDrawSubject(studentSubjectId, controllerMode, actionType, usnNumber) {

	getConfirmDialog("Withdraw Subject",
			"Are you sure, you want to withdraw this subject?", function() {
		handleWithDrawSubject(studentSubjectId, controllerMode, actionType);
			}, function(){});
}





function getSelectedAllocateSubjects(){
	var allStuds=[];
	$("#studentsSubjects >tbody tr").each(function(){
		var oneStud={};
		var subs={};
		var x=1;
		$(this).children().find("input[type='checkbox']").each(function(){
			
			if($(this).attr("ischanged")==1){
				if($(this).is(":checked")){
					x="0";
				}else{
					x="1";
				}
			subs[$(this).val()]=x;
			oneStud['uid']=$(this).attr("data-uid");
			oneStud['subjects']=subs;
			}
		});
		if(Object.keys(oneStud).length>0)
		allStuds.push(oneStud);
	});
	return allStuds;
}

function getSelectedCheckBoxes(id){
	var allStuds=[];
	$("[id^="+ id +"]").each(function() {
		var oneStud={};		
// $(this).children().find("input[type='checkbox']").each(function(){
// if($(this).is(":checked")){
				allStuds.push($(this).val());	
// }
// });
	});
	return allStuds;
}


function SortByName(a, b){
	   var amyDate = a.split("-");
	   var aNewDate=new Date(amyDate[1]+","+amyDate[0]+","+amyDate[2]).getTime();
	   var bmyDate = b.split("-");
	   var bNewDate=new Date(bmyDate[1]+","+bmyDate[0]+","+bmyDate[2]).getTime();
	   return ((aNewDate < bNewDate) ? -1 : ((aNewDate > bNewDate) ? 1 : 0));
	}

function checkOrUnckeckColumn(ele, subCode) {
	if (ele.checked) {
			 $("input[data-val='" + subCode + "']").prop('checked', true);	
	} else {	
			 $("input[data-val='" + subCode + "']").prop('checked', false);	
	}
	
	 $("input[data-val='" + subCode + "']").attr("ischanged",1);	

	$("#showAllocateSubjectsId").removeClass('disabled');
}




// /////////////////// Amaatra Management Starts ///////////////////
function amaatraApp(controllerMode, actionType, id, selectedId,flag) {
	var res = {};
	if (flag || actionType==5){
		res = getAmaatraDialogWithCombo(controllerMode, actionType, id, selectedId);
	}
	else if (!flag || typeof flag == "undefined")
		res = getAmaatraDialogWithTitle(controllerMode, actionType, id, selectedId);
	
	return res;
}

function getAmaatraDialogWithCombo(controllerMode, actionType, id, selectedId) {
	var obj = {};

	switch (controllerMode) {
	case AmaatraConstants.ControllerMode.Appraisal:
		amaatraAppCheckComboBox(controllerMode, actionType, id, selectedId);
		setDateTimePicker();
		break;
	case AmaatraConstants.ControllerMode.AppraisalReview:
		amaatraAppCheckComboBox(controllerMode, actionType, id, selectedId);
		break;	
	}
	return obj;
}


function amaatraAppCheckComboBox(controllerMode, actionType, id, selectedData) {

	switch (controllerMode) {
	case AmaatraConstants.ControllerMode.AppraisalReview:
		switch (actionType) {
		case Constants.ActionType.ADD:
			break;
		case Constants.ActionType.DELETE:
			break;
		case Constants.ActionType.VIEW:
			break;
		default:
			break;
		}

			
	default:break;
	}
}

function getAmaatraDialogWithTitle(controllerMode, actionType, id, selectedId) {
	var res = {};
	switch (controllerMode) {
	case Constants.ControllerMode.Batches:
		if (actionType == Constants.ActionType.ADD
				|| actionType == Constants.ActionType.DELETE) {
			res = getInstAppDialogMessage(actionType, id, selectedId);
			res.callBack=true;
		setDateTimePicker();
		}
		break;
	default:
		break;
	}
	return res;
}

// --Appraisal start---//


var appraisalData = {};
function pushAppraisalMenuIntoArray(which) {
	var appraisalPageList = [];
	if (which) {
		for (var i = 1; i <= 4; i++) {
			appraisalPageList.push(i);
		}
	}
	appraisalData.appraisalPageList = appraisalPageList;
	appraisalData.currentPosition = 0;
	appraisalData.appraisalLength = appraisalPageList.length;
}
function initAppraisalCalls(){
$('[id^=custom]').click(function() {
	if (chkDisabledTab(this.id) || chkCurrentTab(this.id)) {
		return false;
	}
	var idArray = this.id.split("_");
	var funCall = idArray[1];
	var ret = eval(funCall + "(this, this.id, 0);");
	return ret;
});
}

function moveToAppraisal(thisReq) {
	var currentPosition = $(thisReq).attr('data-postionAt');
	appraisalData.currentPosition=--currentPosition;
	moveToAppraisalDetails(true);
	 return false;
	}
	function moveAppraisalNext(id) {
		appraisalData.currentPosition++;
		moveToAppraisalDetails(true);
		return false;
	}
	function moveAppraisalPrev(id) {
		appraisalData.currentPosition--;
		moveToAppraisalDetails(true);
		return false;
	}
function moveToAppraisalDetails() {
	bgCurtain();
	var formData = {
		id : $('#requesterId').val(),
		requestedStatus:parseInt($('#requestedStatus').val()),
		requesterType:parseInt($('#requesterType').val()),
		menuId:this.menuId,
		actionType:6,
		controllerMode:9000,
		currentPosition : appraisalData.appraisalPageList[appraisalData.currentPosition]
	};
	doAjaxCall(this.url, 'post', formData, function(data) {
		processAppraisalData(data);
		removeBgCurtain();
		if($('#requesterType').val()!=_MESSAGES.ADMISSIONS_REQUESTER_TYPE.FACULTY){
			$("#htmlAppraisalContent :input").attr("disabled",true);
			$("#htmlAppraisalContent :input").css('background-color', '#fff');

		}
	});
	
	
	
}




function processAppraisalData(data) {
	changeTabStatus('custom_moveToAppraisal_'+appraisalData.appraisalPageList[appraisalData.currentPosition]);
	$('#htmlAppraisalContent').html(data);
	if (appraisalData.currentPosition > 0 && appraisalData.currentPosition < appraisalData.appraisalLength) {
		$('#custom_moveAppraisalNext').show();
		$('#custom_moveAppraisalPrev').show();
		$("#submit_apparaisal").css("display", "none");
		$("#print_admin_admission").css("display", "none");

	}
	if (appraisalData.currentPosition == 0) {
		$('#custom_moveAppraisalPrev').hide();
		$('#custom_moveAppraisalNext').show();
		$("#submit_apparaisal").css("display", "none");
		$("#print_admin_admission").css("display", "none");

	}

	if (appraisalData.currentPosition == appraisalData.appraisalLength-1) {
		$('#custom_moveAppraisalNext').hide();
		$('#custom_moveAppraisalPrev').show();
		$("#submit_apparaisal").css("display", "block");
		$("#print_admin_admission").css("display", "block");
	}
	listenAppraisalQuestion();
	
}

var evalTimer = null;
function startEvalTimer() {
	if(thisRequest.requestedStatus!=_MESSAGES.ADMISSIONS_STATUS_TYPE.VIEW_APPLICATION){
		evalTimer = setTimeout(handleSave, 15000);
	}
}

function saveAppraisal(formData) {
	doAjaxCall(this.url, 'POST', formData, function(data) {
		showMessage("Auto saved", "success");
	});
}

function handleEvalSuccess(admissionFormType, actionType) {

}

function listenAppraisalQuestion(){

	// setting appraisal data
	for (var i = 0; i < appraisalQuestionData.noQuestions; i++) {
		var uniqueId = "ans_"+ appraisalQuestionData.questionsList[i].uniqueId;
		if($('[id^='+uniqueId+']').length>0){
			var uniqueId = "ans_"+ appraisalQuestionData.questionsList[i].uniqueId;// questionBankId
			var answer = appraisalQuestionData.questionsList[i].answer;
			var questionType=appraisalQuestionData.questionsList[i].qt;
			switch(questionType){
			case 1:
				if(answer.length>0){
			  	  $("#"+uniqueId+" option[value='"+decodeURI(answer)+"']").attr("selected",true);
				}
			break;
			case 13:
				if(answer.length>0)
				$('#'+ uniqueId).val(decodeURI(answer));
			break;	
		
		}
	}
	}
	calculateAverageScore();
	countMandatoryFields('appraisalForm', '.user_field');
	
	
	// listening appraisal data
	$("[id^=ans_]").on('change paste blur cut copy', function(e)
			{
		setAndSaveAppraisalData(this);
		calculateAverageScore();
		countMandatoryFields('appraisalForm', validateClass);
			});	
}
function setAndSaveAppraisalData(thisReq) {
	var answered = "";
	var questionBankId=$(thisReq).attr('data-qBankId');
	var questionType = $(thisReq).attr('data-qBankType');
	var clickedQ = lookup[questionBankId];
	appraisalQuestionData.currentQuestion = clickedQ;	
	switch (parseInt(questionType))
	{
	case 1:
	case 13:
		answered=encodeURI($(thisReq).val());
		appraisalQuestionData.questionsList[clickedQ].answer = answered;
	break;
	}
	var formData = {
			questionBankId : questionBankId,
			answered : answered,
			menuId:this.menuId,
			actionType:7,
			controllerMode:9000,
		}
	if(parseInt($('#requesterType').val())==_MESSAGES.ADMISSIONS_REQUESTER_TYPE.FACULTY){
		saveAppraisal(formData);
	}

	
}


function calculateAverageScore() {
	var totalMarks = 0;
	var maxMarksTotal = 0;
	var averageScore = 0;
	document.getElementById('averageScore').innerHTML = " ";
	$('.user_field').each(function() {
	var questionBankId=$(this).attr('data-qBankId');
	if($("#ans_"+questionBankId).val()!=0)
	totalMarks = totalMarks + parseFloat($("#ans_"+questionBankId+" :selected").text());
	      maxMarksTotal=maxMarksTotal+1;
	});

	averageScore = (totalMarks / maxMarksTotal);
	if (isNaN(averageScore)) {
		averageScore = 0;
	} else {
		averageScore;
	}

	totalMarks=totalMarks?totalMarks:0
	maxMarksTotal=maxMarksTotal?maxMarksTotal:0
	averageScore=averageScore?averageScore.toFixed(1):0

	document.getElementById('averageScore').innerHTML = averageScore;

}

function submitApparaisalForm(id) {
		getConfirmDialog(
				"Evaluation Form",
				" Do you want to submit Evaluation Form. Are you sure ?",
				function() {
					var formData = {
						status : 2,
						id : id,
						menuId:this.menuId,
						actionType:8,
						controllerMode:9000,
						messageType:1
					};
					doAjaxCall(
							this.url,
							'GET',
							formData,
							function(data) {
								$('#htmlAppraisalContent').html(data);
								showMessage("Submitted successfully", 'success');
								$('.steps').hide();
								$('.actions').hide();
								$('#headerAppraisalContent').hide();
							});
				});
	
}

function manageUserAppraisalReviewView(controllerMode, actionType, id,selectedData) {
	var formData = {
		controllerMode : controllerMode,
		actionType : actionType,
		id : id,
		selectedData : selectedData,
		requesterType : 1,
		menuId:this.menuId
	};
	doAjaxCall(
			this.url,
			'GET',
			formData,
			function(data) {
				getModalDialog("large", "Application", data, null, function(){
					
					
				})
			});

}


function amaatraFacultySubjectsAttachedEvents(){
	$("[data-parent='sf']").on('input',function(){
		var thisReq=$(this);
		var enteredValue = $(thisReq).val();
	    var currentDataList=$(thisReq).attr('list');
	    var facultyValue="";
	    amaatraShowDataList(enteredValue,currentDataList);
	   $('#'+currentDataList + ' option').filter(function() {
		  			if($(this).val() === enteredValue && enteredValue){
		  				facultyValue=$(this).attr('data-value');
		  				 $('#userId').val(facultyValue);
		  				$('#'+currentDataList).empty();
		  				return facultyValue;
		  		}
	       });	  
	});

}


function amaatraShowDataList(value,id){
	$('#'+id).empty();
	var rep="";
	var userId="";
	if(value){
	var name=value.trim().toUpperCase();
	var count=0;
		for(var f in facultyJson){
			if(f.indexOf(name)>=0){
				rep+=facultyJson[f];
				count++;
				if(count==10)break;
			}
	}
	}
	return $('#'+id).append(rep);
}


function saveFacultyGroup(){

		if (!$("#genericSave").valid() || formErrorList.length>0){
		
			return false;
			
		}
			
		var formData = {
				controllerMode : 802,
				actionType : 21,
				UserRoleId :  $('#UserRoleId').val(),
				institutionId : $('#institutionId').val(),
				departmentId  : $('#departmentId').val(),
				userId : $('#userId').val(),
				selectedData : selectedData,
				id:0,
				menuId : this.menuId
			};
		
		var obj = getDialogMessage(802, 20, id, selectedData);
		if(beforeGenericSave(formData,obj,0,"#genericSave")){
		 handleGenericSave(formData,obj,0);
		}else{
			modalDialog.modal('show');
		}
		
}


function deleteFacultyGroup(userId){
	getConfirmDialog(
			"Faculty Form",
			" Do you want to Remove Faculty. Are you sure ?",function() {

	var formData = {
			controllerMode : 802,
			actionType : 98,
			UserRoleId :  $('#UserRoleId').val(),
			institutionId : $('#institutionId').val(),
			departmentId  : $('#departmentId').val(),
			userId : userId,
			selectedData : selectedData,
			id:0,
			menuId : this.menuId
		};
	
	var url="appAdmin";
	doAjaxCall(url, 'GET', formData, function(data) {
		loadExistedFaculty();
		});
	});
	
}

function checkFacultyAppraisalStatus(userId){
	
	var formData = {
			controllerMode : 802,
			actionType : 99,
			id : userId,
			requesterType : 1,
			selectedData : selectedData,
			menuId : this.menuId
		};
	
	var url="appAdmin";
	doAjaxCall(url, 'GET', formData, function(data) {
		if(data=="DATA"){
			showMessage("You can't Remove. Appraisal form Already Submitted...","error");
		}else{
			deleteFacultyGroup(userId)
		}
		
		});
	
	
}


// --Appraisal end--//

function loadExistedFaculty()
{
	
	var formData = {
			controllerMode : 802,
			actionType : 97,
			menuId : this.menuId,
			instId:$('#institutionId').val(),
			deptId:$('#departmentId').val(),
			UserRoleId:$('#UserRoleId').val()
		};
	var url="appAdmin";
	doAjaxCall(url, 'GET', formData, function(data) {
		$('#loadExististedFaculty').html("");
		$('#loadExististedFaculty').html(data);
		
});
}


function getFaculties() {
	getCombobox('/Academy/a/g/getInst','institutionId',null,null,function(){
		loadDept();
		
	});
}

function loadDept() {
	var instId=$('#institutionId').val();
	getCombobox('/Academy/a/i/getDeptBasedOnInstId/'+instId, 'departmentId',null,null,function(){
		if($('#departmentId').val()!="" && $('#departmentId').val()!=undefined && $('#departmentId').val()!=null){
			loadExistedFaculty();
		}else{
			$('#loadExististedFaculty').html("");
		}
	});
}


// /////////////////// Amaatra Management End ///////////////////



function getSummerCoursesDetails() {
	var selectValue = $('#institutionId').val() + "_" + $('#batches').val()+ "_"+$('#program1').val()+"_" ;
	getDetailsBasedOnSelected('instituteApp', 6720, 5, 6720,
			'SummerCoursesDetails', selectValue, 'Summer Courses');

}
function resetSummerCourses(){
	var menuid=this.menuId;
	document.getElementById('menuTab_'+menuid).click();
}

// //////////////// Moderation ////////

function getModerateSubjects(type){
	 if(!$('#moderateEsa').val()){
			showIdMessage("Please Select ESA ","error",'moderateEsa');
			return false;
	}else if(!$('#moderateProgram').val()){
		showIdMessage("Please Select Program ","error",'moderateProgram');
		return false;
	}else if(!$('#moderatedept').val()){
		showIdMessage("Please Select Dept ","error",'moderatedept');
		return false;
	}else if(!$('#moderateSem').val()){
		showIdMessage("Please Select Sem ","error",'moderateSem');
		return false;
	}else if(!$('#moderateStream').val()){
		showIdMessage("Please Select Stream ","error",'moderateStream');
		return false;
	}else if(!$('#moderateClass').val()){
		showIdMessage("Please Select Class ","error",'moderateSection');
		return false;
	}
	
		
		bgCurtain();
		var classbatchsectionId=null;
		if($('#moderateSection').val()){
			classbatchsectionId=$('#moderateSection').val().toString();
		}
		var formData = {
				controllerMode : 6750,
				actionType : 12,
				esaId:$('#moderateEsa').val(),
				batchClass:$('#moderateClass').val(),
				cbsIds:classbatchsectionId,
				menuId : this.menuId
			};
		
		doAjaxCall(this.url, 'GET', formData, function(data) {
			$('#subjectformoderation').html(data);
			if(type!=0){
				moderateSubject(type);
			}
			removeBgCurtain();
			
	});
}

function getModerateSubjectResultDetails(subjectId){
var classbatchsectionId=null;
	if($('#moderateSection').val()){
		classbatchsectionId=$('#moderateSection').val().toString();
	}
	var formData = {
			controllerMode : 6750,
			actionType : 87,
			esaId:$('#moderateEsa').val(),
			subejctId:subjectId,
			batchClass:$('#moderateClass').val(),
			cbsIds:classbatchsectionId,
			menuId : this.menuId
		};
	
	doAjaxCall(this.url, 'GET', formData, function(data) {
		getModalDialog('medium', 'Subject Results Details', data, null, function() {
			
		});
});
	
	
}
function getSubjectToModerate(){
	if($('#subjects').val()!=''){
		var subjects=$('#subjects').val().split(",");
		if(subjects.length>0){
			moderateSubject(subjects[0]);
			
		}
	}else{
		$('#moderationSubject').html('');
	}
	
}

function checkSubjectModeration(subjectId){
	
	var classBatchSectionIds=null;
	if($('#moderateSection').val()){
		classBatchSectionIds=$('#moderateSection').val().toString();
	}
	var formData = {
			controllerMode : 6750,
			actionType : 88,
			esaId:$('#moderateEsa').val(),
			subjectId:subjectId,
			batchClassId:$('#moderateClass').val(),
			cbsIds:classBatchSectionIds,
			menuId : this.menuId
		};
	doAjaxCall(this.url, 'GET', formData, function(data) {
		var dataArray = data.split("_");
		var status = dataArray[0].toUpperCase();
		var statusResp = dataArray[1];
		if (status == "SUCCESS") {
			moderateSubject(subjectId);
		}else{
			getConfirmDialog(
					"Moderate Subject",
					statusResp,
					function() {
						moderateSubject(subjectId);
					});
		}
		});
}

function moderateSubject(id){
	var classbatchsection=null;
	if($('#moderateSection').val()){
		classbatchsection=$('#moderateSection').val().toString();
	}
	
	var formData = {
			controllerMode : 6750,
			actionType : 51,
			esaId:$('#moderateEsa').val(),
			subejctId:id,
			batchClassId:$('#moderateClass').val(),
			cbsIds:classbatchsection,
			menuId : this.menuId
		};
	
	doAjaxCall(this.url, 'GET', formData, function(data) {
		$('#moderationSubject').html(data);
});
}

function moderateMapFunction(grades){
	
	
	  $('[id^=grph_]').each( function() {
		    
		    var currId = $(this).attr('id');
		    var adata = JSON.parse('[' + $(this).attr('grph-data') + ']');
		    // var adata = [10, 20, 30, 40];
		    // console.log(adata);

		    Highcharts.chart(currId, {
		        chart: {
		            type: 'spline'
		        },
		        title: {
		            text: '% of Grades obtained in individual Subject',
		            align: "left",
		            margin: 0,
		            x: 35,
		            y: 0,
		            style: { "color": "#055087", "fontSize": "14px", "fontWeight": "600" }
		        },
		        credits: {
		          enabled: false
		        },
		        subtitle: {
		          text: ''
		        },
		        exporting: {
		          enabled: false
		        },
		        legend: {
		          align: "left",
		          margin: 0,
		          itemMarginBottom: 0,
		          itemMarginTop: 0,
		          x: 25
		        },
		        xAxis: {
		            categories: grades              
		        },
		        yAxis: {
		            title: {
		                text: 'Grade in %',
		                style: { "fontSize": "11px", "fontWeight": "600" }
		            },
		            max :100,
		            tickInterval :25
		           /*
					 * labels: { formatter: function () { return this.value; } }
					 */
		        },
		        tooltip: {
		            crosshairs: true,
		            shared: true
		        },
		        plotOptions: {
		            spline: {
		                marker: {
		                    radius: 4,
		                    lineColor: '#666666',
		                    lineWidth: 1
		                }
		            }
		        },
		        series: [{
		            name: 'Grades',
		            dataLabels: {
		              style: {"fontSize": "11px", "fontWeight": "bold", }
		            },
		            marker: {
		                symbol: 'square'
		            },
		            data: adata
		        }]
		    });


		    });

	  
	  $("[id^=grade_]").each(function() {
		  var grades=$(this).val().split(",");
		  $(this).bootstrapSlider({ 
		        id: "graph_"+$(this).id, 
		        min: 0, 
		        max: 100, 
		        range: true, 
		        tooltip_split: true, 
		        handle: 'round',
		        value: [getInteger(grades[0],0),getInteger(grades[1],0)]
		      });
		  
		});
	  
			$("#isgradechange").off('click');
			$("#isgradechange").on('click',function() {
				if($("#isgradechange").is(':checked')){
					
					document.getElementById('isgradechange').value=1;
				}else{
					document.getElementById('isgradechange').value=0;
				}
				
			});
			
			
			 $(".spin_put").spinner('delay', 200) // delay in ms
		        .spinner('changed', function(e, newVal, oldVal) {
		            // trigger lazed, depend on delay option.
		            // console.log($(this).val());

		        }).spinner('changing', function(e, newVal, oldVal) {
		            // trigger immediately
		            updateSpinValues(this);

		        }).spinner({
		            step: function(dir) {
		                // 'this' references to the spinner object
		                if ((this.oldValue === 1 && dir === 'down') || (this.oldValue === -1 && dir === 'up')) {
		                    return 2;
		                }
		                return 1;
		            }
		        });
			 
			 
			 $("#graceMarks").on('focusout',function(){
				 getModerationPreview();
			 });
			
}

function updateSpinValues(context) {
    var id = $(context).attr("id").split("_");
    var cLvl = parseInt(id[1]);
    var cMt = parseInt(id[2]);
    var maxLvl = parseInt($('.spin_wrap').size());
    var nxtLvl = 0;
    var prevLvl = 0;
    var nxtmt = 0;
    // console.log($(this).val());
    switch (cMt) {
        case 1: // min value
            prevLvl = cLvl - 1;
            nxtLvl = cLvl + 1;

            for (var i = prevLvl; i > 0; i--) {
                var a00 = parseInt($("#marks_" + (i + 1) + "_1").val());
                var a10 = parseInt($("#marks_" + (i + 1) + "_2").val());
                var b00 = parseInt($("#marks_" + i + "_1").val());
                var b10 = parseInt($("#marks_" + i + "_2").val());

                if (a00<=b10||a00>= b10) {
                    $("#marks_" + i + "_2").val(a00 - 1);
                }
                b10 = parseInt($("#marks_" + i + "_2").val());
                if (b00 >= b10) {
                    $("#marks_" + i + "_1").val(b10 - 1);
                }
                if (a00 >= a10) {
                    $("#marks_" + (i + 1) + "_2").val(a00 + 1);

                    for (var i = nxtLvl; i <= maxLvl; i++) {
                        var a01 = parseInt($("#marks_" + (i - 1) + "_1").val());
                        var a11 = parseInt($("#marks_" + (i - 1) + "_2").val());
                        var b01 = parseInt($("#marks_" + i + "_1").val());
                        var b11 = parseInt($("#marks_" + i + "_2").val());

                        if (a11 >= b01) {
                            $("#marks_" + i + "_1").val(a11 + 1);
                        }
                        b01 = parseInt($("#marks_" + i + "_1").val());
                        if (b01 >= b11) {
                            $("#marks_" + i + "_2").val(b01 + 1);
                        }
                    }
                }
            }


            break;
        case 2: // max value
            prevLvl = cLvl - 1;
            nxtLvl = cLvl + 1;
            for (var i = nxtLvl; i <= maxLvl; i++) {
                var a00 = parseInt($("#marks_" + (i - 1) + "_1").val());
                var a10 = parseInt($("#marks_" + (i - 1) + "_2").val());
                var b00 = parseInt($("#marks_" + i + "_1").val());
                var b10 = parseInt($("#marks_" + i + "_2").val());

                if (a10 >= b00) {
                    $("#marks_" + i + "_1").val(a10 + 1);
                }
                b00 = parseInt($("#marks_" + i + "_1").val());
                if (b00 >= b10) {
                    $("#marks_" + i + "_2").val(b00 + 1);
                }
                if (a00 >= a10) {
                    $("#marks_" + (i - 1) + "_1").val(a10 - 1);

                    for (var i = prevLvl; i > 0; i--) {
                        var a01 = parseInt($("#marks_" + (i + 1) + "_1").val());
                        var a11 = parseInt($("#marks_" + (i + 1) + "_2").val());
                        var b01 = parseInt($("#marks_" + i + "_1").val());
                        var b11 = parseInt($("#marks_" + i + "_2").val());

                        if (a01 <= b11 || a01 >= b11) {
                            $("#marks_" + i + "_2").val(a01 - 1);
                        }
                        b11 = parseInt($("#marks_" + i + "_2").val());
                        if (b01 >= b11) {
                            $("#marks_" + i + "_1").val(b11 - 1);
                        }
                    }
                }
            }

            break;
    }
   if($('#isgradechange').val()==1){
	   getModerationPreview();
   }
    
}

function getModerationPreview()
{
	if($('#graceMarks').val()){
	var subjectId=$('#subjectID').val();
	var gracemarks=$('#graceMarks').val();
	var moderationMasterId=$('#moderationMasterId').val();
	var batchclass=$('#moderateClass').val();
	var cbsIds=null;
	if($('#moderateSection').val()){
		cbsIds=$('#moderateSection').val().toString();
	}
	var arraygrade=[];
	
    $("[id^=marks_]").each(function(){
    	
    	if(this.id.split("_")[2]==1){
    		  var obj={};
    		  obj.configId=$(this).attr('data-value');
    		  obj.from=$(this).val();
    		  obj.to=$('#'+this.id.split("_")[0]+"_"+this.id.split("_")[1]+"_2").val();
    		  arraygrade.push(obj); 
    	}
		  
	  });
	  var grades=JSON.stringify(arraygrade);
	  var moderateEsa=$('#moderateEsa').val();
	  var isgradechange=$('#isgradechange').val();
	var formData = {
			controllerMode :6750,
			actionType : 54,
			id : 0,
			subjectId:subjectId,
			gracemarks:gracemarks,
			grades:grades,
			moderateEsa:moderateEsa,
			moderationMasterId:moderationMasterId,
			isgradechange:isgradechange,
			batchclass:batchclass,
			cbsIds:cbsIds,
			menuId : this.menuId
		};
		doAjaxCall(url, 'GET', formData, function(data) {
			
				$('#moderationSubject').html(data);
				checkPrevNextButton();
				
		});
	
	}else{
		showMessage("Enter Grace Marks", "error");
	}
}
function moderationFinalize()
{
	if($('#graceMarks').val() || $('#isgradechange').val()==1){
		var batchclass=$('#moderateClass').val();
		var cbsIds=null;
		if($('#moderateSection').val()){
			cbsIds=$('#moderateSection').val().toString();
		}
		var subjectId=$('#subjectID').val();
		var gracemarks=$('#graceMarks').val();
		var esaId=$('#esaId').val();
		var arraygrade=[];
	    $("[id^=marks_]").each(function(){
	    	
	    	if(this.id.split("_")[2]==1){
	    		  var obj={};
	    		  obj.configId=$(this).attr('data-value');
	    		  obj.from=$(this).val();
	    		  obj.to=$('#'+this.id.split("_")[0]+"_"+this.id.split("_")[1]+"_2").val();
	    		  arraygrade.push(obj); 
	    	}
			  
		  });
		  var grades=JSON.stringify(arraygrade);
		  var moderateEsa=$('#moderateEsa').val();
		  var moderationMasterId=$('#moderationMasterId').val();
		  var isgradechange=$('#isgradechange').val();
		  
		var formData = {
				controllerMode :6750,
				actionType : 55,
				id : 0,
				subjectId:subjectId,
				gracemarks:gracemarks,
				grades:grades,
				moderateEsa:moderateEsa,
				moderationMasterId:moderationMasterId,
				isgradechange:isgradechange,
				batchclass:batchclass,
				cbsIds:cbsIds,
				menuId : this.menuId
			};
		bgCurtain();
			doAjaxCall(url, 'GET', formData, function(data) {
				var dataArray = data.split("_");
				var status = dataArray[0].toUpperCase();
				var statusResp = dataArray[1];
				if (status == "SUCCESS") {
					showMessage(statusResp, "success");
					getModerateSubjects(subjectId);
					
				}else{
					showMessage(statusResp, "error");
				}

					$('#moderationSubject').html(data);
					removeBgCurtain();
					
			});
	}else{
		showMessage("Enter Grace Marks", "error");
	}
	
}
function clearModerationResult()
{
	$('#moderationSubject').html('');
	$('#subjectformoderation').html('');
}

function getNextOrPreviousSubject(type){
	var subjectId=$('#subjectID').val();
	var allSubjects=$('#subjects').val();
	var subjectIds= allSubjects.split(",");
	var index=subjectIds.indexOf(subjectId);
	
		if(type==0){
			if(index>0){
			moderateSubject(subjectIds[index-1]);
			}
		}else if(type==1){
			if(index<subjectIds.length-1){
			moderateSubject(subjectIds[index+1]);
			
			}
		}
		checkPrevNextButton();
}
function checkPrevNextButton(){
	
	var subjectId=$('#subjectID').val();
	var allSubjects=$('#subjects').val();
	var subjectIds= allSubjects.split(",");
	var index=subjectIds.indexOf(subjectId);
	if(subjectIds.length==1){
		$("#nextbutton").hide();
		$("#previousButton").hide();
	}else if(index==0){
		$("#previousButton").hide();
		$("#nextbutton").show();
	}else if(index==subjectIds.length-1){
		$("#nextbutton").hide();
	}else if( index<0 && index<subjectIds.length-1){
		$("#nextbutton").show();
		$("#previousButton").show();
	}
}
function getStudentResults(type){
	
	var batchclass=$('#moderateClass').val();
	var cbsIds=null;
	if($('#moderateSection').val()){
		cbsIds=$('#moderateSection').val().toString();
	}
	var formData = {
			controllerMode :6750,
			actionType : 38,
			subjectid:$('#subjectID').val(),
			esaid:$('#moderateEsa').val(),
			batchclass:batchclass,
			cbsIds:cbsIds,
			id : 0,
			type:type,
			menuId : this.menuId
		};
	bgCurtain();
	doAjaxCall(this.url, 'get', formData, function(data) {
		getModalDialog('large', 'Student Info', data, null, function() {
			 // eval(this.url +
				// "(controllerMode,actionType,id,selectedData);");
		});
		removeBgCurtain();
	});
}

function getCBSforModeration(){
	
	getCombobox('/Academy/a/i/batchClassSections/' + $('#moderateClass').val(),'moderateSection');
	
}


function getBatchClassForModeration(){
	
	getCombobox('/Academy/a/i/getBatchClassForEsa/'+$('#moderateEsa').val()+'/'+$('#moderateProgram').val()+'/'+$('#moderatedept').val()+'/'+$('#moderateSem').val()+'/'+$('#moderateStream').val() , 'moderateClass');
	$('#moderateSection').html('');
}
// ///////////////End Moderation ///////

// -----Start Upload Profile Picture---//


function uploadProfilePicture(id) {
			var formData = {};
			formData.controllerMode = 6510;
			formData.actionType = 50;
			formData.id = id;
		doAjaxCall(
				'studentProfileAdmin',
				'GET',
				formData,
				function(data) {
					handleUploadShowSuccess(data);
					
				});
}


function loadUploadImg() {
	$("#imgUpload").on("change", function() {
		imgUpload(this);
	});
	
}
function imgUpload(that) {
	bgCurtain();
	var id = $(that).attr("id");
	var reader = new FileReader();
	var errorMsg = "";
	$(that).closest('div').parent().find('#validationError').remove();
	reader.onload = function(e) {
		var imgSrc = e.target.result;
		if (imgSrc.indexOf("data:image/jpeg") > -1
				|| imgSrc.indexOf("data:image/png") > -1
				|| imgSrc.indexOf("data:image/gif") > -1
				|| imgSrc.indexOf("data:image/bmp") > -1) {
		} else {
			errorMsg=_MESSAGES.errorMessages.errorMsg.replace(/#0/g,
					_MESSAGES.errorMessages.imageFormat)
			$(that).closest('div').prepend(errorMsg);
			$("#imgUpload").val("");
			$.unblockUI();
			return;
		}
		if (e.total > 1000141) { // 1Mb Allowed
			errorMsg=_MESSAGES.errorMessages.errorMsg.replace(/#0/g,
					_MESSAGES.errorMessages.imageSize);
			$(that).closest('div').prepend(errorMsg);
			$("#imgUpload").val("");
			$.unblockUI();
			return;
		}
		var img = "<img src='"
				+ imgSrc
				+ "' id=prevImg>"
				+ "<input type='hidden' name='userProfilePicture"
				+ "' id='profilePic" + "'value='" + imgSrc + "' >";

		$("#uploadedPic").html(img);
		 $.unblockUI();
	};
	reader.readAsDataURL(that.files[0]);
}


function handleUploadShowSuccess(data) {
	var buttons = [
			{
				type : "button",
				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='classExChangeSave-id'></span> Save",
				className : "btn-sm btn-default",
				callback : function(e) {
					if (!$("#genericSave").valid())
						return false;
					return handleImageSave("genericSave");
				}
			},
			{
				type : "cancel",
				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span> Cancel",
				className : "btn-sm btn-default",
				callback : null
			} ];
	getModalDialog(
			'large',
			'Upload Profile Picture',
			data,
			buttons)
}


function handleImageSave(formId) {

	
	var formContext = $("#" + formId);
	var postData = formContext.serializeArray();
	var formURL = formContext.attr("action");
	var formData = new FormData(formContext[0]);
	getConfirmDialog(
			"Upload Profile Picture",
			" Do you want to save this picture. Are you sure ?",
			function() {
	if (typeof formURL != 'undefined')
		$.ajax({
			url : formURL,
			type : 'post',
			data : formData,
			enctype : 'multipart/form-data',
			processData : false,
			contentType : false,
			data : formData,
			success : function(data) {
				$(window).off('beforeunload');
				var callBack = false;
				var dataArray = data.split("_");
				var status = dataArray[0].toUpperCase();
				var statusResp = dataArray[1];
				if (status == "SUCCESS") {
					callBack = true;
					// showMessage(statusResp, "success");
					modalDialog.modal('hide');
				} else if (status == "ERROR") {
					showMessage(statusResp, "error");
				}
				if (callBack == true) {
					location.reload();
				}
			},
		});
			});
	return false;
			
}

// -----End Upload Profile Picture---//

// ////////////Assignments/////////////////////
var aryresult=[];
function getAssignmentStudentIds()
{
	$('.checkAssignmentsStudents').off('click');
	$('.checkAssignmentsStudents').on('click',function() {
	
		var i=0;
		 
			$('.checkAssignmentsStudents').each(function() {
				if($(this).is(':checked')){
					var val = $(this).val();
					aryresult.push(val);
					
				}/*else{
					$("[id^=select_all]").prop('checked', false );
				}*/
			
		});
			$("#studentIds").val(aryresult.toString());
		});
	
	
	if($('#studentIds').val()!=undefined)
	{
			var selectedValues= $('#studentIds').val().split(",");
			for (var i = 0; i < selectedValues.length; i++) {
				var studentsIds=selectedValues[i];
				
				var value= $('#studentId_'+studentsIds).val();
				if ($('#studentId_'+studentsIds).val()==studentsIds)
					{
					$('#studentId_'+studentsIds).prop('checked', true );
					}
				
			}
		
}
	
	
	/*selectedValues= $('#studentIds').val().split(",");
	for (var i = 0; i < selectedValues.length; i++) {
		if ($('#'+tRow.id).val() == selectedValues[i]) {
			selectedValues.splice(i, 1);
		}
	}*/
	
	if($('#studentUncheckIds').val()!=undefined)
	{
			var unselectedValues= $('#studentUncheckIds').val().split(",");
			for (var i = 0; i < unselectedValues.length; i++) {
				var studentsUnckeckIds=unselectedValues[i];
				
				var value= $('#studentId_'+studentsUnckeckIds).val();
				
				if ($('#studentId_'+studentsUnckeckIds).val()==studentsUnckeckIds)
					{
					$('#studentId_'+studentsUnckeckIds).prop('checked', false );
					}
				
			}
		
}
	
	selectAllStudents();
}


function selectAllStudents(){
	
 $("#select_all").on('click',function(){
		 
		 var aryresult=[];
			if($(this).prop('checked')==true)
			{
			$('.checkAssignmentsStudents').each(function() {
				$( this ).prop( 'checked', true );
				var val = $(this).val();
				aryresult.push(val);
				
			});
			$('#studentIds').val(aryresult.toString());
			
			
				// $('[name^=checkboxes]').prop('checked',true);
				// $('#selectdStudents').text("|
				// "+$('[name^=promotedStudents]:checked').length+" students
				// selected.")
			}
		else
			{
			/*$('.checkAssignmentsStudents').each(function() {
				$( this ).prop( 'checked', false );
				
				
			});*/
			$('#studentIds').val('');
			}
	});
	
	
	
}
/*
 * function uploadAssignmentFile(dataform,data) {
 * 
 * dataform.append("asgnId",data.split("_")[2]);
 * doAjaxCall("assignmentfileuploads", 'POST', dataform, function(data1) {
 * if(data1=="SUCCESS"){ showMessage("Files Uploaded Successfully","success");
 * }else{ showMessage("Unable to Uploaded the Files please try agian","error"); }
 * },false,false); }
 */


function addDeleteRefUload() {
	var fileIDCount;
	$('.addFUP').on('click', function(e) {
	    e.preventDefault();
	    var tmpId = $(this).parents('.type_upload').prev('.type_upload').find('input').attr('Id').split("_");   
	    // console.log(tmpId);
	    fileIDCount = parseInt(tmpId[1]);
	   
	    $(this).parents('.type_upload').before('\<div class=\"type_upload\"\><div class=\"form-group\"\><div class=\"col-md-offset-3 col-md-4\"\>\<input id=\"filebutton_'+ (fileIDCount+1) + '\" name=\"filebutton_'+ (fileIDCount+1) + '\" data-value="" class=\"input-file\" type=\"file\"\>\<\/div\>\<div class=\"col-md-5 text-right\"\>\<button class\=\"btn btn-xs btn-primary pull-right remFUP\"\>\<span class=\"glyphicon glyphicon-remove-circle\" aria-hidden=\"true\"\>\<\/span\> Remove\<\/button\>\<\/div\>\<\/div\>\<\/div\>');
	
	});
	$(document).on('click', '.remFUP', function(e) {
        e.preventDefault();
        $(this).parents('.type_upload').remove();
        
    });
}


function deleteFiles(fileId, fileName) {
	var formData = {
		id : fileId,
		fileName : fileName
	};
	doAjaxCall("deleteFiles", 'POST', formData, function(data) {
		if (data == "ok") {
			showMessage("removed", "success");
		} else if (data == "error") {
			showMessage("Unable to delete your file please try agian", "error");
		} else {
			showMessage(data);
		}
	});
	}



function evalAssignment(userid,Assignmentid,assignmentName,subjectCode){
	var title=assignmentName+" : "+subjectCode;
	var formData = {
			controllerMode : 7509,
			actionType : 10,
			id : userid,
			Assignmentid :Assignmentid,
			selectedData : selectedData,
			menuId:this.menuId
			};
	doAjaxCall(url, 'POST', formData, function(data) {
		var buttons = [
			   			{
			   				type : "button1",
			   				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true'></span> Save",
			   				className : "btn-sm btn-default",
			   				callback : function(e) {
			   					
			   					/*getConfirmDialog("Assignment Evaluate", "Are you sure you want to save ? ", function() {*/
			   					if (!$("#genericSave").valid() || formErrorList.length>0){
			   						return false;
			   						
			   					}else{
			   						
			   						getConfirmDialog("Assignment Evaluate", "Are you sure you want to save ? ", function() {
					   					
			   							var formData1 = {
					   							controllerMode : 7509,
					   							actionType : 153,
					   							studentIds : userid,
					   							Assignmentid :Assignmentid,
					   							evaluateScore : $('#evaluateScore').val(),
					   							menuId:this.menuId
					   							};
					   					var obj={};
					   					obj.callBack=true;
					   					
					   					handleGenericSave(formData1,obj,0);
					   					getStudentRecordsValue(7509,8,Assignmentid,selectedData)
					   					modalDialog.modal('hide');
			   						});
			   						return false;
			   				}
			   					
			   					/*});	*/
			   			}
			   					
			   			},
			   			{
							type : "cancel",
							label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span> Close",
							className : "btn-sm btn-default",
							callback : null
						}];
		
			getModalDialog('large',title, data, buttons, function() {
				 eval(this.url + "(controllerMode,actionType,id,selectedData);");
				 handleFormValidation('genericSave');			
			},null,null,null);

		});
	}


function setAssignmentsData(json){
  	var allInstances=CKEDITOR.instances;
  	if(allInstances.length!=0){
 	if(json.question)
 	document.getElementById('assign_quest').innerHTML=decodeURI(json.question);
 	if(json.answer!=null){
 		document.getElementById('assign_ans1').innerHTML=decodeURI(json.answer);
  	}
}
	
}
	
// ///////End Assignments///////////////////////






// -----Start Faculty Dept---//

function handleFacultyAttendance(controllerMode,actionType,id,selectedData){
	var formData = {
	controllerMode : controllerMode,
	actionType : actionType,
	id : id,
	selectedData : selectedData,
	menuId:this.menuId
	};
	}

// -----End Faculty Dept---//



function getBatchClassesAndSectionsFn(){
	$("#batchClass").val("");
	$("#sections").val("");
	$('#showDiv').hide();
	$('#studentsDetailsForGradeCardsDetails').text("");
	var batchId=$("#batches").val();
	var programId=$("#program1").val();
	var deptId=$("#depts").val();
	if(!batchId || !programId || !deptId)
		return false;
	getCombobox('/Academy/a/i/batchClass/'+batchId+"/"+programId+"/"+deptId+"/"+1, 'batchClass');
}

function getProgramClass(progId,classId,callback){
	getCombobox('/Academy/a/i/getProgramClasses/'+progId, classId,'','',function(){
		getCombobox('/Academy/a/i/getBranchOfProgramFull/'+progId, 'BranchId',null,null,function(){
			clearUsns();
			if(callback && typeof callback==='function'){
				callback();
			}
		});
	});
}
function SectionsFn(){
	$('#showDiv').hide();
	$('#studentsDetailsForGradeCardsDetails').text("");
	var batchClassId=$("#batchClass").val();
	if($("#batchClass").val()){
		getCombobox('/Academy/a/i/batchClassSections/'+batchClassId, 'sections');
	}	
}
	function getGradeCardsByUSN(id,selectedData)
	{
		if(selectedData.split(":")[1]=="NA"){
			bootbox.alert("Student Data Not Available!")
			return false;
		}
			var loginId=id;
			var w=window.open('reports/Reports/getGradeCardsByUSN/'+id,'_blank');
			w.window.print();

	}


	function viewGradeCardsByUSN(id,selectedData)
	{
		if(selectedData.split(":")[1]=="NA"){
			bootbox.alert("Student Data Not Available!")
			return false;
		}
		
		var loginId=id;
		var formData={
				loginId:id,
				
		}
		
		var url="reports/Reports/viewGradeCardsByUSN";
		formData.Type=1;
		data=JSON.stringify(formData);
		createTempFormAndSubmit({action:url,data:data,method:"POST",name:"formData",id:"studentsDetailsForGradeCardsDetails"});

	}

	function clearNullAndUndefined(val){
        var ret="";
        if(val)
        	ret=val;
        return ret;
        
	}
	function downloadAllStudentGradeCardsByUSN()
	{
		
		var formData={
				instId:$("#instId").val(),
				batchId:$("#batches").val(),
				programId:$("#program1").val(),
				batchClassId:$('#batchClassId').val(),
				branchId:$('#BranchId').val(),
				usn:$("#USNIds").val(),
				studentUsns:$('#studentUsns').val()
		}
		
		
		var url="reports/Reports/downloadAllStudentGradeCardsByUSN";
		formData.Type=1;
		data=JSON.stringify(formData);
		createTempFormAndSubmit({action:url,data:data,method:"POST",name:"formData",id:"studentsDetailsForGradeCardsDetails"});
	
	}


	function getStudentsDetailsForGradeCardsDetails()
	{
		
		if(!$('#program1').val() || !$('#program1').val() || !$('#batchClassId').val()){
			if(!$('#USNIds').val()){
				bootbox.alert("Select Corresponding fields")
				return;
			}
		}
		
		var formData={
				controllerMode : 9010,
				actionType : 5,
				instId:$('#instId').val(),
				batchId:$('#batches').val(),
				programId:$('#program1').val(),
				branchId:$('#BranchId').val(),
				batchClassId:$('#batchClassId').val(),
				usnList:$('#USNIds').val(),
				studentUsns:$('#studentUsns').val(),
				esaId:$('#esaId').val(),
				menuId:this.menuId
		}
		bgCurtain(); 

		doAjaxCall(url, 'GET', formData, function(data) {
			$('#studentsDetailsForGradeCardsDetails').html(data);
			removeBgCurtain();
		});
	};
	
	
	function clearData(){
		$('#showDiv').hide();
		$('#studentsDetailsForGradeCardsDetails').text("");
	}
	function divCalBack(formData,data){
		
	}
	
	function showDownloadBtn(dataExist){
		if(dataExist=='1')
			$("#downloadSelectedStudents").show()
			$("#showDiv").show()
	}



function getFacultyDeptFn(value){
	var batchId=$("#batchId").val(),
	programId=$("#programId").val(),
	deptId=$("#deptId").val();
	if(!batchId || !programId || !deptId)
		return false;
	getCombobox('/Academy/a/i/batchClass/'+batchId+"/"+programId+"/"+deptId+"/"+1, 'getFacultyBatchClassId',null,null,function(){
		getFacultyBatchClassFn($("#getFacultyBatchClassId").attr('data-id'));
	});
}

function getFacultyBatchClassFn(val){
	$('#getFacultySectionId').empty();
	var batchClassId=$("#getFacultyBatchClassId").val();
	if(batchClassId != null){
		getCombobox('/Academy/a/i/batchClassSectionsByPermissions/'+batchClassId, 'getFacultySectionId');
	}
}

function getFacultyDeptSubjectsBySearch(controllerMode, actionType){
	 var rep=true;
	$(".mandatory").each(function() {
		if($(this).val()==0 || $(this).val()==''|| $(this).val()==null){
			rep=false;
			return;
		}
	});
	if(rep){
		var formData = {
				controllerMode : controllerMode,
				actionType : actionType,
				batchId : $("#batchId").val(),
				programId : $("#programId").val(),
				deptId: $("#deptId").val(),
				batchClassId : $("#getFacultyBatchClassId").val(),
				classBatchSectionId : $("#getFacultySectionId").val(),
				sectionId : $("#getFacultySectionId").val(),
				sectionName : $("#getFacultySectionId :selected").text(),
				menuId:this.menuId
			};
		
		doAjaxCall(url, 'GET', formData, function(data) {
			$('#FacultyDeptSubjects').html("");
			$('#FacultyDeptSubjects').html(data);
		});
	}
	else{
		showMessage("Please select all are required fields", "error");
	}		
}	
// -----End Faculty Dept---//

// -----start preventCloseWarn---//


var	customModalDialog=null;
function preventCloseWarn() {
	customModalDialog=null;
	if(modalDialog){
	customModalDialog=modalDialog;
		}
$('[data-dismiss="modal"]').on("click", function(){
	preventCloseWarningMsg();
    return false;
});

$('button[data-bb-handler="cancel"]').on("click", function(){
	preventCloseWarningMsg();
        return false;
    });    
}

function preventCloseWarningMsg(){
getConfirmDialog("Close/Cancel", "Are you sure you want to close/cancel ? ", function() {
	if(customModalDialog){
		customModalDialog.modal('hide');
		customModalDialog=null;
		}else if(modalDialog){
			modalDialog.modal('hide');
		}
	$('[data-dismiss="modal"]').off("click");
	$('button[data-bb-handler="cancel"]').off("click");
});
}
// -----End preventCloseWarn---//


function compareDates(date1,date2){
	var avail=0;
	 if (new Date(date1) <=new Date(date2)) {
		 avail = -1;
     }if(new Date(date1) >=new Date(date2)){
    	 avail = 1;
     }
     if(new Date(date1)==new Date(date2)){
    	 avail = 0;
     }
	 return avail;
}





function getEmailAndMessageLogs(){
	var rep=false;
	if((!$("#sDate").val() || !$("#eDate").val())){
		rep=true;
	}if($("#featureId").val() && rep==true){
		rep=false;
	}
	if(rep){
		showMessage("Please select Date range or Feature name", "error");		
		return;
	}
	if($("#sDate").val() && !$("#eDate").val()){
		showMessage("Please select To Date", "error");		
		return;
	}
	if(!$("#sDate").val() && $("#eDate").val()){
		showMessage("Please select From Date", "error");		
		return;
	}
		var formData = {
				controllerMode : 7070,
				actionType : 5,
				id : 1,
				startDate : $("#sDate").val(),
				endDate :  $("#eDate").val(),
				featureId : $("#featureId").val(),
				menuId : this.menuId
			}
			doAjaxCall('appAdmin', 'GET', formData, function(data) {
				$('#EmailAndMessageLogDetails').html(data);
			});
	
}
function handleFacultyAttendanceReminder(){
	getConfirmDialog(
			"Faculty Attendance Reminder",
			" Do you want to Remind Faculty Attendance. Are you sure ?",
			function() {
		var formData = {
				controllerMode : 6740,
				actionType : 58,
				menuId : this.menuId
			}
			doAjaxCall(this.url, 'GET', formData, function(data) {
				showMessage("Faculty Attendance Reminder assigned successfully", "success");
			});
			});
}




function handleFacultySubjectsearch(){
	$('#knowFacultySubjectsModal').modal('show');
	$('#knowFacultySubjects').val('');
	$('#knowFacultySubjectsModalTable').html('');
			
}


function getFacultySubjectsInfo(){
	var loginId=$('#knowFacultySubjects').val();
	if(loginId && loginId.length>5)
	{
		$('#knowfacultySubjectModalLoginError').html('');
		
		var formData = {
				controllerMode : 6740,
				actionType : 60,
				loginId : loginId,
				menuId:this.menuId,
			};
		doAjaxCall(url, 'POST', formData, function(data) {
			$('#knowFacultySubjectsModalTable').html(data);
			return false;
		});
	}
	else
	{
		$('#knowfacultySubjectModalLoginError').html('Please enter valid Login/Email');
		return false;
	}
}



function showdataval(){
	
	var formData = {
			controllerMode : 7520,
			actionType : 8,
			name : $("#notificationtemplateName").val(),
	        description : $("#description").val(),
	        menuId:this.menuId
		};
	
doAjaxCall(
		'admissionsApp','GET',formData,function(data) {
			getModalDialog('large',"Template", data, "", function(data) {
			
		});
		});
}
// -----Start Student Allocation to faculty Elective Subjects---//
function handleFacultyStudentsSubjectsAllocation(batchClassId, classBatchSectionId, subjectId, subjectCode, subjectName, subjectTypeName, subjectTypeId){
	var formData = {
		controllerMode : 6740,
		actionType : 71,
		batchClassId : batchClassId,
		classBatchSectionId : classBatchSectionId,
		subjectId : subjectId,
		subjectTypeName : subjectTypeName,
		subjectTypeId : subjectTypeId,
		menuId : this.menuId
	};
	var buttons = {};
	var buttons = [ 
					{
						type : "button",
						label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true'></span>Save",
						className : "btn-sm btn-default",
						callback : function(e) {
							saveStudentsByFacultyAndSubject();
							modalDialog.modal('show');
							return false;
						}
					},
	                {
						type : "cancel",
						label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Close",
						className : "btn-sm btn-default",
						callback : null
					} 
				];

	doAjaxCall(this.url, 'get', formData, function(data) {
		getModalDialog('large', "Students Allocation To Faculty - " +subjectCode+" - "+subjectName, data, buttons, function() {

		});
		
	});
}



function studentsUSNPasteAll(currentVal,facultyId, batchClassId, subjectId, facultyName,classBatchSectionId,subjectTypeId){
	
	
	
	if($("#assignStdListHidden").val() != facultyId){
		getStudentsByFacultyAndSubject(facultyId, batchClassId, subjectId, facultyName,classBatchSectionId,subjectTypeId, function(){
			assignStdList.page.len(-1).draw(); 
		});
	} else {
		assignStdList.page.len(-1).draw();
	}

	
	var pasteUSNDialog=    '<div id="pasteAllUSNPopUp" class="wrapper-modal-content-area-pad">'+
    '<form class="form-horizontal">'+
    ' <div class="col-md-12">'+'<fieldset class="grp_frmfld" style="padding-top: 15px;">'+
         '<div class="form-group pastinblk">'+'<label class="col-md-12 control-label" for="">Please paste the values here </label>'+
         '<div class="col-md-12">'+'<textarea class="form-control" autofocus id="studentsUSNs"></textarea>'+'</div>'+
        '     </div>'+'<p class="error"><strong>Note:</strong> Please paste the values separated with comma(,) ex:- xxx, yyyy</p>'+
         '</fieldset>'+'</div>'+' <div id="displayUSNValidationReport" class="col-md-12"></div> </form>'+'</div>';
	
	var buttons = [ {
		type : "button",
		label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Verify",
		className : "btn btn-sm btn-default",
		callback :  function(e){
			verifyCommaSeperatedUSNs(facultyId, batchClassId, subjectId, facultyName, classBatchSectionId,subjectTypeId);
			modalDialog.modal('show');
			return false;
		}	
	} ];
	
	getModalDialog('medium','Paste All',pasteUSNDialog,buttons,null,function() {
		assignStdList.page.len(10).draw(); 
	});
}

function saveStudentsByFacultyAndSubject(){

	var userIds = [];
	$('#assigndStdList > tbody  > tr').each(function() {
			var userId = this.id;
			userIds.push(userId);
	});
	
	
	var facultyId = $("#facultyId").val();
	
	var cv = $("#currentValue").val();
	var subjectBatchId=parseInt($("#"+cv).attr("data-value"));
	subjectBatchName =$("#"+cv).val();	
	var fsId=$("#"+cv).attr("data-fsid");
	

	
	if(subjectBatchId!=0 && !subjectBatchName){
		showMessage('Please Enter Batch Name','error');
		return;
	}
	var formData = {
			controllerMode : 6740,
			actionType : 73,
			batchClassId : $("#batchClassId").val(),
			classBatchSectionId : $("#classBatchSectionId").val(),
			subjectTypeId : $("#subjectTypeId").val(),
			subjectId : $("#subjectId").val(),
			facultyId : facultyId,
			subjectBatchId : subjectBatchId,
			subjectBatchName : subjectBatchName,
			cv : cv,
			fsId:fsId,
			studentId : JSON.stringify(userIds),
			isModified : $("#"+cv).attr("data-modified"),
			menuId : this.menuId
	};
	
	bgCurtain();
	doAjaxCall(this.url,'POST',formData,function(data){				
		if (data.indexOf("SUCCESS") > -1) {
			var msg="";
			if(data.split("_").length>2){
				var cv = data.split("_")[1];	
				var pk = parseInt(data.split("_")[2]);
				if(pk != 0){
					$('#'+cv).attr('data-value',pk); 
				}
				msg=data.split("_")[3];
			}else{
				msg=data.split("_")[1]
			}
			showMessage(msg,'success');
		}else
			showMessage(data.split("_")[1],'error');
		
		removeBgCurtain();
 	});
}


function resetStudentFacultyAllocation(currentVal,facultyId, batchClassId, subjectId, facultyName,classBatchSectionId,subjectTypeId,fsId){
	
	getConfirmDialog("Reset Student Faculty Allocation", "Are you sure you want to reset Students Allocation to "+facultyName+" ?", function() {
		var userIds = [];
		
		var formData = {
				controllerMode : 6740,
				actionType : 73,
				batchClassId : batchClassId,
				classBatchSectionId : classBatchSectionId,
				subjectTypeId : subjectTypeId,
				subjectId : subjectId,
				facultyId : facultyId,
				studentId : JSON.stringify(userIds),
				menuId : this.menuId,
				fsId:fsId,
				subjectBatchId:parseInt($("#"+currentVal).attr("data-value"))
		};
		
		doAjaxCall(this.url,'POST',formData,function(data){
	 		
	 		var dataArray = data.split("_")[1];
			if (data.indexOf("SUCCESS") > -1) {
			showMessage("Reset Successfull",'success');
			$('#showStudentsByFacultyAndSubject').html('');
			$('#manageStudentsByFacultyAndSubject').html('');
			}else
				showMessage(dataArray,'error');
	 	});	
	});
}

function getStudentsByFacultyAndSubject(currentValue,facultyId, batchClassId, subjectId, facultyName,classBatchSectionId,subjectTypeId, callback){
	
	
	var formData = {
			controllerMode : 6740,
			actionType : 72,
			batchClassId : batchClassId,
			classBatchSectionId : classBatchSectionId,
			subjectTypeId : subjectTypeId,
			subjectId : subjectId,
			facultyId : facultyId,
			subjectBatchId : $("#"+currentValue).attr("data-value"),
			subjectBatchName : $("#"+currentValue).val(),
			currentValue : currentValue,
			facultyName : facultyName,
			menuId : this.menuId
		};
	doAjaxCall(url, 'POST', formData, function(data) {
		$('#manageStudentsByFacultyAndSubject').html(data);
		
		if(callback && typeof callback== 'function'){
			callback();
		}
		return displayAssignedStudents(currentValue,facultyId, batchClassId, subjectId, facultyName,classBatchSectionId,subjectTypeId);
	});
	
}

function displayAssignedStudents(currentValue,facultyId, batchClassId, subjectId, facultyName,classBatchSectionId,subjectTypeId){
	var formData1 = {
			controllerMode : 6740,
			actionType : 74,
			batchClassId : batchClassId,
			classBatchSectionId : classBatchSectionId,
			subjectTypeId : subjectTypeId,
			subjectId : subjectId,
			facultyId : facultyId,
			subjectBatchId : $("#"+currentValue).attr("data-value"),
			subjectBatchName : $("#"+currentValue).val(),
			currentValue : currentValue,
			facultyName : facultyName,
			menuId : this.menuId
		};
	
	$('#showStudentsByFacultyAndSubject').html("");
	
	doAjaxCall(url, 'POST', formData1, function(data) {
		$('#showStudentsByFacultyAndSubject').html(data);
		return ;
	});
}


function addOrRemoveStudents(tRow){
	
	if(tRow.checked){
		var userId = $(tRow).val();
		var x = $(tRow).attr("data-name");
	 	var y = x.split('_');
		$('#assigndStdList > tbody:last-child').append('<tr id='+userId+'><td>'+y[0]+'</td><td>'+y[1]+'</td><td>'+y[2]+'</td></tr>');
	}
	else{
		var userId1 = $(tRow).val();
		$('table#assigndStdList tr#'+userId1).remove();
	}
	
}


function addOrRemoveStudentsAll(c){
	
		 if(c.checked){		
			 $("input[name^='student']:checkbox:not(:checked)").each(function () {
			        $(this).prop("checked", true);
			        addOrRemoveStudents(this);
			  });
		 }
		else {
			$("input[name^='student']:checkbox:checked").each(function () {
			        $(this).prop("checked", false);
			       addOrRemoveStudents(this);
			  });
		}		        
}

function pasteValidUSNs(validUSNs){
	
	 $('#assignStdList').find('input[name^="student"]:checked').each(function () {
        $(this).prop("checked", false);
    });
	
	$('#assignStdList').find('input[name^="student"]').each(function () {
	       var data = $(this).attr("data-name");
	       var y = data.split('_');
	       if (validUSNs.indexOf(y[0]) >= 0){
	    	   $(this).prop('checked', true);
	       }   
	 });
	
	$("#assigndStdListTBody").empty();
	
	$('#assignStdList').find('input[name^="student"]:checked').each(function () {
		addOrRemoveStudents(this);
    });

	assignStdList.page.len(10).draw(); 
	modalDialog.modal('hide');
    return false;
}

function isSubjectBatchModified(){
	$("[data-modified]").on('input',function(){
		var thisReq=$(this);
		var enteredValue = $(thisReq).val();
		var cv = $(thisReq).attr('id');
		if(enteredValue){
			 $('#'+cv).attr('data-modified',true); 
		}else{
			 $('#'+cv).attr('data-modified',false); 
		}
	   
	   
	});

}

// -----End Student Allocation to faculty Elective Subjects---//
// //////////Genric Report Scheduler//////////////
	
	function getbatchclassforschedulerreport(){
		var batch=null;
		var program=null;
		var dept=null;
		var classId=null;
		if($('#batch').val()){
			batch=$('#reportbatchId').val();
		}
		if($('#reportdepartmentId').val()){
			dept=$('#reportdepartmentId').val();
		}
		if($('#reportclassId').val()){
			classId=$('#reportclassId').val();
		}
		if($('#reportprogramId').val()){
			program=$('#reportprogramId').val();
		}
		
		getCombobox('/Academy/a/i/getBatchClassReport/'+batch+'/'+program+'/'+dept+'/'+classId, 'reportbatchclassId');
	}


	function getRecipients(){
		var userids="";
		if($("#userRoles").val()!=undefined && $("#userRoles").val()!=''){
			userids=$("#userRoles").val().toString();
			bgCurtain();
			var formData = {
					controllerMode : 7080,
					actionType : 100,
					id :userids,
			        menuId:this.menuId
				};
			
		doAjaxCall(
				'appAdmin','GET',formData,function(data) {
					$('#userlist').html(data);
					 selectAllRecipients();
					removeBgCurtain();
				});
		}else{
			showIdMessage("Please Select User Role", "error","userRoles");
		}

	
	}
	function addUserToRecipients(user){
		
		if($('#recipientIds').val()!=''){
			var aryresult=$('#recipientIds').val().split(",");;
		}else{
		var aryresult=[];
		}
			if($('#'+user.id).is(':checked')){
				var val = $('#'+user.id).val();
				aryresult.push(val);
			}else{
				var index = aryresult.indexOf($('#'+user.id).val());
				if (index > -1) {
					aryresult.splice(index, 1);
				}
			}
			$('#recipientIds').val(aryresult.toString());
	}
	function selectAllRecipients(){
		
		if($('#recipientIds').val()!=undefined && $('#recipientIds').val()!=''){
			var selectedids=$('#recipientIds').val().split(",");
			
			var allPages = genericRecipientsDataTable.column().nodes();
			
			for (var i = 0; i < selectedids.length; i++) {
				var recipientId=selectedids[i];
				
				$.each(allPages, function(index, currentValue)
						{
					var id=currentValue.getAttribute('data-value');
					if(id==recipientId){
						$("[id^=users_"+recipientId+"]",allPages).prop('checked', true );
					}
				});
			}
			
		}
		
		
		$("#genericRecipients").off('click');
		$("#genericRecipients").on('click',function(){
			
			if($('#recipientIds').val()!=''){
				var aryresult=$('#recipientIds').val().split(",");;
			}else{
			var aryresult=[];
			}
			var allPages = genericRecipientsDataTable.column().nodes();
			if($(this).prop('checked')==true)
				{
				aryresult=[];
				$('input[type="checkbox"]', allPages).prop('checked', true);
				
				$.each(allPages, function(index, currentValue)
						{
					aryresult.push(currentValue.getAttribute('data-value'));
				});
				}
			else
				{
					
					$('input[type="checkbox"]', allPages).prop('checked', false);
					aryresult=[];
				}
			$('#recipientIds').val(aryresult.toString());
		});
		
		
		
	}
	
	function genericSchedulerDefault(){
		$("#noEndDate").off('click');
		$("#noEndDate").on('click',function(){
			if($('#noEndDate').prop('checked')==true){
				$('#noEndDate').val(1);
			}else{
				$('#noEndDate').val(0);
			}
			
		});
		// noEndDate
		
		$("#status").off('click');
		$("#status").on('click',function(){
			if($('#status').prop('checked')==true){
				$('#status').val(1);
			}else{
				$('#status').val(0);
			}
			
		});
		
	}
	// //////////End Genric Report Scheduler//////////////

function getNsarStudentAttendanceBySearch(controllerMode,actionType,id,searchType,reportType){
	if(!$("#programId").val() && $("#programId").val()==null && $("#programId").val()==undefined){
		showMessage("Please select program fields", "error");
		return false;
	}
	
	if(!$("#deptId").val() && $("#deptId").val()==null && $("#deptId").val()==undefined){
		showMessage("Please select department", "error");
		return false;
	}
	
	if(!$("#batchId").val() && $("#batchId").val()==null && $("#batchId").val()==undefined){
		showMessage("Please select at least one batch ", "error");
		return false;
	}
	
	 	bgCurtain();
	 	var batchClsId=null;
	 	if($("#batchClassId").val()!=null && $("#batchClassId").val()!=undefined && $("#batchClassId").val()!=""){
	 		batchClsId=($("#batchClassId").val()).toString();
	 	}
		var formData = {
				menuId : this.menuId,
				url : this.url,
				controllerMode : controllerMode,
				actionType : actionType,
				batchClassId:batchClsId,
				departmentId :$("#deptId").val(),
				programId :$("#programId").val(),
				batchIds : ($("#batchId").val()).toString(),
				instId :$("#institutionId").val(),
				reportType:reportType,
				subMenuId : $("#subMenuId").val(),
			};
		doAjaxCall(this.url, 'GET', formData, function(data) {
		$('#showBatchWiseDiv').html('');
		$('#showBatchWiseDiv').html(data);
		removeBgCurtain();
		});
		
	}

function uploadFile(controllerMode, actionType, id, loginId,batchClassId,reportType){
	subMenuId = $("a:focus").attr('subMenu-id');
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			id : id,
			LoginId : loginId,
			batchClassId : batchClassId,
			menuId : this.menuId,
			reportType:reportType,
			subMenuId:subMenuId
		};
		var obj = getDialogMessage(controllerMode, actionType, id, selectedData);
		doAjaxCall(this.url, 'GET', formData, function(data) {
			handleNssrFileUpload(data,reportType);
			
		});
		
}

function handleNssrFileUpload(data,reportType) {
	var text="OverRide";
	var buttons = [
			{
				type : "button",
				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='classNSSRSave-id'></span>Save",
				className : "btn-sm btn-default",
				callback : function(e) {
					if (!$("#genericSave").valid())
						return false;
					return saveNSSRDetails(reportType);
				}
			},
			{
				type : "cancel",
				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
				className : "btn-sm btn-default",
				callback : null
			} ];
	getModalDialog(
			'large',
			text,
			data,
			buttons,
			function() {
				handleFormValidation('genericSave');
			});
}

function saveNSSRDetails(reportType){
				var rep=true;
				$(".mandatory").each(function() {
					if($(this).val()==0 || $(this).val()==''|| $(this).val()==null){
						rep=false;
						return;
					}
				});
				if(rep==true){
				$("#classNSSRSave-id").parent().prop('disabled',true);
				
				var formContext = $("#genericSave");
				var formURL = formContext.attr("action");
				var formData = new FormData(formContext[0]);
				formData.append("menuId",this.menuId);
				
				getConfirmDialog(
						"OverRide",
						" Do you want to OverRide Selected Subjects of this Student. Are you sure ?",
						function() {
						
						doAjaxCall(formURL, 'POST', formData, function(data) {
							var dataArray = data.split("_");
							var status = dataArray[0];
							var statusResp = dataArray[1];		
							if (status == "SUCCESS") {
								showMessage(statusResp, "success");
								modalDialog.modal('hide');
								getNsarStudentAttendanceBySearch(6760,61,1,0,reportType);
							} else{
								showMessage(statusResp, "error");
								$("#classNSSRSave-id").parent().prop('disabled',true);
							}
							
						}, false, false);
						},false);
				$("#classNSSRSave-id").parent().prop('disabled',false);
				}else{
					showMessage("Please fill all required fields", "error");
				}
				return false;
			
}

function getReportNsarStudentAttendance(reportType){
	
	if(!$("#programId").val() && $("#programId").val()==null && $("#programId").val()==undefined){
		showMessage("Please select program fields", "error");
		return false;
	}
	
	if(!$("#deptId").val() && $("#deptId").val()==null && $("#deptId").val()==undefined){
		showMessage("Please select department", "error");
		return false;
	}
	
	if(!$("#batchId").val() && $("#batchId").val()==null && $("#batchId").val()==undefined){
		showMessage("Please select at least one batch ", "error");
		return false;
	}
	 	
	 	
	var batchId=$("#batchId").val();   
	var programId=$("#programId").val();
	var deptId=$("#deptId").val();
	var batchClassId=$("#batchClassId").val();
	var reportType=reportType;
	 window.open('getReportNssrStudentAttendance/'+batchId+'/'+programId+'/'+deptId+'/'+batchClassId+'/'+reportType,'_blank');
	
	
	 
	}




function saveNsarStudentDetails(controllerMode,actionType,subMenuId,reportType){
	
	var programId=$("#programId").val();
	var batchClassId=$("#batchClassId").val();
	var esaId=$("#esaId").val();
	
	if(batchClassId){
		var batchClassId=batchClassId.toString();
	}
	
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			programId:programId,
			esaId:esaId,
			reportType:reportType,
			menuId : this.menuId,
			subMenuId:subMenuId
		}
	var msg="";
	var msg1="";
	if(reportType==1){
		msg="Save NSAR Student Details";
		msg1="Do you want to save NSAR Student List?";
	}else{
		msg="Save Condonation Student Details";
		msg1="Do you want to save Condonation Student List?";
	}
	getConfirmDialog(msg,msg1,
			function() {
	bgCurtain();
		doAjaxCall("instituteApp", 'GET', formData, function(data) {
			showMessage("Saved successfully", "success");
			removeBgCurtain();
		});
	
	});
}


// ////////////// Test Seating Mail////////////


function getStudentcount(controllerMode,actionType){
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			assessmentId:$('#assessmentId').val(),
			menuId : this.menuId,
			
		}
		doAjaxCall(this.url, 'GET', formData, function(data) {
			var dataArray = data.split("_");
			var status = dataArray[0];
			var statusResp = dataArray[1];		
			if (status == "SUCCESS") {
				var response="No Of Students : "+ statusResp;
				$('#studentcount').html(response);
			}
		});
}

function sendTestSeatingAllocation(controllerMode,actionType,type){
	if($('#assessmentId').val()){
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			type:type,
			assessmentId:$('#assessmentId').val(),
			menuId : this.menuId,
			
		}
		doAjaxCall(this.url, 'GET', formData, function(data) {
			var dataArray = data.split("_");
			var status = dataArray[0];
			var statusResp = dataArray[1];		
			if (status == "SUCCESS") {
				showMessage(statusResp, "success");
			}
		});
	}else{
		showMessage("Please Select Assessment", "error");
	}
}

// ///////////End Test Allocation Mail/////////////

function showHideProgramAndBranch(id){
	if($("#status").val() == 1){
		$("#programBranch").show();
	} else {
		$("#programBranch").hide();
	}
}

function getAllBatchClassFn(type){
	var institutionId=$("#instId").val();
	var batchId=$("#batchId").val();
	var programId=$("#programId").val();
	var deptId=$("#deptId").val();

	if(!institutionId || !batchId || !programId || !deptId)
		return false;
	//getCombobox('/Academy/a/i/getAllbatchClass/'+batchId+"/"+programId+"/"+deptId+"/"+1, 'batchClassId',null,null,function(){
	 getCombobox('/Academy/a/i/getBatchClass/'+batchId+"/"+programId+"/"+deptId+"/"+institutionId+"/"+1, 'batchClassId',null,null,function(){
     $('#batchClassId option[value!=""]:first').prop("selected",false);

	});
}



function getAllNSARProgramFn(type){
	var esaId=$("#esaId").val();
	if(!esaId)
		return;
	getCombobox('/Academy/a/i/esaProgramNSAR/'+esaId+'/'+$("#institutionId").val(), "programId",null,null,function(){
		getAllNSARDeptFn(type);
	});
	

}

function getAllNSARDeptFn(type){
		getCombobox('/Academy/a/i/getDeptBasedOnInstId/'+$("#institutionId").val(), 'deptId',null,null,function(){
			getAllNSARBatchesFn(type);
		});

}

function getAllNSARBatchesFn(type){
			getCombobox("/Academy/a/i/batchesByInstIdOrParent/"+$('#institutionId').val(), "batchId",null,null,function(){
				getAllNSARBatchClassFn(type);
	});

}

function getAllNSARBatchClassFn(type){
	var institutionId=$("#institutionId").val();
	var batchId=$("#batchId").val();
	
	if(batchId){
		batchId=batchId.toString();
	}
	var programId=$("#programId").val();
	var deptId=$("#deptId").val();
	
	if(!batchId || !programId || !deptId)
		return false;
	//getCombobox('/Academy/a/i/getAllbatchClass/'+batchId+"/"+programId+"/"+deptId+"/"+1, 'batchClassId',null,null,function(){
	 getCombobox('/Academy/a/i/getBatchClassForNSAR/'+batchId+"/"+programId+"/"+deptId+"/"+institutionId+"/"+1, 'batchClassId',null,null,function(){
     $('#batchClassId option[value!=""]:first').prop("selected",false);

	});
}


function getAllBatchClassFnWithDrawn(type){
	var institutionId=$("#institutionId").val();
	var batchId=$("#batchId").val();
	var programId=$("#programId").val();
	var deptId=$("#deptId").val();

	if(!institutionId || !batchId || !programId || !deptId)
		return false;
	//getCombobox('/Academy/a/i/getAllbatchClass/'+batchId+"/"+programId+"/"+deptId+"/"+1, 'batchClassId',null,null,function(){
	 getCombobox('/Academy/a/i/getBatchClass/'+batchId+"/"+programId+"/"+deptId+"/"+institutionId+"/"+1, 'batchClassId',null,null,function(){
     $('#batchClassId option[value!=""]:first').prop("selected",false);

	});
}



function showHidenumberOfDays(){
	if($("#type").val() == 2){
		$("#numberOfDays").show();
	} else {
		$("#numberOfDays").hide();
	}
}

// /////TimeTableTemplate--start////////

function getTimeTableSlots(){
	var noOfSlots = parseInt($("#totalNoSlots").val());
	var currentSlots=parseInt($("#templateName").attr('slots'));
	var requiredSlots=noOfSlots-currentSlots;
	
	text="";
	if(requiredSlots==noOfSlots){
	text +="<table id='gettemplateData' class='table compact table-striped table-bordered' style='width: 100%;'><thead><tr><th>Serial No</th><th>Start Time</th><th>End Time</th><th>Is Break</th></tr></thead><tbody>";
		for(i=1;i<=noOfSlots;i++){
			
			
			text +="<tr data-type='0'>" +
					"<td data-val='"+i+"' data-name='order'>"+i+"</td>" +
					"<td  data-val='' data-name='start'>"+
					"<div class='input-group date form_time' data-date='' data-date-format='hh:ii:ss' data-link-field='testStart' data-link-format='hh:ii:ss'>" +
					"<input class='form-control' type='text' name='sTime' onchange='timeTableTime(this)' id='sTime_"+i+"' value='' readonly='' data-parent='6' data-link-field='fromDate'>" +
					"<span class='input-group-addon'><span class='glyphicon glyphicon-remove'></span></span> <span class='input-group-addon'><span class='glyphicon glyphicon-time'></span></span> " +
					"</div>"+
					"</td>" +
					"<td data-val='' data-name='end'>" +
					"<div class='input-group date form_time' data-date='' data-date-format='hh:ii:ss' data-link-field='testStart' data-link-format='hh:ii:ss'>" +
					"<input class='form-control' type='text' name='eTime' onchange='timeTableTime(this)' id='eTime_"+i+"' value='' readonly='' data-parent='6' data-link-field='fromDate'>" +
					"<span class='input-group-addon'><span class='glyphicon glyphicon-remove'></span></span> <span class='input-group-addon'><span class='glyphicon glyphicon-time'></span></span> " +
					"</div></td>" +
					"<td data-val='-1' data-name='status'>" +
					"<select class='select_1' data='' 	id='tableStatus' name='tableStatus' data-selected=''>" +
					"<option value='1'>Break</option>" +
					"<option value='0'>No-Break</option>" +
					"</select>" +
					"</td></tr>";
			
		}

		text +="</tbody></table>";
		$('#timetabledata').html("");
		$('#slotsId').html("");
	$('#slotsId').append(text);	
	}else 	if(noOfSlots>currentSlots){
		var row="";
		for(i=currentSlots;i<noOfSlots;i++){
			row +="<tr data-type='0'>" +
			"<td data-val='"+(i+1)+"' data-name='order'>"+(i+1)+"</td>" +
			"<td  data-val='' data-name='start'>"+
			"<div class='input-group date form_time' data-date='' data-date-format='hh:ii:ss' data-link-field='testStart' data-link-format='hh:ii:ss'>" +
			"<input class='form-control' type='text' onchange='timeTableTime(this)' name='sTime' id='sTime_"+i+"' value='' readonly='' data-parent='6' data-link-field='fromDate'>" +
			"<span class='input-group-addon'><span class='glyphicon glyphicon-remove'></span></span> <span class='input-group-addon'><span class='glyphicon glyphicon-time'></span></span> " +
			"</div>"+
			"</td>" +
			"<td data-val='' data-name='end'>" +
			"<div class='input-group date form_time' data-date='' data-date-format='hh:ii:ss' data-link-field='testStart' data-link-format='hh:ii:ss'>" +
			"<input class='form-control' type='text' onchange='timeTableTime(this)' name='eTime' id='eTime_"+i+"' value='' readonly='' data-parent='6' data-link-field='fromDate'>" +
			"<span class='input-group-addon'><span class='glyphicon glyphicon-remove'></span></span> <span class='input-group-addon'><span class='glyphicon glyphicon-time'></span></span> " +
			"</div></td>" +
			"<td data-val='-1' data-name='status'>" +
			"<select class='select_1' data='' 	id='tableStatus' name='tableStatus' data-selected=''>" +
			"<option value='1'>Break</option>" +
			"<option value='0'>No-Break</option>" +
			"</select>" +
			"</td></tr>";
				
			
		}

		$("#gettemplateData tr[mark='1']").remove();
        $("#gettemplateData").append(row);
	}

	
	setDateTimePicker();
	
}

function timeTableTime(ctx){
	$(ctx).closest("td").attr("data-val",$(ctx).val());
}

// /////TimeTableTemplate--End////////

// -----Transcript-----//
function getESATranscript(controllerMode, actionType, id, selectedData) {
	var buttonName = $("a:focus").text();
	var formData = {
		controllerMode : parseInt(controllerMode),
		actionType : parseInt(actionType),
		id : id,
		selectedData : selectedData,
		menuId : this.menuId
	};
	var buttons = [ {
		type : "cancel",
		label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
		className : "btn-default btn-sm",
		callback : null
	} ];
	var that=this;
	var obj = getDialogMessage(controllerMode, actionType, id, selectedData);
	doAjaxCall(this.url, 'GET', formData, function(data) {
		getModalDialog('large',	obj.title,data,buttons,function() {
			eval(that.url
					+ "(formData.controllerMode,formData.actionType,formData.id,formData.selectedData,true);");
			$("#save-span-1").parent().attr("id","generic-save-id");
			
			modalDialog.addClass="ddddd";
});
		$(".outside-action-btn").removeClass("disabled");
	});
	

}


function getStudentsTranscriptsSearch(controllerMode,actionType,type){
	
	var batchId=$("#batchId").val();
	var progId = $("#program").val();
	var batchClassId=$("#batchClassId").val();
	var instId=$("#instId").val();
	var transType=$("#transType").val();
	var usnIds=$("#USNIds").val();
	
	if(!batchId || !progId || !batchClassId){
		if(!usnIds){
			bootbox.alert("Select Corresponding fields")
			return;
		}
	}
	
	
	var that=this;
	var formData={
			controllerMode:controllerMode,
			actionType:actionType,
			type:type,
			batchId:batchId,
			progId:progId,
			batchClassId:batchClassId,
			instId:instId,
			transType:transType,
			usnList:usnIds,
			menuId:this.menuId
			
			
	}
	bgCurtain();
	doAjaxCall(this.url,'POST',formData,function(data){
		removeBgCurtain();
		$("#showTranscriptStudents").html(data);
	});
}

var transcriptStdList=[];
var selectAllStudIds=false;

function addOrRemoveStudentsAllForTransript(objRow){
	var aryresult=[];
	 var allPages=studLists.column().nodes();
	if($('#'+objRow.id).is(':checked')){
		$('input[type="checkbox"]', allPages).prop('checked', true);
		
		$.each(allPages, function(index, currentValue)
				{
				var id=currentValue.getAttribute('data-value');
				aryresult.push(id);
			
		});

	}else{
		$('input[type="checkbox"]', allPages).prop('checked', false);
		aryresult=[];
	}
	$("#studentIds").val(aryresult.toString());
}





function addOrRemoveStudentsForTranscript(objRow)
{
	if($("#studentIds").val()!=''){
		var aryresult=$("#studentIds").val().split(",");
	}else{
		var aryresult=[];
	}

		if($('#'+objRow.id).is(':checked')){
			var val = $('#'+objRow.id).val();
			aryresult.push(val);
			
		}else{
			var index = aryresult.indexOf($('#'+objRow.id).val());
			if (index > -1) {
				aryresult.splice(index, 1);
			}
			$('#selectedStudents tr#'+$('#'+objRow.id).val()).remove();
			$("[id^=checkboxes]").prop('checked', false );
			
		}
		$("#studentIds").val(aryresult.toString());
}


function updateCheckedTranscriptStudents(){
	for(var i in this.getCheckedTranscriptStudentsList){
		$("#transcript_"+this.getCheckedTranscriptStudentsList[i]).prop("checked",true);
	}
}

function downloadTranscripts(controllerMode,actionType,allOrSelected){
	
		var formData={
				controllerMode:controllerMode,
				actionType:actionType,
				menuId:this.menuId,	
			    batch:$("#batchId").val(),
				program:$("#program").val(),
				batchClassId:$("#batchClassId").val(),
				transType:$("#transType").val(),
				selectedUserIds:$("#studentIds").val(),
				usnList:$("#USNIds").val(),
				instId:$("#instId").val(),
				dateOfIssue:$("#dateOfIssue").val(),
				allOrSelected:allOrSelected
		};
			
		if(allOrSelected==0){ // download selected students
				if($("#studentIds").val()==null || $("#studentIds").val()=='' || $("#studentIds").val() == undefined){
					if($("#USNIds").val()==null || $("#USNIds").val()=='' || $("#USNIds").val()==undefined )
					{
						showMessage("Select at least one Student Or Enter USN", "error");
						return;
					}else{
						var url="reports/Reports/transcriptreport";
						formData.Type=1;
						data=JSON.stringify(formData);
						createTempFormAndSubmit({action:url,data:data,method:"POST",name:"formData",id:"showTranscriptStudents"});
						
					}
				}else{
					var url="reports/Reports/transcriptreport";
					formData.Type=1;
					data=JSON.stringify(formData);
					createTempFormAndSubmit({action:url,data:data,method:"POST",name:"formData",id:"showTranscriptStudents"});
					
				}
		}else{ // download all
			
				if(!$("#batchId").val() || !$("#program").val() || !$("#batchClassId").val()){
					if(!$("#USNIds").val()){
						bootbox.alert("Select Corresponding fields")
						return;
					}
				}
			
			var url="reports/Reports/transcriptreport";
			formData.Type=1;
			data=JSON.stringify(formData);
			createTempFormAndSubmit({action:url,data:data,method:"POST",name:"formData",id:"showTranscriptStudents"});
			
			
		}
				
		
}

function previewTranscripts(controllerMode,actionType,usnId,allOrSelected){

	if(allOrSelected.split(":")[1]=="NA"){
		bootbox.alert("Student Data Not Available!")
		return false;
	}
	var formData={
		controllerMode:controllerMode,
		actionType:actionType,
		menuId:this.menuId,	
		transType:$("#transType").val(),
		instId:$("#instId").val(),
	    batch:$("#batchId").val(),
		program:$("#program").val(),
		branch:$("#branchId").val(),
		batchClassId:$("#batchClassId").val(),
		dateOfIssue:$("#dateOfIssue").val(),
		selectedUserId:usnId,
		allOrSelected:allOrSelected
	}

	var url="reports/Reports/previewTranscriptreport";
	formData.Type=1;
	data=JSON.stringify(formData);
	createTempFormAndSubmit({action:url,data:data,method:"POST",name:"formData",id:"showTranscriptStudents"});
}



function createTempFormAndSubmit(obj){
	var form = document.createElement("form");
	form.setAttribute("method", obj.method);
	form.setAttribute("action", obj.action);
	var ip = document.createElement("input");
	ip.setAttribute("type", "hidden");
	ip.setAttribute("name", obj.name);
	ip.setAttribute("value", obj.data);
	form.appendChild(ip);

	function submitToPopup(f) {
	    f.target = '_blank';
	    f.submit();
	};

	$("#"+obj.id).append(form);

	submitToPopup(form);
}

function previewTranscript(controllerMode, actionType, id, selectedData){
	if($("#transType").val()<0){
		showMessage("Select Transcript Type", "error");
		return;
	}
	
	var formData={
			controllerMode:controllerMode,
			actionType:actionType,
			id:id,
			menuId:this.menuId,	
			transType:$("#transType").val(),
	};
	
	doAjaxCall(this.url, "GET", formData, function(data){
		getModalDialog("large", "Preview", data, null);
	})
}


function backToHome(controllerMode,actionType,allOrSelected){

		$("#menuTab_"+this.menuId).trigger("click");
	
}

function downloadIdZipFile(controllerMode, actionType,id,selectedData){
	var w=window.open("reports/Reports/downloadIdZipFile/"+id,null);
}
// -----Transcript Ends-----//


// -------Announcement start ------------//
function deleteThisFile(controller,actionType,id,ctx,imageType){
	var uploadedFilesCount=$("#uploadedFilesCount").val();
	doAjaxCall(url, "GET", {controllerMode:controller ,actionType:actionType ,id:id,menuId:this.menuId}, function(data){
		showMessageStatus(data,function(){
			var uploadedImgCount=$("#uploadedImgCount").val();
			$(ctx).parents("tr").remove();
			uploadedFilesCount=uploadedFilesCount-1;
			$("#uploadedFilesCount").val(uploadedFilesCount);
			if(imageType==1){
				uploadedImgCount=uploadedImgCount-1;
				$("#uploadedImgCount").val(uploadedImgCount);
				
			}

		});
	});
}


function removeUploadeFile(reqId){
	var currentId=$(reqId).attr('id');
	$("#fileImageName").val('');
	$("#ImageFileEdit_0").css("display","none");
    $("#imageFileRemove_0").css("display","none");
	
}


function setAnnouncementDateTimePicker() {
	$('.form_date').datetimepicker({
		weekStart : 1,
		todayBtn : 1,
		autoclose : 1,
		todayHighlight : 1,
		startView : 2,
		minView : 2,
		forceParse : 0,
		showClose : true,
 		startDate: new Date(),
	});
}

// -------Announcement end ------------//


function sortTable(f,n){
	var rows = $('.customTableSort tbody  tr').get();
	
	rows.sort(function(a, b) {
		
		var A = getVal(a);
		var B = getVal(b);
		
		if(A < B) {
			return -1*f;
		}
		if(A > B) {
			return 1*f;
		}
		return 0;
	});
	
	function getVal(elm){
		var v = $(elm).children('td').eq(n).text().toUpperCase();
		if($.isNumeric(v)){
			v = parseInt(v,10);
		}
		return v;
	}
	
	$.each(rows, function(index, row) {
		$('.customTableSort').children('tbody').append(row);
	});
}


function customTableSort(){
	var f_nm = 1;
	$("[data-parent='sort']").click(function(){
		f_nm *= -1;
		var n = $(this).prevAll().length;
		sortTable(f_nm,n);
	});
	$('.customTableSort input[type = "text"]').on('click', function(e){
	// e.preventDefault();
	e.stopPropagation();
	// $(this).parent().off('click');
});
}

function checkStudentNsar(){
	$("select[data-nsar='nsar']").each(function(){
		var status=parseInt($(this).attr('nsar-status'));
		var studentId=$(this).attr('nsar-studentId');
		var subjectId=parseInt($(this).attr('subject-id'));
		var nsrId=parseInt($(this).attr('nsar-id'));
		var esaid=parseInt($(this).attr('esaid'));
		if(nsrId!=0 && status!=2){// Not-Override
		$(this).val(3);// In-eligible
		$(this).after('<a href="javascript:getStudentsNsarDetails(\''+studentId+'\','+ subjectId + ','+ esaid + ')" style="color:#ef0f29;"><u> NSAR Details</u></a>')
		}
		
	});
	
}

function getStudentsNsarDetails(studentId,subjectId,esaid){
	var formData={
			menuId : this.menuId,
			controllerMode : this.controllerMode,
			actionType : 110,
			studentId:studentId,
			subjectId:subjectId,
			esaid:esaid
	}
	doAjaxCall(this.url, 'GET', formData, function(data) {
		 showAction = bootbox.dialog({
			size : 'small',
			title : "Student NSAR Details",
			show : false,
			message : data,
			 keyboard: false,
			onEscape : function(e) {
				
			},
			buttons :[
				   			{
				   				type : "cancel",
				   				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Close",
				   				className : "btn-sm btn-default",
				   				callback : function(e) {
				   					
				   				}
				   			} ]
   			
		});
		showAction.on('shown.bs.modal', function() {

		});

		showAction.on('hidden.bs.modal', function() {
			showAction = null;
		});
		showAction.modal('show');
	});
		
}



function getReportForNSAR(controllerMode, actionType,reportType,id, selectedData) {
	var buttonName = $("a:focus").text();
	var subMenuId = $("a:focus").attr('submenu-id');
	var formData = {
		controllerMode : parseInt(controllerMode),
		actionType : parseInt(actionType),
		id : id,
		reportType:reportType,
		selectedData : selectedData,
		menuId : this.menuId,
		subMenuId:subMenuId
	};
	var buttons = [ {
		type : "cancel",
		label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
		className : "btn-default btn-sm",
		callback : null
	} ];
	var that=this;
	var obj = getDialogMessage(controllerMode, actionType, id, selectedData);
	doAjaxCall(this.url, 'GET', formData, function(data) {
		getModalDialog('large',	obj.title,data,buttons,function() {
			eval(that.url
					+ "(formData.controllerMode,formData.actionType,formData.id,formData.selectedData,true);");
			$("#save-span-1").parent().attr("id","generic-save-id");
			// attachEnterEvent('genericSave','generic-save-id');
			// handleFormValidation('genericSave');
			modalDialog.addClass="ddddd";
});
		
		$(".outside-action-btn").removeClass("disabled");
	});
	
}




function handleFacultyISAReminder(){
	getConfirmDialog(
			"Faculty ISA Reminder",
			" Do you want to Remind Faculty ISA marks entry. Are you sure ?",
			function() {
		var formData = {
				controllerMode : 6740,
				actionType : 80,
				menuId : this.menuId
			}
			doAjaxCall(this.url, 'GET', formData, function(data) {
				showMessage("Faculty ISA marks entry Reminder assigned successfully", "success");
			});
			});
}

function getSubjectsBatchesByFacultyInISA() {
	var batchClassId=$("#getStudentBatchClassId").val();
	var classBatchSectionId=$("#getStudentSectionId").val();
	var subjectId=$("#getStudentSubjectId").val();
	var userId=$("#userId").val();
	$.ajax({
		url : '/Academy/a/i/getSubjectBatchesByFaculty/'+batchClassId+'/'+classBatchSectionId+'/'+subjectId+'/'+userId,
		success : function(result) {
			$('#subjectsBatchId').empty();
			result=JSON.parse(result);
			if(result.subjectBatch){
				$('#getSubjectsBatchIdDiv').show();
				$('#subjectsBatchId').append(result.subjectBatch);
				
				$("#subjectsBatchId option").each(function(){
					if($(this).text()=='null'){
						$(this).text("All");
					}
				});
				$("#subjectsBatchId").val($("#subjectsBatchId option:first").val());
			}else{
				$('#getSubjectsBatchIdDiv').hide();
			}	
		}
	});
}

function checkIsDeptWiseInISA(){
	if(this.menuId==850){
		var userId=$("#facultyId_"+$("#getStudentSubjectId").val()).val();
		$("#userId").val("");
		if(userId){
			$("#userId").val(userId);
		}else{
			$("#getStudentSectionId").val($("#getFacultySectionId").val());
		}
		$("#getStudentSectionId").val($("#getFacultySectionId").val());
		var subjectBatchId=$("#subjectBatchId_"+$("#getStudentSubjectId").val()).val();
		if(subjectBatchId){
			$("#subjectsBatchId").val("");
			$("#subjectsBatchId").val(subjectBatchId);	
		}

		
	}
}



function checkStudentESAConfirmDetails(){
	$("[student-confirm='esa']").each(function(){
		var formData={
				status : parseInt($(this).attr('studentConfirmStatus')),
				studentId : $(this).attr('studentId'),
				esaid : parseInt($(this).attr('esaid')),
				classBatchSectionId:parseInt($(this).attr('classBatchSectionId')),
				studentConfirmStatusInfo:$(this).attr('studentConfirmStatusInfo'),
		}
		getESAStudentLink(formData);
	
	});
	
}

function getESAStudentLink(formData){
	$("#esaStudent_"+formData.studentId).empty();
	var formDataReq=JSON.stringify(formData);
	if(formData.status==2){
		$("#esaStudent_"+formData.studentId).append("<a href='javascript:getStudentESAConfirm("+formDataReq+")' id=currentStudentEsa_"+formData.studentId+" style='color:#220eef;'><u>Confirmed</u></a>")
		}else{
		$("#esaStudent_"+formData.studentId).append("<label><input type='checkbox' onclick='javascript:getStudentESAConfirm("+formDataReq+")' id=currentStudentEsa_"+formData.studentId+"><span style='color: #f70d12;display: block;text-decoration: underline;font-weight: normal;'>"+formData.studentConfirmStatusInfo+"</span></label>")
		}
}

function getStudentESAConfirm(formDataReq){
	$("[id^=currentStudentEsa_]").attr("disabled",true);
	$("#currentStudentEsa_"+formDataReq.studentId).prop('checked', true);
	if(showAction)
		return;
	
	var formData={
			menuId : this.menuId,
			controllerMode : this.controllerMode,
			actionType : 81,
			studentId:formDataReq.studentId,
			esaid:formDataReq.esaid,
			classBatchSectionId:formDataReq.classBatchSectionId
	}
	doAjaxCall(this.url, 'GET', formData, function(data) {
		 showAction = bootbox.dialog({
			size : 'small',
			title : "Confirm Student Reason",
			show : false,
			message : data,
			 keyboard: false,
			onEscape : function(e) {
				
			},
			buttons :[{
				   				type : "cancel",
				   				label : "<span class='glyphicon glyphicon-remove-circle' id='closeEsaConfirm' aria-hidden='true'></span>Close",
				   				className : "btn-sm btn-default",
				   				callback : function(e) {
				   					
				   				}
				   			} ]
   			
		});
		showAction.on('shown.bs.modal', function() {

		});

		showAction.on('hidden.bs.modal', function() {
			$("[id^=currentStudentEsa_]").attr("disabled",false);
			showAction = null;
			if(formDataReq.status!=2)
			$("#currentStudentEsa_"+formDataReq.studentId).prop('checked', false);
		});
		showAction.modal('show');
		if(formDataReq.status!=2){
		var fData=JSON.stringify(formDataReq);
		$("#closeEsaConfirm").parent().before("<a href='javascript:saveStudentESAConfirmation("+fData+")' " +
		"class='btn btn-sm btn-default' id='saveESAStudentDesc'><span class='glyphicon glyphicon-ok-circle'></span>Save</a>")
		}
		$("[id^=currentStudentEsa_]").attr("disabled",false);
	});
	
}

function saveStudentESAConfirmation(formDataReq){
	if(!$("#esaconfirmInfo").val()){
		showMessage("Please provide Student confirmation reason", "error");
		return;	
	}
	var formData = {
			menuId : this.menuId,
			controllerMode : this.controllerMode,
			actionType : 82,
			studentId:formDataReq.studentId,
			esaid:formDataReq.esaid,
			classBatchSectionId:formDataReq.classBatchSectionId,
			esaconfirmInfo:$("#esaconfirmInfo").val()
		};
	doAjaxCall(this.url, 'POST', formData, function(data) {
	var dataArray = data.split("_");
	var status = dataArray[0].toUpperCase();
	var statusResp = dataArray[1];
	if (status == "SUCCESS") {
		showMessage(statusResp, "success");
		showAction.modal('hide');
		formDataReq.status=2;
		//getESAStudentLink(formDataReq);
		esaElegibleStudentSearch(370,37,1)
	} else if (status == "ERROR") {
		showMessage(statusResp, "error");
	}
});
}



function getStudentAttendanceBySearch(controllerMode,actionType,id,searchType){
	
	if(!$("#programId").val() && $("#programId").val()==null && $("#programId").val()==undefined){
		showMessage("Please select program fields", "error");
		return false;
	}
	
	if(!$("#deptId").val() && $("#deptId").val()==null && $("#deptId").val()==undefined){
		showMessage("Please select department", "error");
		return false;
	}
	
	if(!$("#batchId").val() && $("#batchId").val()==null && $("#batchId").val()==undefined){
		showMessage("Please select batch ", "error");
		return false;
	}
	
	
	if(!$("#batchClassId").val() && $("#batchClassId").val()==null && $("#batchClassId").val()==undefined){
		showMessage("Please select class ", "error");
		return false;
	}
	
	if($("#sDate").val()=="" || $("#sDate").val()==null || $("#sDate").val()==undefined){
		showMessage("Please select  start Date ", "error");
		return false;
	}
	
	if($("#eDate").val()=="" || $("#eDate").val()==null || $("#eDate").val()==undefined){
		showMessage("Please select  end Date ", "error");
		return false;
	}
	
	
	var startDate = document.getElementById("sDate").value;
    var endDate = document.getElementById("eDate").value;

    if ((Date.parse(startDate) > Date.parse(endDate))) {
    	showMessage("Attendance end date should be greater than Attendance start date",'error');
    	return false;
    }
	
	var formData = {
			menuId : this.menuId,
			url : this.url,
			controllerMode : controllerMode,
			actionType : actionType,
			batchClassId:$("#batchClassId").val(),
			departmentId :$("#deptId").val(),
			programId :$("#programId").val(),
			batchIds : ($("#batchId").val()).toString(),
			instId : ($("#instId").val()),
			startDate : ($("#sDate").val()),
			endDate : ($("#eDate").val()),
			subMenuId : $("#subMenuId").val(),
		};
	bgCurtain();
	doAjaxCall('admissionsApp', 'GET', formData, function(data) {
	$('#showSectionWiseDiv').html('');
	$('#showSectionWiseDiv').html(data);
	removeBgCurtain();
	});

}


function getReportStudentAttendance(){
	
	if(!$("#programId").val() && $("#programId").val()==null && $("#programId").val()==undefined){
		showMessage("Please select program fields", "error");
		return false;
	}
	
	if(!$("#deptId").val() && $("#deptId").val()==null && $("#deptId").val()==undefined){
		showMessage("Please select department", "error");
		return false;
	}
	
	if(!$("#batchId").val() && $("#batchId").val()==null && $("#batchId").val()==undefined){
		showMessage("Please select batch ", "error");
		return false;
	}
	
	
	if(!$("#batchClassId").val() && $("#batchClassId").val()==null && $("#batchClassId").val()==undefined){
		showMessage("Please select  class ", "error");
		return false;
	}
	
	if($("#sDate").val()=="" || $("#sDate").val()==null || $("#sDate").val()==undefined){
		showMessage("Please select  start Date ", "error");
		return false;
	}
	
	if($("#eDate").val()=="" || $("#eDate").val()==null || $("#eDate").val()==undefined){
		showMessage("Please select  end Date ", "error");
		return false;
	}
	
	
	var startDate = document.getElementById("sDate").value;
    var endDate = document.getElementById("eDate").value;

    if ((Date.parse(startDate) > Date.parse(endDate))) {
    	showMessage("Attendance end date should be greater than Attendance start date",'error');
    	return false;
    }
	
	var batchId=$("#batchId").val();   
	var programId=$("#programId").val();
	var deptId=$("#deptId").val();
	var batchClassId=$("#batchClassId").val();
	var instId= $("#instId").val();
	var startDate= $("#sDate").val();
	var endDate= $("#eDate").val();
	var entityId=$("#entityId").val();
	var reportType=reportType;
	 window.open('getReportStudentAttendance/'+batchId+'/'+programId+'/'+deptId+'/'+batchClassId+'/'+instId+'/'+startDate+'/'+endDate+'/'+entityId,'_blank');

	
}


function getHallTicketCheckBox(studentId,esaid,status,hallTktNo){
	var str="";
	var checkedStatus="";
	if(status==2){
		
		str="<span style='color:#220eef;display: inline;font-weight: normal; margin-right: 3px;'>Confirmed</span>"+
		    '<a href="javascript:reSendHallTicket(\''+studentId+'\','+esaid+','+status+',\''+hallTktNo+'\')" style="color: ##d60959; display: inline; border-left: 1px solid #d6af09; padding-left: 4px;"><u>Re-Confirm</u></a>';
		checkedStatus="checked" + " disabled "+ "style= ' display: block; margin: auto; margin-bottom: 5px;'";
	}else{
		str="<span style='color: #f70d12;display: block;font-weight: normal;'>Not Confirmed</span>";
	}
	str="<label><input type='checkbox' student-hallTkt='hallTkt' hallTktChecked='false' "+checkedStatus+ 
			" esaid="+esaid+" id=currentHallTktStudentId_"+studentId+" hallTktStatus="+status+" hallTktNo="+hallTktNo+">" + str
			"</label>";
	return str;
	}



function saveESAConfirmHallTickets(){
	var students=getRequestedHallTkts(1,"");
	if(students.length==0){
		showMessage("Please select at least one student for Hall Ticket confirmation", "error");
		return;	
	}
	getConfirmDialog(
			"Hall Ticket Confirmation",
			" Do you want to confirm the hall ticket's for <b>"+students.length+ "</b> student's . Are you sure ?"
			+"<br><br> <b>Note: </b>Please confirm the hall ticket's after COE approval.",
			function() {
	var formData = {
			menuId : this.menuId,
			controllerMode : this.controllerMode,
			actionType : 83,
			halTicketsJson:JSON.stringify(students),
			esaName : $('#esaName').val(),
			esaInstId : $("#esaInstId").val()
		};
	doAjaxCall(this.url, 'POST', formData, function(data) {
	var dataArray = data.split("_");
	var status = dataArray[0].toUpperCase();
	var statusResp = dataArray[1];
	if (status == "SUCCESS") {
		showMessage(statusResp, "success");
		getRequestedHallTkts(2,"");
	} else if (status == "ERROR") {
		showMessage(statusResp, "error");
	}
});
});
}

function getRequestedHallTkts(type,thisReq){
	var studentIds=[];
	$("[student-hallTkt='hallTkt']").each(function(){
		var status=parseInt($(this).attr('hallTktStatus'));
		var hallTktChecked=$(this).attr('hallTktChecked');
		var hallTktNo=$(this).attr('hallTktNo');

		var esaid=parseInt($(this).attr('esaid'));
		var studentId=$(this).attr('id').split("_")[1]
		if((type==1 && $(this).is(':checked')) && status!=2){ // for get the
																// students
																// array
			var ids={};
				ids['studentId']=studentId;
				ids['esaid']=esaid;
				ids['hallTktNo']=hallTktNo;
				studentIds.push(ids);
		}else if(type==2 && ($(this).is(':checked')&& status!=2)){ // status
																	// change
																	// for saved
																	// students
			$("#hallTktStudent_"+studentId).empty();
			$("#hallTktStudent_"+studentId).append(getHallTicketCheckBox(studentId,esaid,2,hallTktNo));
			$("#currentHallTktStudentId_"+studentId).prop('checked', true);
		}else if((type==3 && status!=2) && parseInt($('#hallTicketStatus').val())!=2){ // checkAll
																						// for
																						// Not
																						// Confirmed
																						// Students
			if($(thisReq).is(':checked'))
			$("#currentHallTktStudentId_"+studentId).prop('checked', true);
			else
			$("#currentHallTktStudentId_"+studentId).prop('checked', false);
		}else if(type==4){  	// dropdown filter
			if(status!=2)
				$("#currentHallTktStudentId_"+studentId).prop('checked', false);
				$("#checkAllId").prop('checked', false);
				var currentVal=parseInt($(thisReq).val());
				var currentRow=$(this).parent().parent().parent().attr("id");
				if(currentVal!=2 && status!=2){
					$("#"+currentRow).show();
				}else if(currentVal==2 && status==2 ){
					$("#"+currentRow).show();
				}else if(currentVal==-1){
					 $("#esaStudentsTable tr").show();
					  return false;
				}else{
					$("#"+currentRow).hide();
				}
			}
	})
	return studentIds;
}


function handleSendHallTicket() {
	if(!$('#usnNumber').val()){
		showMessage("Required USN Number", "Error");
		return;
	}
	if(!$('#userId').val()){
		showMessage("Please get the student students", "Error");
		return;
	}
	var formData = {
		controllerMode : this.controllerMode,
		actionType : 122,
		menuId : this.menuId,
		userId : $('#userId').val()
	};

	doAjaxCall('instituteApp', 'get', formData, function(data) {
		var dataArray = data.split("_");
		var status = dataArray[0].toUpperCase();
		var statusResp = dataArray[1];
		if (status == "SUCCESS") {
			showMessage(statusResp, "success");
		} else if (status == "ERROR") {
			showMessage(statusResp, "error");
		}
	});
	
}


function reSendHallTicket(studentId,esaid,status,hallTktNo){
	var studentIds=[];
	var ids={};
	ids['studentId']=studentId;
	ids['esaid']=esaid;
	ids['hallTktNo']=hallTktNo;

	studentIds.push(ids);
	var id=$("#currentHallTktStudentId_"+studentId).parent().parent().parent().attr("id");
	getConfirmDialog(
			"Re-Confirm Hall Ticket ",
			" Do you want to Re-Confirm the hall ticket for <b>"+id+ "</b> . Are you sure ?"
			+"<br><br> <b>Note: </b>Please Re-Confirm the hall ticket after COE approval.",
			function() {
	var formData = {
			menuId : this.menuId,
			controllerMode : this.controllerMode,
			actionType : 83,
			halTicketsJson:JSON.stringify(studentIds),
			esaName : $('#esaName').val(),
			esaInstId : $("#esaInstId").val()
		};
	doAjaxCall(this.url, 'POST', formData, function(data) {
	var dataArray = data.split("_");
	var status = dataArray[0].toUpperCase();
	var statusResp = dataArray[1];
	if (status == "SUCCESS") {
		showMessage("Hall Ticket Re-Confirmed Successfully", "success");
	} else if (status == "ERROR") {
		showMessage("Unable to Re-Confirm Hall Ticket", "error");
	}
});
})
}


function getFacultyFeedbackDetails(searchType){
	
			 var rep=true;
				$(".mandatory").each(function() {
					if($(this).val()==0 || $(this).val()==''|| $(this).val()==null){
						rep=false;
						return;
					}
				});
		if(rep){	
			if(searchType==1){
				
					var formData = {
							controllerMode : 8060,
							actionType : 8,
							DeptId: $('#deptId').val(),
							ClassesId:$('#classId').val(),
							BatchClassId:$('#batchClassId').val(),
							menuId:this.menuId
						};
					
					bgCurtain();
					doAjaxCall(url, 'GET', formData, function(data) {
						$('#FacultyFeedbackDetails').html("");
						$('#FacultyFeedbackDetails').html(data);
						removeBgCurtain();
					});
			}else if(searchType==2){
		
				var formData = {
						controllerMode : 8060,
						actionType : 123,
						menuId:this.menuId
					};
				
				bgCurtain();
				doAjaxCall(url, 'GET', formData, function(data) {
					removeBgCurtain();
				});
		
			}else if(searchType==3){
			
				var batchClassId=$("#batchClassId").val();
				window.open('getReportForFacultyFeedback/'+batchClassId,'_blank');
			}
	
		}else{
			showMessage("Please select all are required fields", "error");
		}
}


function getReportWithDrawnSubjectsBySearch(controllerMode,actionType,reportType){
	
	 var rep=true;
		$(".mandatory").each(function() {
			if($(this).val()==0 || $(this).val()==''|| $(this).val()==null){
				rep=false;
				return;
			}
		});
	
		if(rep){
				var formData = {
						menuId : this.menuId,
						controllerMode : controllerMode,
						actionType : actionType,
						batchClassId:($("#batchClassId").val()).toString(),
						departmentId :$("#deptId").val(),
						programId :$("#programId").val(),
					    batchIds : $("#batchId").val(),
					    instId:$("#institutionId").val()
					};
				
				
				if(reportType==2){
					bgCurtain();
					doAjaxCall('admissionsApp', 'GET', formData, function(data) {
						$('#showWithDrawnSubjects').html('');
						$('#showWithDrawnSubjects').html(data);
						removeBgCurtain();
						});
					
				}else{
					
					var batchClassId=$("#batchClassId").val();
					var departmentId =$("#deptId").val();
					var programId =$("#programId").val();
					var batchIds = $("#batchId").val();
					
					window.open('getReportForWithDrawnStudents/'+batchClassId+'/'+$("#institutionId").val(),'_blank');
					
				}
				
		}else{
			showMessage("Please select all are required fields", "error");
		}	
}


function getEsaSectionWise(){
	if(!$('#esaInstId').val() || !$('#esaProgId').val() || !$('#esaDeptId').val() || !$('#esaSemesterId').val() || !$('#esaCycleId').val() )
		return false;
	getCombobox('/Academy/a/i/getESASections/'+$('#esaProgId').val()+'/'+$('#esaDeptId').val()+'/'
			+$('#esaSemesterId').val()+'/'+$('#esaCycleId').val()+'/'+$('#esaInstId').val(), 'esaSectionId',null,null,function(){
		$('#esaSectionId option:first-child').attr("selected", "selected");
	});
}


var lastSelectedEle;

function focusCurrentRow() {
    if ($('.tble_focusrow').length > 0) {
        $('.tble_focusrow > tbody > tr > td').on("click", function(e) {

            if (e.ctrlKey) {
                $(this).parent().toggleClass("active_row");
                lastSelectedRow = $(this).parent();
            }

            if (!e.ctrlKey && !e.shiftKey) {
                if ($(this).parent().hasClass('active_row')) {
                    $(this).parent().closest('tbody').children().removeClass('active_row');
                    $(this).parent().removeClass("active_row");
                } else {
                    $(this).parent().closest('tbody').children().removeClass('active_row');
                    $(this).parent().toggleClass("active_row");
                    lastSelectedRow = $(this).parent();
                }
            }

            // console.log(lastSelectedRow);

            if (e.shiftKey) {
                var indexes = [$(lastSelectedRow).index(), $(this).parent().index()];
                indexes.sort(function(a, b){return a - b});

                for(var i = indexes[0]; i <= indexes[1]; i++ ) {
                    $(this).parent().closest('tbody').children().eq(i).addClass('active_row');
                }
            }            

        });
    }
}

function clearEsaDiv(){
	$('#showESAStudents').html("");
}

function getSeletedSyllabus() {
	
	if(!$("#institutionId").val() && !$("#programId").val() && !$("#batchId").val() && !$("#classId").val()) {
		showMessage("Please Select Institution, Program, Batch Or Semester", "error");
		return false;
	}
	
	bgCurtain();
	
	var formData = {
		controllerMode : 7550,
		actionType : 5,
		searchType : 1,
		institutionId : $("#institutionId").val(),
		programId : $("#programId").val(),
		batchId : $("#batchId").val(),
		classId : $("#classId").val(),
		menuId : this.menuId
	};
	
	doAjaxCall(this.url, 'get', formData, function(data) {
		$("#getSeletedSyllabusSubjects").html(data);
		removeBgCurtain();
	});
}

function handleManageSyllabusContent(controllermode, actiontype, SubjectId, courseInfo) {
	
	var buttons = [ {
		type : "button",
		label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true'></span>Save",
		className : "btn-sm btn-default",
		callback : function(e) {
			if (!$("#genericSave").valid() || !titleandcontentvaild())
				return false;
			return  handleSyllabusSave(controllermode, actiontype, SubjectId, courseInfo);
		}
	},
	{
		type : "cancel",
		label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
		className : "btn-sm btn-default",
		callback : null
	} ];
	
//	var courseInfoInArray = courseInfo.split('-');
	
	var formData = {
			controllerMode : controllermode,
			actionType : actiontype,
			menuId : this.menuId,
//			CourseCode : courseInfoInArray[0],
//			CourseName : courseInfoInArray[1],
			SubjectId :SubjectId
	};
	
	doAjaxCall(this.url, 'get', formData, function(data) {
		getModalDialog('large', "Manage Syllabus Content", data, buttons, function() {
			getCombobox('/Academy/a/i/getcourseContentType', 'courseContentType');
		}, function() {
			 for (var i in CKEDITOR.instances) {
					try {
						var obj = CKEDITOR.instances[i];
						obj.on('destroy', function() {});
						obj.destroy();
					} catch (e) {}
			 }
		});
	});
	
	return false;
}

function titleandcontentvaild()
{
	var ret=true;
	$("[id^=courseContent_]").each( function(){
			if($(this).text().trim().length<=0){
				ret= false;
				showMessage("Contents Required", "error");
	        return false;
			}
	});
	return ret;
}

function handleSyllabusSave(controllermode, actiontype, SubjectId, courseInfo) {
	
	var arr = [];
	
//	var courseInfoInArray = courseInfo.split('-');
	
	var formData = {
			controllerMode : controllermode,
			actionType : 200,
			menuId : this.menuId,
//			CourseCode : courseInfoInArray[0],
//			CourseName : courseInfoInArray[1],
			subjectId : SubjectId
	};
	
	$('[id^=heading]').each( function() {
		var obj = {}
		obj.courseContentId = $(this).attr('data-coursecontentid');
		obj.title = encodeURIComponent($(this).html().trim());
		obj.content = encodeURIComponent($('#courseContent_'+$(this).attr('id').split("_")[1]).html().trim());
		arr.push(obj);
	});

	var courseContentType = $('#courseContentType').val();
    var coursecodesel = $('#courseCode-textarea').val();
    var styleId = $('#styleId :selected').val();
	
    formData.editSylb = JSON.stringify(arr);
	formData.deleteSylb = $('#deleteSylb').val();
	formData.courseContentType = courseContentType;
    formData.coursecodesel = coursecodesel;
    formData.oldPreReq = $("#oldPreReq").val();
    formData.styleId = styleId;
	
	doAjaxCall(this.url, 'get', formData, function(data) {
		 var dataArray = data.split("_");
		 var status = dataArray[0].toUpperCase();
		 var statusResp = dataArray[1];
		 if (status == "SUCCESS") {
			 if(modalDialog)
				 modalDialog.modal('show');
			 showMessage(statusResp, "success");
		 } 
		 else if (status == "ERROR") {
			showMessage(statusResp, "error");
		 }
	});
	return false;
}

function addCourseContent(j){
	var x=j+1;
	  var fieldHTML1 = '<div><div class="form-group">'
          +'<label class="col-md-2 control-label" for=""><strong>Title</strong></label>'
          +'<div class="col-md-8" id=""><div id="heading_'+x+'" data-coursecontentid="'+0+'" contenteditable="true" ></div>'
          +'</div></div>'
          +'<script> '
          +'CKEDITOR.inline("heading_'+x+'");CKEDITOR.instances["heading_'+x+'"].setData("");</script><div class="form-group" >'
	      +'<label class="col-md-2 control-label" for=""><strong>Content</strong></label>'
	      +'<div class="col-md-8" id="">'
	      +'<div id="courseContent_'+x+'"  data-coursecontentid="'+0+'"  contenteditable="true" ></div></div></div>'
	      +'<script type="text/javascript">'
	      +'CKEDITOR.inline("courseContent_'+x+'");'
	      +'CKEDITOR.instances["courseContent_'+x+'"].setData(""); </script><a href="javascript:void(0);" class="btn btn-xs btn-default remove_button pull-right" val="'+x+'" title="Remove" style="position: relative; top: -23px;"><span class="glyphicon glyphicon-minus"></span></a></div>';
	      
	  return fieldHTML1;
}

function getSelectCourseContentType(value) {
	
	var formData = {
			controllerMode : 7550,
			menuId : this.menuId,
			SubjectId : $("#subjectId").val(),
			courseContentType : value
	};
	
	if(parseInt(value) == 4) {
		formData.actionType = 125;
	} else {
		formData.actionType = 126;
	}
	
	doAjaxCall('appAdmin', 'POST', formData, function(data) {
		$("#selectedSylbContent").html(data);
	});
}

function deleteForPrerequisite() {
	$("#courseCode-textarea :selected").remove()
}

function handleManageSyllabusContentForPreview(controllermode, actiontype,SubjectId, courseInfo){
	
	var courseInfo1=courseInfo.split('-');
	var formData = {
			controllerMode : controllermode,
			actionType : actiontype,
			menuId:this.menuId,
			CourseCode : courseInfo1[0],
			CourseName : courseInfo1[1],
			courseContentType:$("#courseContentType").val(),
			SubjectId :SubjectId
		};
	doAjaxCall(this.url, 'get', formData, function(data) {
		getModalDialog('large', "Manage Syllabus Content", data, null,null);


	});
}


function loadAnnouncementIcons(){
	isReUsedIcon=0;
	 dafaultPath=document.getElementById("announcementIconId").src;
	annType=1;
	if($("#picture").is(':checked')){
		annType=2;
	}
	var formData = {
			controllerMode : 380,
			actionType : 107,
			annType:annType,
	        menuId:this.menuId
		};
	doAjaxCall('instituteApp', 'GET', formData, function(data) {
		 showAction = bootbox.dialog({
			size : 'large',
			title : "Details",
			show : false,
			message : data,
			 keyboard: false,
			onEscape : function(e) {
				
			},
			buttons :[
						{
							type : "button",
							label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='classIconSave-id'></span>OK",
							className : "btn-sm btn-default",
							callback : function(e) {
								var flag=false;
								 var image = new Image();
						            image.src =selectedPath;
						            	
						        	if(image.width > 52 || image.height > 52){
					            		flag=true;
							            }else{
							            	if(image.width < 50 || image.height < 50){
								            	flag=true;
						            		}
							            }
						        	
									if(flag){
										showMessage("Please upload icon image 52X52 pixel only", "error");
										return false;
									}								
									$("#announcementIconId").attr('src', selectedPath);
									$('#IconPathInBase64').val(selectedPath);
									$('#isReUsedIcon').val(isReUsedIcon);
									
								
								
							}
						},
			   			{
			   				type : "cancel",
			   				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Close",
			   				className : "btn-sm btn-default",
			   				callback : function(e) {
			   					$("#announcementIconId").attr('src', dafaultPath);
			   				}
			   			} ]
   			
		});
		showAction.on('shown.bs.modal', function() {

		});

		showAction.on('hidden.bs.modal', function() {
			showAction = null;
		});
		showAction.modal('show');
	});
		
}



function reUseAnnouncementIcon(docPath,thisReq,clickeId){
	var announcementPath=$('#announcementIconPath').val();
	var currentId=$(thisReq).attr('id');
	if(!announcementPath)
		{
		selectedPath=document.getElementById("imagePath_"+clickeId).src;
		isReUsedIcon=1;
		
			if($("#"+currentId).is(':checked')){
				$('#showDiv').hide();
					$("[data-parent='selectedImage']").each(function() {
						if(currentId!=this.id){
							$("#"+this.id).prop("checked",false);
						}
					});
			}
			if(!$("#"+currentId).is(':checked')){
				isReUsedIcon=0;
			}
		}else{
			$("#"+currentId).prop("checked",false);
			if(!$("#"+currentId).is(':checked')){
				showMessage("Icon already Uploaded,Please remove added Icon and select!", "error");
			}
		}
}

function announcementAttachments(){

	$("#addAnnouncementIcon").on("change","[id^=announcementIconPath]",function(){
		var flag=false;
		if(isReUsedIcon==0){
			if(($(this)[0].files[0].type.indexOf("image/")>-1)){
					 var file=$(this)[0].files[0];	
					    if (file) {
					    	fn=file.name;
					    	var ext=fn.substring(fn.lastIndexOf("."));
							ext=ext.substring(1);
					    	
					        var reader = new FileReader();
					        reader.onload = function(readerEvt) {
					            var binaryString = readerEvt.target.result;
					            var imageSize = new Image();
					            imageSize.src = readerEvt.target.result;
					            
					            
					            imageSize.onload = function () {
		                            var height = this.height;
		                            var width = this.width;
		                            if (height > 52 || width > 52) {
		                            	$("#showErrorIconMessage").show();
		                               
		                            }else{
		                            	$("#showErrorIconMessage").hide();
		                            }
		                           
		                        };
					            
					            var image = new Image();
					            	image.src =binaryString;
					            	selectedPath= binaryString;
					            	selectedOriginalPath= binaryString;
					            	isReUsedIcon=0;
					        
							        };
								
								        reader.readAsDataURL(file);
								        $("#ImageFileEdit").css("display","block");
								        $("#imageFileRemove").css("display","block");
								        
								    } 		
				
			}else{
				showMessage("Only Image files allowed!", "error");
				$(this).val(null);
			}
		}else{
			showMessage("Upload only one Image!", "error");
			$(this).val(null);
		}
		
			
			
	});
}



function cropIcon(val){
	tempModel=null;
	if(modalDialog){
		tempModel=modalDialog;
		}
	
	firstDialogBox =$.extend(true,{},modalDialog);

	var idValues=0;
	
	var img;
	if($("#picture").is(':checked')){  
		 img = "<div class='clearfix'><div class='col-md-12' id='cropImage' style='display:block;margin-top: 15px;'>" +
		"</div><input type='hidden' id='clickedCroppingId' name='clickedCroppingId' value='"+idValues+"'>" +
				"<div class='col-md-12 text-center' style='margin-bottom:10px;'>" +
				"<input type='button' onclick='croppedIcon();' value='Crop Image'> " +
				"<input type='button' onclick='saveCroppedIcon();' value='Save Image' style='display:none' id='saveCroppedIcon'>" +
				" </div>"+
		"<img id='cropedImg' style='display: block; width: 512px; height:256px; margin: auto; margin-bottom: 10px;'/></div>";
		
	}else{
		 img = "<div class='clearfix'><div class='col-md-12' id='cropImage' style='display:block;margin-top: 15px;'>" +
		"</div><input type='hidden' id='clickedCroppingId' name='clickedCroppingId' value='"+idValues+"'>" +
				"<div class='col-md-12 text-center' style='margin-bottom:10px;'>" +
				"<input type='button' onclick='croppedIcon();' value='Crop Image'> " +
				"<input type='button' onclick='saveCroppedIcon();' value='Save Image' style='display:none' id='saveCroppedIcon'>" +
				" </div>"+
		"<img id='cropedImg' style='display: block; width: 52px; height:52px; margin: auto; margin-bottom: 10px;'/></div>";
		
	}
	
	
		getModalDialog('medium', "Image",img, null,function(){
			if($("#picture").is(':checked')){  
				croppingImage(idValues);
			}else{
				croppingIcon(idValues);
			}
			
		});
	
}



function croppingIcon(idValues) {
	 $('#cropImage').croppie('destroy');
	        $('#cropImage').croppie({
	            // viewport options
	            viewport: {
	                width: 52,
	                height: 52,
	                type: 'square' // or 'circle'
	            },

	            // boundary options
	            boundary: {
	                width: 100,
	                height: 100,
	            },
	            // addiontal CSS class
	            customClass: '',
	        });

	        var urlBase= selectedOriginalPath;
	        $('#cropImage').croppie('bind',{
	          url:urlBase,
	          points: [10,200,10,200],
	        });
	      
	       
};



function croppingImage(idValues) {
	 $('#cropImage').croppie('destroy');
	        $('#cropImage').croppie({
	            // viewport options
	            viewport: {
	                width: 512,
	                height: 256,
	                type: 'square' // or 'circle'
	            },

	            // boundary options
	            boundary: {
	                width: 550,
	                height: 300
	            },
	            // addiontal CSS class
	            customClass: '',

	        });

	        var urlBase= selectedOriginalPath;
	        $('#cropImage').croppie('bind',{
	          url:urlBase,
	          points: [10,200,10,200],
	        });
	        
	       
};




function croppedIcon(){
    
	
	$('#cropImage').croppie('result', 'canvas').then(function (img) {
      // img is html positioning & sizing the image correctly if resultType is
		// 'html'
      // img is base64 url of cropped image if resultType is 'canvas'
      $('#croppedImage').val(img);
      $('#cropedImg').attr("src",img).show();
      croppedSelectedPath=img;
      var settingImage=img;
      var flag=false;
      var image = new Image();
      image.src =img;
     
      $('#saveCroppedIcon').css('display','inline-block');
      
      
    });
  
}


function saveCroppedIcon(){
	

	selectedPath=croppedSelectedPath;
	
	if($("#picture").is(':checked')){
		$("#PicturePathInBase64").val(selectedPath);
		$("#announcementPicture").attr('src', selectedPath);
		 $("#showErrorMessage").hide();
	}else{
		$('#IconPathInBase64').val(selectedPath);
		$("#showErrorIconMessage").hide();
	}
	
	 modalDialog.modal('hide');
	 modalDialog =$.extend(true,{},firstDialogBox);
	 removeBgCurtain();

}


function announcementPictureFormat(){
	$("#addAnnouncementPicture").on("change","[id^=announcementPicturePath]",function(){
			if(($(this)[0].files[0].type.indexOf("image/")>-1)){
					 var file=$(this)[0].files[0];	
					    if (file) {
					    	fn=file.name;
					    	var ext=fn.substring(fn.lastIndexOf("."));
							ext=ext.substring(1);
					    	
					        var reader = new FileReader();
					        reader.onload = function(readerEvt) {
					            var binaryString = readerEvt.target.result;
					            var image = new Image();
					            var imageSize = new Image();
					            imageSize.src = readerEvt.target.result;
					            
					            
					            imageSize.onload = function () {
		                            var height = this.height;
		                            var width = this.width;
		                            if (height > 256 || width > 512) {
		                            	$("#showErrorMessage").show();
		                               
		                            }else{
		                            	$("#showErrorMessage").hide();
		                            }
		                           
		                        };
					         	  
					            	  var selectedPicturePath= binaryString;
						            	image.src=binaryString;
						            		
						            		$("#announcementPictureDiv").show();
						            		$("#announcementPicture").attr('src', selectedPicturePath);
						            		$("#PicturePathInBase64").val(selectedPicturePath);
						            		selectedPath= binaryString;
							            	selectedOriginalPath= binaryString;
							     					            
							            	/*if($("#announcementPicture").width > 512 || $("#announcementPicture").height > 256){
							            		$("#showErrorMessage").show();
							        	        }else{
							        	        	$("#showErrorMessage").hide();
							        	        }
							        		*/
							        		
					            		
							        };	
								        reader.readAsDataURL(file);   
								        $("#ImageEdit").css("display","block");
								        
								    } 		
				
			}else{
				showMessage("Only image files allowed!!", "error");
				$(this).val(null);
			}
});
//	picture ends
	
	//picture icon starts
	
	$("#addAnnouncementPictureIcon").on("change","[id^=announcementPictureIconPath]",function(){
		if(($(this)[0].files[0].type.indexOf("image/")>-1)){
				 var file=$(this)[0].files[0];	
				    if (file) {
				    	fn=file.name;
				    	var ext=fn.substring(fn.lastIndexOf("."));
						ext=ext.substring(1);
				    	
				        var reader = new FileReader();
				        reader.onload = function(readerEvt) {
				            var binaryString = readerEvt.target.result;
				            var image = new Image();
				            var imageSize = new Image();
				            imageSize.src = readerEvt.target.result;
				            
				            
				            imageSize.onload = function () {
	                            var height = this.height;
	                            var width = this.width;
	                            if (height > 52 || width > 52) {
	                            	$("#showErrorMessageForIcon").show();
	                               
	                            }else{
	                            	$("#showErrorMessageForIcon").hide();
	                            }
	                           
	                        };
				         	  
				            	  var selectedPicturePath= binaryString;
					            	image.src=binaryString;
					            		
					            		$("#announcementPictureIconDiv").show();
					            		$("#announcementPictureIcon").attr('src', selectedPicturePath);
					            		$("#PictureIconPathInBase64").val(selectedPicturePath);
					            		selectedPath= binaryString;
						            	selectedOriginalIconPath= binaryString;
				            		
						        };	
							        reader.readAsDataURL(file);   
							        $("#iconImageEdit").css("display","block");
							        
							    } 		
			
		}else{
			showMessage("Only image files allowed!!", "error");
			$(this).val(null);
		}
});
	
	//picture icon ends
	
}


function removeUploadeIcon(reqId){
	$("#announcementIconPath").val('');
	$("#ImageFileEdit").css("display","none");
    $("#imageFileRemove").css("display","none");
	
}

function clearEsaMarksDiv(){
	$("select[data-clear]").on('change', function(e) {
		$('#showESAStudentsWithMarks').html("");
	});
	
}



function getTypeOfScheduledTemplate(mode,val){
	if(mode==1){ // mode :add/edit mode
		val=parseInt($('#scheduledFor').val());
	}
	if(val==1){
		$('#reportDiv').show();			
	}else if(val==2){
		$('#schedulerreport').val("");
		$('#reportDiv').hide();		
	}
}




// progress report code start

function getInstituteProgressReport(){	
	getCombobox("/Academy/a/i/getRestrictedInstitutesByGroup", "institutionId",null,null,function(){
		getActiveBatchClassesProgressReport();
		if($('#institutionId').val()!=null){
			getBathesProgressReport();
		}
	});
}

function getBathesProgressReport(){
	
	$("#institutionId").change(function(){
		$('#batch').html("");
		$('#program').html("");
		$('#depts').html("");
		$('#semester').html("");
		$('#BatchClassId').html("");
		$('#section').html("");
		$('#getStudentISATempId').html("");
	})
	
	var institutionId= $('#institutionId').val();
	getCombobox("/Academy/a/i/activeBatchesByInst/"+institutionId, "batch",null,null,function(){
		getActiveBatchClassesProgressReport();
		if($('#batch').val()!=null){
			getProgramsProgressReport();
		}
	});
}


function getProgramsProgressReport(){
/*
 * var batchId=$('#batch').val();
 * getCombobox("/Academy/a/i/activePrograms/"+batchId,
 * "program",null,null,function(){
 * 
 * });
 */
	$("#batch").change(function(){		
		$('#program').html("");
		$('#depts').html("");
		$('#semester').html("");
		$('#BatchClassId').html("");
		$('#section').html("");
		$('#getStudentISATempId').html("");
	})
	
	var institutionId= $('#institutionId').val();	
	 getCombobox('/Academy/a/i/facultyProgramForFacultyByInst/'+institutionId, 'program',null,null,function(){
		 getActiveBatchClassesProgressReport();			
			if($('#program').val()!=null){
				getDepartmentsProgressReport();
			}
	 });
}


function getDepartmentsProgressReport(){
	/*
	 * var programId=$('#program').val();
	 * getCombobox("/Academy/a/i/activeDepartments/"+programId,
	 * "depts",null,null,function(){ getActiveBatchClassesProgressReport();
	 * if($('#depts').val()!=null){ getSemesterProgressReport(); } });
	 */
	$("#program").change(function(){		
		$('#depts').html("");
		$('#semester').html("");
		$('#BatchClassId').html("");
		$('#section').html("");
		$('#getStudentISATempId').html("");
	})
	var institutionId= $('#institutionId').val();	
	getCombobox("/Academy/a/i/getRestrictedDepartmentsByInst/"+institutionId, "depts",null,null,function(){
		getActiveBatchClassesProgressReport();
		if($('#depts').val()!=null){
			getSemesterProgressReport();
		}
	});
	
}


function getSemesterProgressReport(){
	
	$("#depts").change(function(){		
		$('#semester').html("");
		$('#BatchClassId').html("");
		$('#section').html("");
		$('#getStudentISATempId').html("");		
	})
	
	var dept=$('#depts').val();
	var batchId=$('#batch').val();
	var programId=$('#program').val();
	getCombobox("/Academy/a/i/activeSemesters/"+dept+'/'+batchId+'/'+programId, "semester",null,null,function(){
		getActiveBatchClassesProgressReport();
	});
}


function getActiveBatchClassesProgressReport()
{
	$("#semester").change(function(){		
		$('#BatchClassId').html("");
		$('#section').html("");
		$('#getStudentISATempId').html("");
	})
	
	var institutionId=$("#institutionId").val();
	var batch=$("#batch").val();
	var program=$("#program").val();
	var dept=$("#depts").val();
	var classes=$("#semester").val();
	
	if(!institutionId || !batch || !program || !dept || !classes)
		return false; 
	getCombobox('/Academy/a/i/getBatchClassInfoForStudentProgress/'+batch+'/'+dept+'/'+program+'/'+classes,'BatchClassId',null,null,function(){
		getRefNameProgressReport();
		
	});
	

}



function getRefNameProgressReport(){
	
	$("#BatchClassId").change(function(){		
		$('#section').html("");
		$('#getStudentISATempId').html("");
	})
	
	var batchClassId=$("#BatchClassId").val();
	if(batchClassId && batchClassId!=null && batchClassId!=undefined){
		getCombobox('/Academy/a/i/batchClassSections/'+batchClassId, 'section',null,null,function(){
			getCombobox('/Academy/a/i/isaTemplateDetailsForProgressReport/'+batchClassId, 'getStudentISATempId',null,null,function(){
				doAjaxCall('/Academy/a/i/refName/'+batchClassId, 'GET', null, function(data) {
					
					if(parseInt($('#ProgressReportId').val())==0){
						$('#RefName').val(data);
					}else{
						$('RefName').val($('#refData').val());
					}
					
					
				});
			});
		});
	}
}


function viewStudentProgressReport(controllerMode, actionType,userId,ClassBatchSectionId){

	if (!$("#genericSave").valid())
		return false;
	
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			userId:userId,
			isaId: $('#getStudentISATempId').val(),
			batchClassId: $('#BatchClassId').val(),
			classBatchSectionId: ClassBatchSectionId,
			ReportDate:$('#reportDate').val(),
			StartDate:$('#startDate').val(),
			EndDate:$('#endDate').val(),
			refName:$('#RefName').val(),
			currentSession:$('#currentSession').val(),
			 Acknowledgement:$('#acknowledgement').val(), 
			/*Acknowledgement:$('#acknowledgement_1').html(),*/
			isRequiredAkngment:$('#isRequiredAkngment').val(),
			ISAName: $("#getStudentISATempId :selected").text(),
			menuId:this.menuId,
			
		};
	
		bgCurtain();
		doAjaxCall('instituteApp', 'POST', formData, function(data) {
			removeBgCurtain();
			
			var tempfileName=data.replace(/\r?\n|\r/g, " ");
			var filename=encodeURIComponent(tempfileName);
			if(filename!=null && filename!='null'){
				window.open('viewProgressReportRecipients/'+filename,'_blank');
			}else{
				showMessage("Data not Available!", "error");
			}
			
			
		});
}

// progress report code end

function resetFacultySubjectsAllocation(){
	$('#instIdSearch').val('');
	$("[data-fs='fs']").each(function(){
		$(this).empty();
	});
	$('#showSectionStatusDiv').html('<div class="error" id="noFeeDetails" style="margin-top: -9px; margin-bottom: 10px; text-align: center;">No Details Found</div>');
	$('#showSectionWiseDiv').html('<div class="error" id="noFeeDetails" style="margin-top: -9px; margin-bottom: 10px; text-align: center;">No Details Found</div>');
	
}

function elemScroll() {
    if ($('.scrlEleWrap').length > 0) {

        $('.scrlEleWrap').scroll(function(e) { 

            $('.elemfix').css("left", $(this).scrollLeft());

        });

    }
     
}


function getProgressReport(controllerMode,actionType,manageDataId,selectedData){
	var formData = {
			controllerMode : 368,
			actionType : 6,
			ProgressReportId:manageDataId,
	        menuId:this.menuId,
	        
		};
	bgCurtain();
	doAjaxCall('instituteApp', 'GET', formData, function(data) {
		removeBgCurtain();
		 showAction = bootbox.dialog({
			size : 'large',
			title : "Create Progress Report",
			show : false,
			message : data,
			 keyboard: false,
			onEscape : function(e) {
				
			},
			
			buttons :[
						{
							type : "button",
							label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='classIconSave-id'></span>OK",
							className : "btn-sm btn-default",
							callback : function(e) {
								$("#menuTab_" + $('#menuId').val()).trigger("click");
								
							}
						},
			   			{
			   				type : "cancel",
			   				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Close",
			   				className : "btn-sm btn-default",
			   				callback : function(e) {
			   					$("#menuTab_" + $('#menuId').val()).trigger("click");
			   				}
			   			} ]
  			
		});
		showAction.on('shown.bs.modal', function() {

			/* getProgressReportSelction(); */

			handleFormValidation('genericSave');

			getInstituteProgressReport();
			
		});

		showAction.on('hidden.bs.modal', function() {
			showAction = null;
		});
		showAction.modal('show');
		
	});
}

function saveProgressReportRecipients(controllerMode, actionType)
{
	
	
		if (!$("#genericSave").valid())
			return false;
		
		if(this.formErrorList.length>0)
			return false;
		
		var startDate = document.getElementById("sDate").value;
	    var endDate = document.getElementById("eDate").value;

	    if ((Date.parse(startDate) > Date.parse(endDate))) {
	    	showMessage("Attendance To Date should be greater than Attendance From Date",'error');
	    	return false;
	    }

	
	if(actionType==1){
		
		$("#actionType").val(actionType);
	}
	if(actionType==2){
		$("#actionType").val(actionType);
	}
	if(actionType==3){
		$("#actionType").val(actionType);
	}
	if(actionType==4){
		$("#actionType").val(actionType);
	}
	
	getConfirmDialog("Save Progress Report Details", "Are you sure you want to Save Progress Report Details?", function() {
		
	var formData = new FormData($('#genericSave')[0]);
	
	bgCurtain();
	doAjaxCall('instituteApp', 'POST', formData,
			function(data) {
					removeBgCurtain();
					
					var id = data.split('##');
					var res=id[0];
					if(res=="SUCCESS"){
						$('#ProgressReportId').val(id[1]);
						showMessage("SUCCESS_Progress Report Details Saved", "success");
					}else{
							$('#ProgressReportId').val(id[1]);
							showMessage("Error_Progress Report Details not Saved Properly", "error");
					}
			}, false, false);
	});
}



function saveAndDownloadAllRecipients(){
	
	if (!$("#genericSave").valid())
		return false;
	if(this.formErrorList.length>0)
		return false;
	var startDate = document.getElementById("sDate").value;
    var endDate = document.getElementById("eDate").value;

    if ((Date.parse(startDate) > Date.parse(endDate))) {
    	showMessage("Attendance To Date should be greater than Attendance From Date",'error');
    	return false;
    }
	
	var startDate = document.getElementById("sDate").value;
    var endDate = document.getElementById("eDate").value;

    if ((Date.parse(startDate) > Date.parse(endDate))) {
    	showMessage("Attendance To Date should be greater than Attendance From Date",'error');
    	return false;
    }
	
	var classBatchSectionId=null;
	if($('#section').val()!=null){
		classBatchSectionId=$('#section').val().toString();	
	}
	
	var formData = {
			controllerMode : 368,
			actionType : 129,
			appId:$('#AppId').val(),
			batchId:$('#batch').val(),
			programId:$('#program').val(),
			deptId:$('#depts').val(),
			isaId:$('#getStudentISATempId').val(),
			batchClassId: $('#BatchClassId').val(),
			classBatchSectionId: classBatchSectionId,
			ReportDate:$('#reportDate').val(),
			StartDate:$('#startDate').val(),
			EndDate:$('#endDate').val(),
			Acknowledgement :$('#acknowledgement').val(),
			isRequiredAkngment:$('#isRequiredAkngment').val(),
			refName:$('#RefName').val(),
			currentSession:$('#currentSession').val(),
			ISAName: $("#getStudentISATempId :selected").text(),
			institutionId : $("#institutionId").val(),
			menuId:this.menuId,
	}
	
	bgCurtain();
	doAjaxCall('instituteApp', 'POST', formData, function(data) {
		removeBgCurtain();
		
		var tempzipFile=data.replace(/\r?\n|\r/g, " ");
		var ex=encodeURIComponent(tempzipFile);
		
		if(ex!=null && ex!='null'){
			window.open('saveAndDownloadAllRecipients/'+ex,'_blank');
		}else{
			showMessage("Data not Available!", "error");
		}
		 
	})
	
}



function sendProgressReportToStudent(controllerMode,actionType,userId,selectedData){
	if(selectedData!=3){
		if (!$("#genericSave").valid())
			return false;
		
		if(this.formErrorList.length>0)
			return false;
		
		var startDate = document.getElementById("sDate").value;
	    var endDate = document.getElementById("eDate").value;

	    if ((Date.parse(startDate) > Date.parse(endDate))) {
	    	showMessage("Attendance To Date should be greater than Attendance From Date",'error');
	    	return false;
	    }

	}
	var classBatchSectionId=null;
	if($('#section').val()!=null){
		classBatchSectionId=$('#section').val().toString();	
	}
	
	getConfirmDialog("Send Progress Report", "Are you sure you want to send progress?", function() {
		if(selectedData!=3){
			saveProgressReportRecipientsSendMail(368,1);
		}
		
		var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			userId:userId,
			isaId: $('#getStudentISATempId').val(),
			batchClassId: $('#BatchClassId').val(),
			USNName: $('#USNName').val(),
			
			classBatchSectionId: classBatchSectionId,
			ISAName: $("#getStudentISATempId :selected").text(),
			reportDate:$('#reportDate').val(),
			startDate:$('#startDate').val(),
			endDate:$('#endDate').val(),
			RefName : $('#RefName').val(),
			currentSession : $('#currentSession').val(),
			acknowledgement: $('#acknowledgement').val(),
			isRequiredAkngment:$('#isRequiredAkngment').val(),
			selectedData:selectedData,
			menuId:this.menuId,
			
		};
	


	doAjaxCall('instituteApp', 'GET', formData, function(data) {
			showMessage("We are sending mail to students parents which is register email...", "success");
			});
	
	});
}

function setCkEditorAck(json){
	if(json.progressReportId!=0){
	  	var allInstances=CKEDITOR.instances;
	  	if(allInstances.length!=0){
	  		allInstances.acknowledgement_1.setData((decodeURIComponent(json.acknowledgementNote)));
		 	 $("#acknowledgement").val(json.acknowledgementNote);	 	 
	  		}
		}
	}


function ckEditorKeyUpAck(type,thisReq){
	var id=thisReq.id
	var value =encodeURIComponent($(thisReq).html());
	$("#acknowledgement").val(value);
}

// ---faculty isa template

function attachEventIsaMarksTemplate(){
	
	$("#IsaMarksTemplateTbl").on("change",".tmplname",function(){
		var val=$(this).val().split("-");
		$(this).parent().next().children().val(val[1]);
		$(this).parent().next().next().children().val(val[2]);
		$(this).attr("changed","1");
	});
	
	$("#IsaMarksTemplateTbl").on("change",".isisatmplchanged",function(){
		$(this).parents("tr").children().eq(1).children().attr("changed","1");
	});
	
	
	$("#addIsaMarksTemplateId").on("click",function(){
        counter = $('#IsaMarksTemplateTbl tr').length -1;

        var val=$("#refISATemplate").attr("data-val").split("-");
        var newRow = '<tr><td><select  data-name="templateId" class="form-control tmplname">'+$("#refISATemplate").html()+'</select></td>'
        +'<td><input  data-name="maxMarks" type="text" changed="0" class="form-control isamaxmarks" value="'+val[1]+'"></td>'
        +'<td><input  data-name="scalledMarks" type="text" changed="0" class="form-control scalledmarks" value="'+val[2]+'"></td>'
        +'<td class="text-center" style="vertical-align: middle;"><a class="btn btn-default btn-xs outside-action-btn removeIsaMarksTemplate"><span class="glyphicon glyphicon-minus" aria-hidden="true"></span>Remove</a></td></tr>';
        
        $("#IsaMarksTemplateTbl>tbody").append(newRow);
	});
	
	$("#IsaMarksTemplateTbl").on("click",".removeIsaMarksTemplate",function(){
		 $(this).closest("tr").remove();
	});
}

function saveIsaMarksTemplate(controllerMode,type){
	
	if(!validateTotalIsaTmplMarks()){
		showMessage("Total marks must be 100", "error");
		return ;
	}
	var formData = {
			controllerMode : controllerMode,
			actionType : $("#actionType").val(),
			selectedData: $('#allIds').val(),
			tmplIds:$("#tmplIds").val(),
			menuId:this.menuId,
			data:JSON.stringify(getIsaTemplateData()),
			isaTemplateId: $("#isaTemplateId").val(),
			mainId: $("#mainId").val()
			
		};

		bgCurtain();
		doAjaxCall('instituteApp', 'GET', formData, function(data) {
			removeBgCurtain();
			showMessageStatus(data,function(){
				if(type==1){
					setTimeout(function(){
						getIsaDialog(controllerMode, 17, formData.mainId, formData.selectedData);
					},500);
				}
				modalDialog.modal('hide');

			});
			});
}

function validateTotalIsaTmplMarks(){
	var validTotal=parseFloat($("#validTotal").val());
	var getTotal=0;
	$("input.scalledmarks[data-name='scalledMarks']").each(function(){
		getTotal+=parseFloat($(this).val());
	})
	if(getTotal!=validTotal)
		return false;
	return true;
}
function getIsaTemplateData(){
	var ret=[];
	var obj={};
	 $("#IsaMarksTemplateTbl>tbody tr").each(function(){
		 obj={};
		 $(this).children().each(function(){
			 var c=$(this).children();
			 if(!c.hasClass('removeIsaMarksTemplate')){
			 if(c.hasClass('tmplname')){
				 obj[c.attr('data-name')]=c.val().split("-")[0];
				 obj['changed']=c.attr('changed');

			 }else{
				 obj[c.attr('data-name')]=c.val();
			 }
			 }
		 });
		 ret.push(obj);
	 });
	 return ret;
}

function getSubjectFacultiesInISA() {
	$("#isaSelectedDataDiv").html('');
	$("#isainfospan").html('');
	getCombobox('/Academy/a/i/isaFacultyDetails/'+$("#getStudentBatchClassId").val()+"_"+$("#getStudentSectionId").val()+"_"+$("#getStudentSubjectId").val(), 'getFacultyISAId',null,null,function(){
		$("#getFacultyISAId").val($("#getFacultyISAId option:first").val());
		getFacultyISATempDetails();

		getCombobox('/Academy/a/i/isaFacultyTemplateDetails/'+$("#getStudentBatchClassId").val()+"_"+$("#getStudentSectionId").val()+"_"+$("#getStudentSubjectId").val()+"_"+$("#getFacultyISAId").val(), 'getFacultyISATempId',null,null,function(){
			$("#getFacultyISATempId").val($("#getFacultyISATempId option:first").val());

		});
	});
}

function getFacultyISATemp(value) {
	$("#isaSelectedDataDiv").html('');
	$("#isainfospan").html('');

	var that=this;
	getFacultyISATempDetails();
	getCombobox('/Academy/a/i/isaFacultyTemplateDetails/'+$("#getStudentBatchClassId").val()+"_"+$("#getStudentSectionId").val()+"_"+$("#getStudentSubjectId").val()+"_"+$("#getFacultyISAId").val(), 'getFacultyISATempId',null,null,function(){
		$("#getFacultyISATempId").val($("#getFacultyISATempId option:first").val());
	});
}

function getFacultyISATemp1(value){
	$("#isaSelectedDataDiv").html('');
	$("#isainfospan").html('');

}

function getFacultyISATempDetails(){
	
	var formData = {
			controllerMode : 8030,
			actionType : 91,
			menuId:this.menuId,
			fsId:$("#getFacultyISAId").val()
			
		};
	
	doAjaxCall(this.url, "POST", formData, function(data){
		var v=JSON.parse(data);
		console.log(v);
		var html="";
		for( var i in v){
			html+="<tr><td>"+v[i]['name']+"</td><td>"+v[i]['assignedMaxMarks']+"</td><td>"+v[i]['assignedScaledMarks']+"</td></tr>";
		}

		$("#isainfotable>tbody").html(html);
	});
}
function changeTimeTableArrayStatus(){
	if($("#tTArray").val()){
	 thisTimtTableReq.timeTableArray= JSON.parse($("#tTArray").val());
		for(var i in thisTimtTableReq.timeTableArray){
				getArr=thisTimtTableReq.timeTableArray[i];
				if(i.startsWith("ttMngRow")){
					 deleteRecord(getArr,'isModified');
					 deleteRecord(getArr,'isHistory');
					getArr.push("isHistory");
					getArr.push("isModified"); 
				}
			
		}
	}
	$("#saveTT").removeClass('disabled');
  $("#tTArray").val(JSON.stringify(thisTimtTableReq.timeTableArray));
}
// ////////////////////Student Details Info /////////////
function getStudentDetails(controllerMode,actionType){
	if(!$('#usn').val()){
		showIdMessage("Invalid USN", "error","usn");
		return false;
	}
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			usn:$('#usn').val().trim(),
			menuId:this.menuId,
			
		};
		
		doAjaxCall('instituteApp', 'GET', formData, function(data) {
			var dataArray = data.split("_");
			var status = dataArray[0].toUpperCase();
			var statusResp = dataArray[1];
			if (status == "ERROR") {
				showMessage(statusResp, "error");
			}else{
			$("#Student_Details").html(data);
			getStudentProfileInfo();
			}
			});
	
}
function studentInitCall(){

	$('[id^=btnstdinfo_]').off('click');
	$('[id^=btnstdinfo_]').click(function() {
		var idArray = this.id.split("_");
		var funCall = idArray[1];
		var type=1;
		var that =this;
		$('[id^=stdinfo_]').each(function() {
			var x= this.id;
			if ($("#" + this.id).parent('li').hasClass(
			'current')) {
				type=this.id.split("_")[1];
					}
		});
		var ret = eval(funCall + "("+type+");");
		return ret;
	});
	$('[id^=stdinfo]').off('click');
	$('[id^=stdinfo]').click(function() {
		var type=this.id.split("_")[1];
		moveStudentInfoDetails(type);
	});
	
}
function moveNextSI(type){
	moveStudentInfoDetails(type+1); 
}
function movePrevSI(type){
	moveStudentInfoDetails(type-1); 
}
function moveTab(type){
	moveStudentInfoDetails(type);
}
function moveStudentInfoDetails(type){
	bgCurtain();
	var formData = {
			controllerMode : 369,
			actionType : 89,
			userId:$('#userId').val(),
			type:type,
			menuId:this.menuId,
			
		};
	changeTabStatusSI(type);
		doAjaxCall('instituteApp', 'GET', formData, function(data) {
			processStudentInfoData(data,type);
			removeBgCurtain();
			});
	
	
}
function getStudentProfileInfo(){
	bgCurtain();
	var formData = {
			controllerMode : 369,
			actionType : 89,
			userId:$('#userId').val(),
			type:5,
			menuId:this.menuId,
			
		};
	
		doAjaxCall('instituteApp', 'GET', formData, function(data) {
			$('#studentprofiledisplay').html(data);
			removeBgCurtain();
			});
	
}
function processStudentInfoData(data,type){
	$("#studentDetails_Content").html(data);
	if (type > 1 && type < 4) {
		$('#btnstdinfo_moveNextSI').show();
		$('#btnstdinfo_movePrevSI').show();
	}
	if (type == 1) {
		$('#btnstdinfo_moveNextSI').show();
		$('#btnstdinfo_movePrevSI').hide();
	}
	if (type == 4) {
		$('#btnstdinfo_moveNextSI').hide();
		$('#btnstdinfo_movePrevSI').show();
		// var report=encodeURIComponent(tempreport);
	
		
	}
}
function changeTabStatusSI(type){
	if ($("#stdinfo_" + type).parent('li').closest('ul').children().hasClass(
	'current')) {
$("#stdinfo_" + type).parent('li').closest('ul').children().removeClass(
		'current');
}
;
if ($("#stdinfo_" + type).parent('li').hasClass('disabled')) {
$("#stdinfo_" + type).parent('li').addClass('current').removeClass(
		'disabled');
} else {
$("#stdinfo_" + type).parent('li').addClass('current');
}
}

function editStudentDetails(type){
	var classId=type+"_input_info";
	
	$("#"+type+"_edit").css("display", "none");
	$("#"+type+"_save").css("display", "block");
	$('input.'+classId).removeAttr('disabled');
}

function saveStudentDetails(type){
	var formContext = $("#genericSave");
	var controllerMode = parseInt($('#controllerMode').val());
	var actionType = parseInt($('#actionType').val());
	var postData = formContext.serializeArray();
	var formURL = formContext.attr("action");
	var formData = new FormData(formContext[0]);
	formData.append("menuId",this.menuId);
	formData.append("type",type);
	
	bgCurtain();
	changeTabStatusSI(type);
		doAjaxCall('instituteApp', 'POST', formData, function(data) {
			var dataArray = data.split("_");
			var status = dataArray[0].toUpperCase();
			var statusResp = dataArray[1];
			if (status == "SUCCESS") {
				showMessage(statusResp, "success");
			}else{
				showMessage(statusResp, "error");
			}
			studentInfoCallBack(type);
			removeBgCurtain();
			},false,false);
}

function studentInfoCallBack(type){
	switch(type){
	case 1:
	case 2:
		$("#stdinfo_1").trigger("click");
		break;
	case 3:
		getStudentProfileInfo();
		$("#stdinfo_1").trigger("click");
		break;
	case 4:
	case 5:
	case 6:
	case 7:
		$("#stdinfo_3").trigger("click");
		break;
		
			
	}
}
function uploadStudentImage(){
	$("#stdimgUpload").trigger("click");
	
}
function uploadStudentImageInit(){
	$("#stdimgUpload").on("change", function() {
		studentimgViaUpload(this);
	
	});	
}
function studentimgViaUpload(that) {
	
	var id = $(that).attr("id");
	var reader = new FileReader();
	var errorMsg = "";
	$(that).closest('div').parent().find('#validationError').remove();
	reader.onload = function(e) {
		var imgSrc= e.target.result;
		if (imgSrc.indexOf("data:image/jpeg") > -1
				|| imgSrc.indexOf("data:image/png") > -1
				|| imgSrc.indexOf("data:image/gif") > -1
				|| imgSrc.indexOf("data:image/bmp") > -1) {
		} else {
			errorMsg=_MESSAGES.errorMessages.errorMsg.replace(/#0/g,
					_MESSAGES.errorMessages.imageFormat)
			$(that).closest('div').prepend(errorMsg);
			$("#"+id).val('');
			return;
		}
		if (e.total > 1000141) { // Below 1Mb Allowed
			errorMsg=_MESSAGES.errorMessages.errorMsg.replace(/#0/g,
					_MESSAGES.errorMessages.imageSize);
			$(that).closest('div').prepend(errorMsg);
			$("#"+id).val('');
			return;
		}
		if(imgSrc){
			previewStudentImage(imgSrc);
		}
			
	};
	reader.readAsDataURL(that.files[0]);
	
}
function previewStudentImage(imgSrc){
	var buttons = [
	   			{
	   				type : "button",
	   				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='save-span-1'></span>Save",
	   				className : "btn-sm btn-default",
	   				callback : function(e) {
	   					saveStudentImage(imgSrc);
	   					
	   				}
	   			},
	   			{
	   				type : "cancel",
	   				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
	   				className : "btn-sm btn-default",
	   				callback : null
	   			} ];
	var data='<div class="col-md-4 frmele_wrapper">'+
			'<h3 class="text-center">Current Profile Picture</h3>'+
			'<div class="profimg_wrap" id="uploadedPic1">'
			+'<img id="imagesrc" src='+$('#imagesrc').attr('src')+' />'+
			 '</div></div>'+
			 '<div class="col-md-4 frmele_wrapper">'+
				'<h3 class="text-center">New Profile Picture</h3>'+
				'<div class="profimg_wrap" id="uploadedPic1">'
				+'<img id="imagesrc" src='+imgSrc+' />'+
				 '</div></div>'
			 ;
	   	getModalDialog(
	   			'medium',
	   			'Confirm Profile Picture',
	   			data,
	   			buttons,
	   			function() {
	   				
	   			});
}
function saveStudentImage(imgSrc){
	
	bgCurtain();
	var formData = {
			controllerMode : 369,
			actionType : 90,
			userId:$('#userId').val(),
			image:imgSrc,
			type:3,
			menuId:this.menuId,
			
		};
		doAjaxCall('instituteApp', 'POST', formData, function(data) {
			var dataArray = data.split("_");
			var status = dataArray[0].toUpperCase();
			var statusResp = dataArray[1];
			if (status == "SUCCESS") {
				showMessage(statusResp, "success");
				
			}else{
				showMessage(statusResp, "error");
			}
		
			studentInfoCallBack(3);
			if($("#actionType").val()==216){
				$(".close").click();
				
				getfacultyDetails($('#userId').val());
			}
			removeBgCurtain();
			});
	
	
}


	


// ////////////////////END Student Details Info /////////////









/*--------------------------------Start Attendance---------------------------------------------------*/

function getAttendanceSearchComboBox(){
	hideSaveAttendanceDiv();
	getCheckCombobox("/Academy/a/i/getWeekDays", "day-dayId-selectedDates");
	getCheckCombobox("/Academy/a/i/getSlotsByProgramId/"+$("#getStudentProgramId").val()+"/"+$("#getStudentInstId").val(), "slot-slotId-selectedSlots",null,null,null,function(){
		$('#slot li').map(function(){ 
			if($('input',this).val()!='0')
			slotOptions+="<option value='"+$('input',this).val()+"'>"+$("a",this).text()+"</option>" 
		});
		getCombobox('/Academy/a/i/getPreference/', 'preferenceId',null,null,function(){
			$('#preferenceId option:first-child').attr("selected", "selected");
			manageAttendanceDateRangeSelect(moment(), moment());
			getAttendanceAvailability();
		});
	});


}



function manageAttendanceDateRangeSelect(startVal,endVal) {
	start=startVal;
    end=endVal;
   
  $('#daterange_1').daterangepicker({
	  startDate: start,
	   endDate: start,
   "minDate": batchStartDate,
   "maxDate": batchEndDate,
   autoUpdateInput: true,
   singleDatePicker: true,
   showWeekNumbers: false,
   dateLimit: {
       "days":31
   },
   locale: {
       cancelLabel: 'Clear',
       format: 'DD-MMM-YYYY'
   },
   isInvalidDate: function(date) {
	   if(new Date()<date){
 			 return true;
  		}
   },

});
 $('#daterange_2').daterangepicker({
	  startDate: end,
	   endDate: end,
	   "minDate": batchStartDate,
	   "maxDate": batchEndDate,
	   autoUpdateInput: true,
	   singleDatePicker: true,
	   showWeekNumbers: false,
	   dateLimit: {
	       "days":31
	   },
	   locale: {
	       cancelLabel: 'Clear',
	       format: 'DD-MMM-YYYY'
	   },
	   
	   isInvalidDate: function(date) {
		   if(new Date()<date){
	 			 return true;
	  		}
	   }
	   
	});  
$('.dtrang_grp span').off('click');
$('.dtrang_grp span').on('click',function(){
	$(this).parent().find('input').click();
	 
});
}


function getAttendanceEvents(date){
	var resp="";
	var color="";
	var popOver="";
	var nameExtention="";
	if(eventsList.hasOwnProperty(date) && eventsList[date].name){
		var name=eventsList[date].name;
		nameExtention=eventsList[date].name;
		if(name.length>18){
			popOver=" data-toggle='popover' data-placement='bottom' data-content='"+name+"' data-trigger='hover'"
			nameExtention=name.substring(0, 14)+"...";
		}
		
		color='text-success';
		if(parseInt(eventsList[date].isHoliday)==1){ // Holiday
			nameExtention=nameExtention+"-Holiday";
			color='text-danger';
		}
		resp="<br><span "+popOver+" class="+color+">("+ nameExtention +")</span>";		
	}
	return resp;
}


function getDateArray(start, end) {

	  var arr = new Array();
	   var start = new Date(start);
	   var end = new Date(end);

	  while (start <= end) {
	    arr.push(new Date(start));
	    start.setDate(start.getDate() + 1);
	  }

	  return arr;

	}

function prevNxtAttendanceDate(typeOfClick,defaultVal){
	var sDate="";
	var eDate="";
	if(!defaultVal && !isValidAttendanceSearch(typeOfClick)){
		return;
	}
	$("[id^=prvNxt_]").off("click");
	if(typeOfClick==_Attendance.ClickedType.AttedancePrvSearchType){ // 1=prev_date
		sDate=moment(start, "DD-MMM-YYYY").subtract(6, 'days'),
		eDate=moment(end, "DD-MMM-YYYY").subtract(6, 'days');
	}else if(typeOfClick==_Attendance.ClickedType.AttedanceNxtSearchType){// 1=nxt_date
		sDate=moment(end, "DD-MMM-YYYY").add(0, 'days'),
		eDate=moment(end, "DD-MMM-YYYY").add(6, 'days');
		 if(new Date()<moment(eDate)){
			 eDate=moment(sDate, "DD-MMM-YYYY").add(moment().diff(sDate, 'days'), 'days');
	     }
	}
	manageAttendanceDateRangeSelect(sDate,eDate);	 
	getAttendenceStudentsSearch(_Attendance.ClickedType.AttedanceDefaultSearchType);
}

function getAttendanceAvailability(){
	// bgCurtain();
	var programId=$('#getStudentProgramId').val();
	var batchClassId=$('#getStudentBatchClassId').val();
	var classBatchSectionId=$('#getStudentSectionId').val();
	var userId=$('#userId').val();
	var subjectId=$('#getStudentSubjectId').val();
	
	if(!programId || !batchClassId) {
		return;
	}
	var formData = {
			programId :programId,
			batchClassId :batchClassId,
			classBatchSectionId:classBatchSectionId,
			userId:userId,
			subjectId:subjectId,
			menuId:this.menuId,
		};
	doAjaxCall('getAttendanceAvailability', 'GET', formData, function(data) {
		handleGetAttendanceAvailabilitySuccess(data);
		 // removeBgCurtain();
	});
	
}

function checkAttendanceAvailableForMark(){
 		var avail=false;
		var attStart=formatDate(start,"DD MMM YYYY");
		var attEnd=formatDate(end,"DD MMM YYYY");
		var bStart=batchStartDate.replace(/-/g," ");
		var bEnd=batchEndDate.replace(/-/g," ");
		 if (new Date(bStart) <=new Date(attStart)) {
	    	 $('.prev-week').removeClass("disabled");
	    	 avail=true;
	     }if(new Date(bStart) >=new Date(attStart)){
			 $('.prev-week').addClass("disabled");
	     }
	     if(new Date(bEnd)>=new Date(attEnd)){
	    	 $('.next-week').removeClass("disabled");
	     }if(new Date(bEnd)<=new Date(attEnd)){
	    	 $('.next-week').addClass("disabled");
	     }
	     
		 if(new Date()<moment(attEnd).add(1, 'days')){
	    	 $('.next-week').addClass("disabled");
	     }
	     
		 return avail;

	}


function handleAttendance(controllerMode,actionType,id,selectedData){
	// bgCurtain();
	var formData = {
		controllerMode : controllerMode,
		actionType : actionType,
		menuId : this.menuId,
		id : id,
		selectedData:selectedData
	};

	doAjaxCall(this.url, 'GET', formData, function(data) {
		$('#mycourseWithAttendance').html(data);
		// removeBgCurtain();
	});
}



function getAttendenceStudentsSearch(typeOfClick){
	
	if(typeOfClick==_Attendance.ClickedType.AttedanceClickSearchType
			&& !isValidAttendanceSearch(typeOfClick)){
		return;
	}	
	
	var dateStart=$('#daterange_1').val();
	var dateEnd=$('#daterange_2').val();
	if (!(new Date(dateStart.replace(/-/g," ")) <=new Date(dateEnd.replace(/-/g," ")))) {
		showIdMessage("Please select valid date range", 'error', 'showAttendanceMsg', 'top');
		return;
	}	
	disableAttendanceButtons();
	 	bgCurtain();
	var formData = {
			menuId : this.menuId,
			url : this.url,
			controllerMode : this.controllerMode,
			actionType : parseInt($('#actionType').val()),
			classBatchSectionId : $('#getStudentSectionId').val(),
			dateRange :dateStart+" - "+dateEnd,
			subjectId :$('#getStudentSubjectId').val(),
			batchStartDate :batchStartDate,
			batchEndDate :batchEndDate,
			batchClassId:$('#getStudentBatchClassId').val(),
			requesterType:$('#requesterType').val(),
			userId: $("#userId").val() ? $("#userId").val() : "",
			programId:$('#getStudentProgramId').val(),
			subjectBatchId: $("#subjectBatchId").val() ? $("#subjectBatchId").val() : "",
			dayId:$("#dayId").val().trim(),
			slotId:$("#slotId").val().trim(),
			preferenceId:$("#preferenceId").val(),
			instId:$("#getStudentInstId").val(),
		};
	doAjaxCall(this.url, 'GET', formData, function(data) {
		$('#showAttendanceStudents').html('');
		$('#showAttendanceStudents').html(data);
		handleSearchAttendenceSuccess();
		 removeBgCurtain();
	});
}



function isValidAttendanceSearch(typeOfClick){
		if(isAttendanceValid()){
			return true;
		}else{
			getConfirmDialog(
				"<span class='fa fa-exclamation-triangle' aria-hidden='true' style='color:#ffbb33'></span> Attendance Warning" ,
				"<h5>Do you want to save your changes <span class='fa fa-question' aria-hidden='true'></span></h5>",
				function() {
					saveAttendance(typeOfClick);
				},function() {
					isValidAttendanceSearchSuccess(typeOfClick);
				}
				);
		}

		
	}

function isValidAttendanceSearchSuccess(typeOfClick){
	clearTimeout(attendanceTimer);
	attendanceTimer = null;
	switch(typeOfClick){
	case _Attendance.ClickedType.ResetType:
		resetAttendanceStudentsSearch();
		break;
	case _Attendance.ClickedType.BackType:
		handleAttendanceBack();
		break;
	case _Attendance.ClickedType.AttedanceClickSearchType:
		getAttendenceStudentsSearch(_Attendance.ClickedType.AttedanceDefaultSearchType);
		break;
	case _Attendance.ClickedType.AttedancePrvSearchType:
	case _Attendance.ClickedType.AttedanceNxtSearchType:
		prevNxtAttendanceDate(typeOfClick,"prevNxt");
		break;
	
	}
	
}



function handleStudentAttendance(){
	var studentCount=1;
	var aTableBodyResp="";
	var datesArr= Object.keys(studentData.dateWithSlots).sort(SortByName);
	if(datesArr.length==0){
		$('#attaendanceStudentsTable').hide();
	}
	for(d in datesArr){
		var date=datesArr[d];
		var slots=studentData.dateWithSlots[date];
		 var sessionCount=1,slotPosition=1,tempArr={};
		if(slots.length!=0){ 
			for(var t in slots){
				var tempDetailsId=slots[t].timeTableTemplateDetailsId;
				var slotOptsTemp="<th><select id=slotDate_"+date+"_"+slotPosition+" data-prvSlot=''>";
				slotOptsTemp +=slotOptions;
				slotOptsTemp+="</select><div class='checkbox' data-toggle='popover' data-placement='bottom' data-content='set your favourite class of the week' data-trigger='hover'><label for='favouriteSlot-0'>" +
				"<input type='checkbox' name='favouriteSlot' " +
				"id=favSlotDate_"+date+"_"+slotPosition+" value='1' onclick='setFavouriteAttendance(1,this)'>save as favourite</label> </div> </th>"
				$('#aHeaderSlots').append(slotOptsTemp);
				if(!tempArr.hasOwnProperty(tempDetailsId)){
					$("#slotDate_"+date+"_"+slotPosition).val(tempDetailsId);
					tempArr[tempDetailsId]=date;
					$("#slotDate_"+date+"_"+slotPosition).attr('data-prvSlot',tempDetailsId);
				}
				 getHeaderInDate(date,slots,slotPosition,tempDetailsId);
				 getStudentsInDate(date,slots,studentCount,slotPosition);
				 slotPosition++;
				 studentCount++;
				 }
		}
	}
	}

 function getHeaderInDate(date,slots,slotPosition){
	 $('#aHeaderDate').append("<th>"+date+"<br/>"+moment(date.replace(/-/g," ")).format('dddd') + getAttendanceEvents(date)+ "</th>");
	 
	 $('#aHeaderIntegratedSubject').append("<th><div class='checkbox'><label for='integratedSubject-1'><input type='checkbox'" +
				" name='integratedSubject' id=integratedSubject_"+date+"_"+slotPosition+" value='1' style='display: none;'onclick='markIntegratedSubjectAttendance(1,this)'></label> </div> </th>"); 
	 $('#aHeaderProgressBar').append("<th><div class='progress' id=attendancePrgress_"+date+"_"+slotPosition+">" +
	 		"<div class='progress-bar progress-bar-success' role='progressbar' " +
		"aria-valuenow='80' aria-valuemin='0' aria-valuemax='100' style='width: 25%'>0</div></div></th>");
	 
	 $('#aHeaderColumnCheckAll').append("<th><label class='attinput'><input name='checkbox' type='checkbox'" +
	 		" id=stdAttend_"+date+"_"+slotPosition+" data-clickedType=2 class='checkall' checked attnd-status='false' belongs-cls='false'>"+"<span></span></label></th>")
	 	 
 }





function getStudentsInDate(date,slots,studentCount,slotPosition){
	 var aTableBody="",usnList="",nameList="",rlNumList="";
		 $.each(studentData.studentList,function(key, value) {
			  var rlNo=value.studentRollNo;
			  
			  if(_Subject.SubjectType.Elective==studentData.subjects.subjectType){
	        	   rlNo= ((value.sectionName).slice(-1)+"-"+value.studentRollNo).toUpperCase();
	           }
			  
	           if(value.userStatus==_MESSAGES.ADMISSIONS_STATUS_TYPE.FINAL_APPROVE_APPLICATION){
	        	   if(studentCount==1){
	        	   aTableBody+= "<tr id='"+value.userId+"'><td><span data-toggle='tooltip' data-placement='right' title='"+(value.sectionName).toUpperCase()+"'>"+rlNo+"</span></td><td class='text-left'><span data-toggle='tooltip' data-placement='right' title='"+(value.loginId).toUpperCase()+"'>"+(value.firstName).toUpperCase()+"</span></td><td><span data-toggle='tooltip' data-placement='right' title='"+(value.firstName).toUpperCase()+"'>"+(value.loginId).toUpperCase()+"</span></td><td><label class='attinput'>";
	        	   aTableBody+= "<input type='checkbox' name='checkboxes' id=stdAttend_0_"+value.userId+" data-clickedType=3 data-userId='"+value.userId+"' checked attnd-status='false' belongs-cls='false' chk-status='row'><span></span> </label></td>";
	        	   aTableBody+=	"<td><label class='attinput'><input type='checkbox' name='checkboxes' id=stdAttend_"+date+"_"+slotPosition+"_"+value.userId+" data-clickedType=1 data-userId='"+value.userId+"' checked attnd-status='false' belongs-cls='false'><span id=attToolTip_"+date+"_"+slotPosition+"_"+value.userId+" data-userId='"+value.userId+"' data-toggle='popover' data-placement='bottom' data-content='' data-trigger='hover'></span></label></td>";
	        	   } else{
	        		 $("#"+value.userId).append("<td><label class='attinput'><input type='checkbox' name='checkboxes' id=stdAttend_"+date+"_"+slotPosition+"_"+value.userId+" data-clickedType=1 data-userId='"+value.userId+"' checked attnd-status='false' belongs-cls='false'><span id=attToolTip_"+date+"_"+slotPosition+"_"+value.userId+" data-userId='"+value.userId+"' data-toggle='popover' data-placement='bottom' data-content='' data-trigger='hover'></span></label></td>");
	        	   }
	        	   setStudentAttendance(date,slots,slotPosition,value); // set
																		// studentInfo
	           }else if(value.userStatus==_MESSAGES.ADMISSIONS_STATUS_TYPE.CANCELLED_APPLICATION){
	        	   if(studentCount==1){
	        	   aTableBody+= "<tr id='"+value.userId+"' class='strikeout' data-toggle='tooltip' data-placement='bottom' title='Student Not Available'><td><span data-toggle='tooltip' data-placement='right' title='"+(value.sectionName).toUpperCase()+"'>"+rlNo+"</span></td><td class='text-left'><span data-toggle='tooltip' data-placement='right' title='"+(value.loginId).toUpperCase()+"'>"+(value.firstName).toUpperCase()+"</span></td><td><span data-toggle='tooltip' data-placement='right' title='"+(value.firstName).toUpperCase()+"'>"+(value.loginId).toUpperCase()+"</span></td>";
	        	   aTableBody+=  "<td></td><td></td>"
	        	   }else{
	        	  $("#"+value.userId).append("<td></td>");
	        	   }
	           }
	           
	        	usnList+="<option data-value='"+value.userId+"'>"+(value.loginId).toUpperCase()+"</option>";
	            nameList+="<option data-value='"+value.userId+"'>"+(value.firstName).toUpperCase()+"</option>";
		        rlNumList+="<option data-value='"+value.userId+"'>"+rlNo+"</option>";

	 });
	 if(studentCount==1){
		  $('#srch_r').append(rlNumList);
	       $('#srch_u').append(usnList);
	       $('#srch_n').append(nameList);
	       $('#aTableBody').append(aTableBody);
	 }
}


function setStudentAttendance(date,slots,slotPosition,dto){
		var arr=[];
		var timeArr={};
		var currentSlot=$("#slotDate_"+date+"_"+slotPosition).val();
	 if(studentData.studentAttendance.hasOwnProperty(date)){
		 timeArr=studentData.studentAttendance[date];    
	 }
	 if(timeArr.hasOwnProperty(currentSlot)){
		 arr=timeArr[currentSlot];
	 }
	 var clonedstudentInfoObj=$.extend(true,{},studentData.studentInfo);
	 var studentInfo =$.extend({},clonedstudentInfoObj,dto);
	 studentInfo.attendanceIsHistory=1;// set attendanceIsHistory=1 not
										// modified
	 studentInfo.attendanceDescription="";
	 var studentObjFromDb=getStudentAttendanceFromDb(date,currentSlot,slotPosition,studentInfo.userId);
	 if(studentObjFromDb){
		 studentInfo.attendanceStatus=studentObjFromDb.status;
		 studentInfo.isIntegratedSubject=studentObjFromDb.subjectType;
		 if(studentObjFromDb.description)
		 studentInfo.attendanceDescription=studentObjFromDb.description;
		 setIntegratedSubjecteData(date,currentSlot,slotPosition,studentInfo.isIntegratedSubject);
		 attendanceLastUpdatedOnByDb(studentObjFromDb);
	 }
	 arr.push(studentInfo);// studentInfo
	 timeArr[currentSlot]=arr
	 studentData.studentAttendance[date]=timeArr;
}

function attendanceLastUpdatedOnByDb(studentObjFromDb){
	// Here check the attendance Last Updated on (Date)
	if(!studentData.attendanceLastUpdatedOn){
		studentData.attendanceLastUpdatedOn=studentObjFromDb.createdDate;
	}
	if (new Date(studentObjFromDb.createdDate) >=new Date(studentData.attendanceLastUpdatedOn)) {
		studentData.attendanceLastUpdatedOn=studentObjFromDb.createdDate;
	}
}


function changeAttendanceStatusFrmDb() {
		$("[id^=stdAttend_]").each(function (e){
			 var clickedType=parseInt($(this).attr("data-clickedType"))
			 if(clickedType==_Attendance.ClickedType.Individual){
				 var thisId=$(this).attr('id');
					var ids=thisId.split("_");
					var date=ids[1];
					var slotPosition=ids[2];
					var currentSlot=$("#slotDate_"+date+"_"+slotPosition).val();
					var studentId=$(this).attr('data-userId');
					var studentArr=getStudentArrInfo(date,currentSlot);
					var studentInfo=getStudentInfo(studentArr,studentId);
					var attendanceStatus=parseInt(studentInfo.attendanceStatus);
					$(this).data('checked', attendanceStatus);
					var toolTipId = $('#attToolTip_'+ date + '_' + slotPosition +'_' + studentId);
					 $(toolTipId).attr('data-content', studentInfo.attendanceDescription);
					attendanceProgressBar(date,currentSlot,slotPosition,studentArr);
					getAttendanceCurrentStatus($(this));
					getAttendanceStatusByRestriction($(this));
					checkAllStudentAttendanceByColumn(date,currentSlot,slotPosition,studentArr);
					checkStudentAllAttendanceByRow($(this));
					if (attendanceStatus == _Attendance.STATUS.PRESENT){
						$(this).attr('attnd-status', 'true');
					}
					
			 }
	    });
		checkStudentAllAttendanceByGlobal();
}

function manageAttendanceByOnClick() {
	 $("[id^=stdAttend_]").off('click');
	 $("[id^=stdAttend_]").on('click',function(){
			var clickedType=parseInt($(this).attr('data-clickedType'));
			var currentAttendanceStatus=getAttendanceCurrentStatus($(this));
			switch(clickedType){
			case _Attendance.ClickedType.Individual:
				individualStudentAttendance($(this),currentAttendanceStatus);
				break;
			case _Attendance.ClickedType.ColumnWise:
				columnWiseStudentsAttendance($(this),currentAttendanceStatus);
				break;
			case _Attendance.ClickedType.RowWise:
				rowWiseStudentAttendance($(this),currentAttendanceStatus);
				break;
			case _Attendance.ClickedType.CheckAll:
				checkAllStudentsAttendance($(this),currentAttendanceStatus);
				break;
			}
			$('[id^=saveAttendance_]').prop('disabled',false);
			checkStudentAllAttendanceByGlobal();
			studentData.isAttendanceModified=true;
		});

$('[id^=searchAttendace_]').on('input', function () {
   var selectedValue = this.value;
   var idArray = this.id.split("_");
   $('[id^=searchAttendace_]').each(function(){
   	if(idArray[1]!=this.id.split("_")[1]){
   		$('#'+this.id).val('');
   	}
   })
   $("#aTableBody tr").show();
   var dataValue;
   var hiddenTr=false;
   if(selectedValue){
   $('#srch'+"_"+idArray[1]+' option').filter(function(){
		 if(this.value == selectedValue){
			 	hiddenTr=true;
			   	dataValue=$(this).attr('data-value');	
			    return;
		 } 
   })
   }
   $("#aTableBody tr").each(function() {
	    var id = $(this).attr('id');
	    if(id==dataValue){
	    }else if(hiddenTr==true){
	    	$(this).hide();
	    }else{
	    	$(this).show();
	    	}
	});
});
   $("[id^=slotDate_]").change(function(){
	 	var thisId=$(this).attr('id');
	 	var prevSelectedSlot=$(this).attr('data-prvSlot'); 
		var ids=thisId.split("_");
		var date=ids[1];
		var slotPosition=ids[2];
		var currentSlot=$(this).val();
		var prevSlotStudentArr=getStudentArrInfo(date,prevSelectedSlot);
		var currentSlotStudentArr=getStudentArrInfo(date,currentSlot);
		if(!currentSlotStudentArr){
			var clonedstudentArr=$.extend(true,[],prevSlotStudentArr);
			studentData.studentAttendance[date][currentSlot]=clonedstudentArr;
			delete studentData.studentAttendance[date][prevSelectedSlot];
		
			
			deleteIntegratedSubjectData(date,prevSelectedSlot,slotPosition);
			if($("#integratedSubject_"+date+"_"+slotPosition).is(':checked')){
				setIntegratedSubjecteData(date,currentSlot,slotPosition,1);
			}
			deleteFavouriteAttendanceData(date,prevSelectedSlot,slotPosition);
			if($("#favSlotDate_"+date+"_"+slotPosition).is(':checked')){
				setFavouriteAttendanceData(date,currentSlot,slotPosition);
				// studentData.isFavouriteModified=true;
			}
			
			changeAttendanceByFavIntegratedSlot($(this));
			changedDateAndSlots(date,prevSelectedSlot,currentSlot);	
			$(this).attr('data-prvSlot',currentSlot);
			$('[id^=saveAttendance_]').prop('disabled',false);
		}else{
			showIdMessage('Selected time is already open', 'error', 'showAttendanceMsg', 'top');
			$(this).val(prevSelectedSlot);
		}
		prevSelectedSlot="";
		
});

}

function checkIsHistory(arr){
	var resp=false;
	for(var i in arr){
		if(arr[i].attendanceIsHistory==0){
			resp=true;
			break;
		}
	}
	return resp;
}


function changedDateAndSlots(date,prevSelectedSlot,currentSlot){
		var arr=[];
		 if(studentData.changedDateAndSlots.hasOwnProperty(date)){
			 arr=studentData.changedDateAndSlots[date];    
		 }
		 if(arr.indexOf(prevSelectedSlot)<0 && (studentData.dbAttendance[date]
				 && studentData.dbAttendance[date][prevSelectedSlot])){
			 arr.push(prevSelectedSlot);
			 studentData.changedDateAndSlots[date]=arr;
		 }	
			for(var i in studentData.changedDateAndSlots[date]){
				if(studentData.changedDateAndSlots[date][i]==currentSlot){
					studentData.changedDateAndSlots[date].splice(i,1);
					break;
				}
			}
}
	 

	 
function individualStudentAttendance(thisReq,currentAttendanceStatus){
	 var thisId=$(thisReq).attr('id');
		var ids=thisId.split("_");
		var date=ids[1];
		var slotPosition=ids[2];
		var currentSlot=$("#slotDate_"+date+"_"+slotPosition).val();
		var studentId=$(thisReq).attr('data-userId');
		getAttendanceStatusByRestriction($(thisReq));
		var studentArr=getStudentArrInfo(date,currentSlot);
		var studentObj=getStudentInfo(studentArr,studentId);
		studentObj.attendanceStatus=currentAttendanceStatus;
		studentObj.attendanceIsHistory=0;
		checkIsNoClassFound(date,slotPosition,studentArr);
		attendanceProgressBar(date,currentSlot,slotPosition,studentArr);
		checkAllStudentAttendanceByColumn(date,currentSlot,slotPosition,studentArr);
		checkStudentAllAttendanceByRow(thisReq);
		getAttendanceDescription(thisReq,currentAttendanceStatus);
}
	 
	 

	 
	 function columnWiseStudentsAttendance(thisReq,currentAttendanceStatus){
		 var thisId=$(thisReq).attr('id');
			var ids=thisId.split("_");
			var date=ids[1];
			var slotPosition=ids[2];
			var currentSlot=$("#slotDate_"+date+"_"+slotPosition).val();
			var studentArr=getStudentArrInfo(date,currentSlot);
			for(var i in studentArr){
				studentArr[i].attendanceStatus=currentAttendanceStatus;
				studentArr[i].attendanceIsHistory=0;
				 var thisId = $("#stdAttend_"+date+"_"+slotPosition+"_"+studentArr[i].userId);
				 $(thisId).data('checked', currentAttendanceStatus);
				getAttendanceCurrentStatus($(thisId));
				getAttendanceStatusByRestriction($(thisId));
				var studentThisReq=$("#slotDate_"+date+"_"+slotPosition);
				studentThisReq.attr('data-userId',studentArr[i].userId);	
				checkStudentAllAttendanceByRow(studentThisReq);				
				}
			
		attendanceProgressBar(date,currentSlot,slotPosition,studentArr);
		
	 }
	 
	 
	 function rowWiseStudentAttendance(thisReq,currentAttendanceStatus){
		 	var thisId=$(thisReq).attr('id');
			var studentId=$(thisReq).attr('data-userId');
			getAttendanceStatusByRestriction($(thisReq));
			$("#"+studentId+" td :input").each(function(){
				var date=$(this).attr('id').split("_")[1];
				if(date!=0){
					var slotPosition=$(this).attr('id').split("_")[2];
					var currentSlot=$("#slotDate_"+date+"_"+slotPosition).val();
				$(this).data('checked', currentAttendanceStatus);
				getAttendanceCurrentStatus($(this));
				getAttendanceStatusByRestriction($(this));
				var studentArr=getStudentArrInfo(date,currentSlot);
				var studentObj=getStudentInfo(studentArr,studentId);
					studentObj.attendanceStatus=currentAttendanceStatus;
					studentObj.attendanceIsHistory=0;
					checkIsNoClassFound(date,slotPosition,studentArr);
				 attendanceProgressBar(date,currentSlot,slotPosition,studentArr);
				 checkAllStudentAttendanceByColumn(date,currentSlot,slotPosition,studentArr);
				}
		     });
			
	 }
	 
	 
	 function checkAllStudentsAttendance(thisReq,currentAttendanceStatus){
			$("[id^=stdAttend_]").each(function(){
				var date=$(this).attr('id').split("_")[1];
				var slotPosition=$(this).attr('id').split("_")[2];
				var currentSlot=$("#slotDate_"+date+"_"+slotPosition).val();
				$(this).data('checked', currentAttendanceStatus);
				getAttendanceCurrentStatus($(this));
				 getAttendanceStatusByRestriction($(this));
				var clickType=parseInt($(this).attr('data-clickedType'));
				if(clickType==_Attendance.ClickedType.Individual){ // For
																	// Storing
																	// data into
																	// arr
					var studentArr=getStudentArrInfo(date,currentSlot);
					for(var i in studentArr){
						studentArr[i].attendanceStatus=currentAttendanceStatus;
						studentArr[i].attendanceIsHistory=0;
				}
				attendanceProgressBar(date,currentSlot,slotPosition,studentArr);
				}
		     });
			
	 }
	 

	

	  function checkAllStudentAttendanceByColumn(date,currentSlot,slotPosition,studentArr){
			 var countArray=[];
			 var status;
			 for (m in studentArr){
				if(countArray.indexOf(studentArr[m].attendanceStatus)<0){
					countArray.push(studentArr[m].attendanceStatus);
				}
			 }
			 var thisId = $('#stdAttend_'+ date+"_"+slotPosition);
			 if(countArray.length==1){
				 status=parseInt(countArray[0])
			 }else{
				 status=1;
			 }
			 $(thisId).data('checked', status);
			getAttendanceCurrentStatus($(thisId))
		 }
	  

	  function checkStudentAllAttendanceByRow(thisReq){
		  var countArray=[];
			 var status;
		  	var thisId=$(thisReq).attr('id');
			var studentId=$(thisReq).attr('data-userId');
			$("#"+studentId+" td :input").each(function(){
				var date=$(this).attr('id').split("_")[1];
				if(date!=0){
					var slotPosition=$(this).attr('id').split("_")[2];
					var currentSlot=$("#slotDate_"+date+"_"+slotPosition).val();
					var studentArr=getStudentArrInfo(date,currentSlot);
				 for(var i in studentArr){
				if(studentArr[i].userId.startsWith(studentId) && countArray.indexOf(studentArr[i].attendanceStatus)<0){
						countArray.push(studentArr[i].attendanceStatus);
						break;
						}
				}
				}
		     });
			 var thisId = $('#stdAttend_'+0+"_"+studentId);
			 if(countArray.length==1){
				 status=parseInt(countArray[0])
			 }else{
				 status=1;
			 }
			 $(thisId).data('checked', status);
			getAttendanceCurrentStatus($(thisId));
			getAttendanceStatusByRestriction($(thisId));
	  }
	  
	  
	  function checkStudentAllAttendanceByGlobal(){
		  var countArray=[];
		  var status;
			$("[id^=stdAttend_]").each(function(){
				var date=$(this).attr('id').split("_")[1];
				var slotPosition=$(this).attr('id').split("_")[2];
				var currentSlot=$("#slotDate_"+date+"_"+slotPosition).val();
				var clickType=parseInt($(this).attr('data-clickedType'));
				if(clickType==_Attendance.ClickedType.Individual){ // For
																	// Storing
																	// data into
																	// arr
				var studentId=$(this).attr('data-userId');
				var studentArr=getStudentArrInfo(date,currentSlot);
				 var studentObj=getStudentInfo(studentArr,studentId);
				 if(countArray.length==2){
					 return false;
				 }
				 if(countArray.indexOf(studentObj.attendanceStatus)<0){
					 countArray.push(studentObj.attendanceStatus);
				 }
				}
		     });	
			 var thisId = $('#stdAttend_'+0+"_"+0);
			 if(countArray.length==1){
				 status=parseInt(countArray[0])
			 }else{
				 status=1;
			 }
			 $(thisId).data('checked', status);
			getAttendanceCurrentStatus($(thisId));
			
	  }
	  
	  
	function attendanceProgressBar(date,currentSlot,slotPosition,studentArr){
		 var progressArray=[];
		for (p in studentArr){
			if(parseInt(studentArr[p].attendanceStatus)==1){
				progressArray.push(status);
			}
		 }
		var presentStudents=progressArray.length;
		var toTalStudents=studentArr.length;
		var percentage = parseInt((presentStudents / toTalStudents) * 100);
		var progressBarId="attendancePrgress_"+date+"_"+slotPosition+"";
		 document.getElementById(progressBarId).innerHTML ="";
		 document.getElementById(progressBarId).innerHTML +=
			 "<div class='progress-bar progress-bar-success'" +
		 		"role='progressbar' aria-valuenow='80'" +
		 		" aria-valuemin='0' aria-valuemax='100' style='width:" +
		 		" "+percentage+"%'>"+presentStudents+"</div>"
	}
	
	 function getAttendanceCurrentStatus(thisAttendanceReq) {
		 	var respStatus;
		 			el = $(thisAttendanceReq);
		 			 switch (el.data('checked')) {
		                case 0:// unchecked, going indeterminate
		                	 // No Class==0
		                    el.data('checked', 1);
		                    $(thisAttendanceReq).attr('attnd-status', 'false');
		                    el.prop('indeterminate', true);
		                    respStatus=0;
		                    break;
		                case 1:// indeterminate, going checked
		                	// Present(Modified)==1
		                    el.data('checked', 2); 
		                    $(thisAttendanceReq).attr('attnd-status', 'false');
		                    $(thisAttendanceReq).attr('belongs-cls', 'false');
		                    el.prop('indeterminate', false);
		                    el.prop('checked', true);
		                    respStatus=1;
		                    break;
		                default:// checked, going unchecked
		                	// Absent==2//bydefault//undefined
		                    el.data('checked', 0);  
		                	$(thisAttendanceReq).attr('attnd-status', 'false');
		                    el.prop('indeterminate', false);
		                    el.prop('checked', false);
		                    $(thisAttendanceReq).attr('belongs-cls', 'false');
		                    respStatus=2;
		            }
		 			 return respStatus;
		}
	 function getAttendanceStatusByRestriction(thisReq) {
		 if($(thisReq).data('checked') == 0) {  
		  $(thisReq).data('checked', 1) 
		 } else if($(thisReq).data('checked') == 1) {
			 $(thisReq).data('checked', 2)
		 }
		 return $(thisReq)
	 }

	

		function markIntegratedSubjectAttendance(clickedType,thisIntegratedReq){
				if(parseInt(studentData.subjects.isIntegrated)==1){
				$("[id^=integratedSubject_]").show();
				 $("#aHeaderIntegratedSubject").show();
				}
			if(clickedType==1){ // on click
				if($(thisIntegratedReq).is(':checked')){
					integratedSubjectAttendanceWarn("Mark",thisIntegratedReq);
				}else{
					integratedSubjectAttendanceWarn("Cancel",thisIntegratedReq);
				}
				}else if(clickedType==2){// direct call
					$("[id^=integratedSubject_]").each(function(){
						var date=$(this).attr('id').split("_")[1];
						var slotPosition=$(this).attr('id').split("_")[2];
						var currentSlot=$("#slotDate_"+date+"_"+slotPosition).val();
						if(isExist(studentData.integratedSubject[date],currentSlot)){
						$("#integratedSubject_"+date+"_"+slotPosition).prop("checked", true);
					}
					});
				
				}
		}
	 
		
		function integratedSubjectAttendanceWarn(checkedTypeMark,thisIntegratedReq){
			
			var date=$(thisIntegratedReq).attr('id').split("_")[1];
			var slotPosition=$(thisIntegratedReq).attr('id').split("_")[2];
			var currentSlot=$("#slotDate_"+date+"_"+slotPosition).val();
			var currentSlotName=$("#slotDate_"+date+"_"+slotPosition).find('option:selected').text();
			getConfirmDialog(
					""+checkedTypeMark+" Lab Attendance : "+currentSlotName+" ("+ date +")" ,
					" Do you want to "+checkedTypeMark+" Attendance for Lab : "+currentSlotName+" ("+ date +")" +
							". Are you sure ? <br/><br/> (Note:If Yes, Pealse Save your Attendance on click of save button)",
					function() {
						if(checkedTypeMark=="Cancel"){
							deleteIntegratedSubjectData(date,currentSlot,slotPosition);
						}else{
							setIntegratedSubjecteData(date,currentSlot,slotPosition,1);
						}
						
						$('[id^=saveAttendance_]').prop('disabled',false);
						changeAttendanceByFavIntegratedSlot(thisIntegratedReq);
					},function() {
						if(checkedTypeMark=="Cancel"){
						$("#integratedSubject_"+date+"_"+slotPosition).prop("checked", true);
						}else{
							$("#integratedSubject_"+date+"_"+slotPosition).prop("checked", false);
						}
						// $('[id^=saveAttendance_]').prop('disabled',true);
					}
					);
		}

		function setFavouriteAttendance(clickedType,thisFavouriteReq){
			var resp=false;
			if(clickedType==1){// on click
			var thisId=$(thisFavouriteReq).attr('id');
			var ids=thisId.split("_");
			var date=ids[1];
			var slotPosition=ids[2];
			var currentSlot=$("#slotDate_"+date+"_"+slotPosition).val();
			if($(thisFavouriteReq).is(':checked')){
				setFavouriteAttendanceData(date,currentSlot,slotPosition);
			}else{
				deleteFavouriteAttendanceData(date,currentSlot,slotPosition);
			}
			// changeAttendanceByFavIntegratedSlot(thisFavouriteReq);
			// studentData.isFavouriteModified=true;
			$('[id^=saveAttendance_]').prop('disabled',false);
			}if(clickedType==2 && Object.keys(studentData.favouriteAttendance).length!=0){ // direct
																							// call
				$("[id^=favSlotDate_]").each(function(){
					var date=$(this).attr('id').split("_")[1];
					var slotPosition=$(this).attr('id').split("_")[2];
					var currentSlot=$("#slotDate_"+date+"_"+slotPosition).val();
					var date=getDayFromDate(date.replace(/-/g," "));
					 if(studentData.favouriteAttendance.hasOwnProperty(date)){
						 var favouriteAttendanceArr=studentData.favouriteAttendance[date]; 
						 if(isExist(favouriteAttendanceArr,currentSlot)){
							 $(this).prop("checked", true);
						 }
					 }
					
					
				});
			}
		}
		function setFavouriteAttendanceData(date,currentSlot,slotPosition){
			var date=getDayFromDate(date.replace(/-/g," "));
			var favouriteAttendanceArr=[];
			 if(studentData.favouriteAttendance.hasOwnProperty(date)){
				 favouriteAttendanceArr=studentData.favouriteAttendance[date];    
			 }
			 if(favouriteAttendanceArr.indexOf(currentSlot)<0){
				 favouriteAttendanceArr.push(currentSlot);
				 studentData.favouriteAttendance[date]=favouriteAttendanceArr;
			 }
			 saveFavouriteAttendance(1);
		}
		function deleteFavouriteAttendanceData(date,prevSelectedSlot,slotPosition){
			var resp=false;
			var date=getDayFromDate(date.replace(/-/g," "));
		for(var i in studentData.favouriteAttendance[date]){
			if(studentData.favouriteAttendance[date][i]==prevSelectedSlot){
				studentData.favouriteAttendance[date].splice(i,1);
				resp=true;
				break;
			}
		}
		if(resp){
		 saveFavouriteAttendance(2);
		}
		return resp;
		}
		
		
		 function setIntegratedSubjecteData(date,currentSlot,slotPosition,integratedSubjectVal){
			 var integratedSubjectArr=[];			 
				 if(studentData.integratedSubject.hasOwnProperty(date)){
					 integratedSubjectArr=studentData.integratedSubject[date];    
				 }
				 if((integratedSubjectArr.indexOf(currentSlot)<0 && integratedSubjectVal==1)){
					 integratedSubjectArr.push(currentSlot);
					 studentData.integratedSubject[date]=integratedSubjectArr;
				 }
				 
	 }
	 
	 function deleteIntegratedSubjectData(date,prevSelectedSlot,slotPosition){
			for(var i in studentData.integratedSubject[date]){
				if(studentData.integratedSubject[date][i]==prevSelectedSlot){
					studentData.integratedSubject[date].splice(i,1);
					break;
				}
			}
	 }
	 
	 
	 function changeAttendanceByFavIntegratedSlot(thisReq){
		 	var thisId=$(thisReq).attr('id');
			var ids=thisId.split("_");
			var date=ids[1];
			var slotPosition=ids[2];
			var studentArr=[];
			var currentSlot=$("#slotDate_"+date+"_"+slotPosition).val();
			var arr=[];
			 for(var i in studentData.studentAttendance[date][currentSlot]){
				 var status= parseInt(studentData.studentAttendance[date][currentSlot][i].attendanceStatus);
				 var userId= parseInt(studentData.studentAttendance[date][currentSlot][i].userId);
				 var isHistory=1;
				 if(status!=_Attendance.STATUS.NOCLASS || checkAttendanceDbDetails(date,currentSlot,slotPosition,userId)){
					 studentData.studentAttendance[date][currentSlot][i].attendanceIsHistory=0;
					 studentData.isAttendanceModified=true;
				 }
				}
	
					
	 }

		function checkAttendanceDbDetails(date,currentSlot,slotPosition,userId){
			var resp=false;
			var studentObj=getStudentAttendanceFromDb(date,currentSlot,slotPosition,userId);
			if(studentObj && parseInt(studentObj.isHistory)==0){
					 resp=true;
			}
			return resp;
		} 
		
		
		function setSavedAttendanceToDbAttendance(){
			var status= false;
			studentData.dbAttendance={};
			for(var date in studentData.studentAttendance){
				for(var slot in studentData.studentAttendance[date]){
					for(var i in studentData.studentAttendance[date][slot]){
						var userId=studentData.studentAttendance[date][slot][i].userId;
						var attendanceStatus=studentData.studentAttendance[date][slot][i].attendanceStatus;
						var attendanceIsHistory=studentData.studentAttendance[date][slot][i].attendanceIsHistory;
						var attendanceDescription=studentData.studentAttendance[date][slot][i].attendanceDescription;
						var timeArr={};
						var studentArr=[];
						 if(studentData.dbAttendance.hasOwnProperty(date)){
							 timeArr=studentData.dbAttendance[date];    
						 }
						 if(timeArr.hasOwnProperty(slot)){
							 studentArr=timeArr[slot];
						 }
						 var studentObj={
								 userId:userId,
								 status:attendanceStatus,
								 isHistory:attendanceIsHistory,
								 description:attendanceDescription
						 }
						 studentArr.push(studentObj);
						 timeArr[slot]=studentArr;
						 studentData.dbAttendance[date]=timeArr;
						}

				}
			}
			// changeAttendanceStatusFrmDb();
		}
		
		
		var showAction=null;
		function getAttendanceDescription(thisReq,currentAttendanceStatus){
			var thisId=$(thisReq).attr('id');
			var ids=thisId.split("_");
			var date=ids[1];
			var slotPosition=ids[2];
			var studentId=$(thisReq).attr('data-userId');
			var currentSlot=$("#slotDate_"+date+"_"+slotPosition).val();			
			if(studentId==0){
				return;
			}
			var resp=false;
			
			if(currentAttendanceStatus==_Attendance.STATUS.PRESENT && studentData.isEnabledAbsentReason){
				var sObj=getStudentAttendanceFromDb(date,currentSlot,slotPosition,studentId);
			if(parseInt(sObj.status)==_Attendance.STATUS.ABSENT){
				resp=true;
				$("[id^=stdAttend_]").attr("disabled",true);
			}
			}
			if(!resp){
				return;
			}
			var text="Reason for ";
			switch(currentAttendanceStatus){
			default:text +="Absent";
			break;
			}
			var currentSlotName=$("#slotDate_"+date+"_"+slotPosition).find('option:selected').text();
			text +=" ("+currentSlotName+","+ date +")";	
			var studentObj=getStudentInfo(studentData.studentAttendance[date][currentSlot],studentId);
			var formData={
					menuId : this.menuId,
					controllerMode : this.controllerMode,
					actionType : 77,
					attendanceStatus:currentAttendanceStatus,
					slotPosition:slotPosition,
					timeSlot:currentSlot,
					date:date,
					studentObj:JSON.stringify(studentObj),
					electiveType:studentData.subjects.subjectType,
			}
			doAjaxCall(this.url, 'GET', formData, function(data) {
				 showAction = bootbox.dialog({
					size : 'small',
					title : text,
					show : false,
					message : data,
					 keyboard: false,
					onEscape : function(e) {
						return handleSaveAttenanceDesc(thisReq,2);
					},
					buttons :[
						   			{
						   				type : "button",
						   				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true'></span>Clear Reason",
						   				className : "btn-sm btn-default",
						   				callback : function(e) {
						   					handleSaveAttenanceDesc(thisReq,1);
						   					return false;
						   				}
						   			},
						   			{
						   				type : "cancel",
						   				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Close",
						   				className : "btn-sm btn-default",
						   				callback : function(e) {
						   					return handleSaveAttenanceDesc(thisReq,2);
						   				}
						   			} ]
		   			
				});
				showAction.on('shown.bs.modal', function() {

				});

				showAction.on('hidden.bs.modal', function() {
					showAction = null;
				});
				showAction.modal('show');
				$("[id^=stdAttend_]").attr("disabled",false);
				isEnableForMarkAttendance();
			});
			
		}
		
		
		
		function handleSaveAttenanceDesc(thisReq,typeOfClick){
			var date=$('#selectedDate').val();
			var currentSlot=$('#selectedTimeSlot').val();
			var slotPosition=$('#selectedSlotPosition').val();
			var studentId=$('#selectedStudent').val();
			var studentArr=studentData.studentAttendance[date][currentSlot];
			var studentObj=getStudentInfo(studentArr,studentId);
			 var toolTipId = $('#attToolTip_'+ date + '_' + slotPosition +'_' + studentId);
			if(typeOfClick==1){// clearType
				studentObj.attendanceDescription="";
				$("#attDesc_"+studentId).val("");
				 $(toolTipId).attr('data-content', "");
			}else if(typeOfClick==2){// closeType
				  var prevStudentObj="";
				 if(!studentObj.attendanceDescription){
					 prevStudentObj=getStudentAttendanceFromDb(date,currentSlot,slotPosition,studentId);
					 if(prevStudentObj){
					 studentObj.attendanceStatus=prevStudentObj.status;
					 studentObj.attendanceIsHistory=prevStudentObj.isHistory;
					 	var thisId=$('#stdAttend_'+ date + '_' + slotPosition +'_' + studentId);
						$(thisId).data('checked', parseInt(studentObj.attendanceStatus));
						getAttendanceCurrentStatus($(thisId));
						getAttendanceStatusByRestriction($(thisId));
						attendanceProgressBar(date,currentSlot,slotPosition,studentArr);
						checkAllStudentAttendanceByColumn(date,currentSlot,slotPosition,studentArr);
						checkStudentAllAttendanceByRow(thisReq);
					 }
					}		
			}else if(typeOfClick==3){// saveType
				studentObj.attendanceDescription=$(thisReq).val();			
				 $(toolTipId).attr('data-content', $(thisReq).val());
			}
			 
		}	
		
		function getStudentInfo(studentArr,studentId){
			var studentInfo="";
			 for(var i in studentArr){
					if(studentArr[i].userId.startsWith(studentId)){
						studentInfo=studentArr[i];
						break;
					}
				}
			 return studentInfo;
		}

		function getStudentAttendanceFromDb(date,currentSlot,slotPosition,userId){
			var studentObj="";
			 if(studentData.dbAttendance.hasOwnProperty(date)){
				 if(studentData.dbAttendance[date].hasOwnProperty(currentSlot)){
					 var studentArr=studentData.dbAttendance[date][currentSlot];
					 for(var i in studentArr){
							if(studentArr[i].userId.startsWith(userId)){
								studentObj=studentArr[i];
								break;
							}
						}
				 }
			 }
			 return studentObj;
		}


		function getStudentArrAttendanceFromDb(date,currentSlot,slotPosition){
			 var studentArr="";
			 if(studentData.dbAttendance.hasOwnProperty(date)){
				 if(studentData.dbAttendance[date].hasOwnProperty(currentSlot)){
					 studentArr=studentData.dbAttendance[date][currentSlot];
				 }
			 }
			 return studentArr;
		}

		function getStudentArrInfo(date,currentSlot){
			return studentData.studentAttendance[date][currentSlot];
		 }
		
		
		
		
		 
		
		function displayLastAttendanceUpdate(val){
		if(!val){
			val='Not Updated'
		}else{
			val=formatDate(val,"DD-MMM-YYYY hh:mm A");
		}
			document.getElementById('attendanceLastUpdated').innerHTML=val;
	}
		 
		
		
		function saveAttendance(typeOfClick) {
			 if(isAttendanceValid() || !checkIsSlotsAvailable()) {
				 showIdMessage('Mark Attendance at least one class', 'error', 'showAttendanceMsg', 'top');
				 return;
			 }  
			    bgCurtain();
			var formData = {
					controllerMode : 8030,
					actionType : 20,
					menuId : this.menuId, 
					studentAttendance:JSON.stringify(studentData),
				};
			
			
			$('[id^=saveAttendance_]').prop('disabled',true);
			doAjaxCall(this.url, 'POST', formData, function(data) {
			var dataArray = data.split("_");
			var status = dataArray[0].toUpperCase();
			var statusResp = dataArray[1];
			if (status == "SUCCESS") {
				showIdMessage(statusResp, 'success', 'showAttendanceMsg', 'top');
				handleAttendanceSuccess(typeOfClick);
			} else if (status == "ERROR") {
				$('[id^=saveAttendance_]').prop('disabled',false);
				showIdMessage(statusResp, 'error', 'showAttendanceMsg', 'top');
				// isValidAttendanceSearchError(typeOfClick);
			}
			removeBgCurtain();
		});

		}

		
		function isAttendanceValid(){
			var resp=false;
			if(!studentData.isAttendanceModified){
				resp=true;
			}/*
				 * if(studentData.isFavouriteModified && resp){ resp=false; }
				 */
			return resp;
			}
		
		function attendanceCallback(){
			if(this.menuId==882){
				document.getElementById('menuTab_' + menuId).click();
				$('[id^=saveAttendance_]').prop('disabled',true);
			}
			}
		
		function handleAttendanceSuccess(typeOfClick){
				setSavedAttendanceToDbAttendance();// Here storing db values
													// into dupicate dbAtendance
				displayLastAttendanceUpdate(new Date());
				studentData.changedDateAndSlots={};// Here clear whatever
													// changedDateAndSlots has
				studentData.isAttendanceModified=false;// reset
														// isAttendanceModified
														// to false
				// studentData.isFavouriteModified=false// reset
				// isFavouriteModified to false
				if(typeOfClick!=_Attendance.ClickedType.AttedanceSaveType){
					startAttendanceTimer(typeOfClick);
				}
				
		}


		var attendanceTimer = null;
		function startAttendanceTimer(typeOfClick) {
			clearTimeout(attendanceTimer);
			attendanceTimer = null;
			attendanceTimer=setTimeout(function() {
				isValidAttendanceSearchSuccess(typeOfClick);
			}, 1000);
		}
		
		function getDayFromDate(date){
			var day = moment(date).day();
			if (day == 0)
			{
				day = 1;// consider as sunday
			} else
			{
				++day;// consider as non-sunday
			}
			return day;
		}
		
		function isEnableForMarkAttendance(){
			if(studentData.inValidDates.length!= 0){
				for(var d in studentData.inValidDates){// not available for
														// mark Attendance
				var date=studentData.inValidDates[d];
				$("[id^=stdAttend_"+date+"_]").attr("disabled",true);
				$("[id^=integratedSubject_"+date+"_]").prop("disabled", true);
				$("[id^=favSlotDate_"+date+"_]").prop("disabled", true);
				$("[id^=stdAttend_0_]").attr("disabled",true);
				$("[id^=slotDate_"+date+"_]").attr("disabled",true);
				}
			}
		}
		
		
		
		function handleSearchAttendenceSuccess(){
		     if(!isDataExistInStudentAttendance()){
		    	 getEmptyShowAttendanceStudentsHtml(1);
		    	 hideSaveAttendanceDiv();
		    	 return;
		     }
		     showSaveAttendanceDiv();
			 manageAttendanceByOnClick();
			 changeAttendanceStatusFrmDb();
		     customTableSort();
		     focusCurrentRow();
		     markIntegratedSubjectAttendance(2,"","");
		     setFavouriteAttendance(2,"")
		     // checkAttendanceAvailableForMark();
		     displayLastAttendanceUpdate(studentData.attendanceLastUpdatedOn);
		     isEnableForMarkAttendance();
		     handleAttendanceTimeTableDetails();
		     studentData.dateWithSlots={};// making empty becz of time
											// coneverstion issue in java
		}


		function handleAttendanceTimeTableDetails(){
			if(studentData.preferenceMasterId==_Attendance.PreferenceType.TimeTable){
				$("[id^=slotDate_] option").not(":selected").remove();
			}
		}
		
	
		function handleGetAttendanceAvailabilitySuccess(data){
			var respJson=JSON.parse(data);
			batchStartDate=respJson['batchStartDate'];
			batchEndDate=respJson['batchEndDate'];
			eventsList=respJson['eventsList'];
			var attendance=respJson['attendance'];	
			if(batchStartDate!="" && attendance.length==0){
				start=moment(batchStartDate, "DD-MMM-YYYY");
		     	end=moment(batchStartDate, "DD-MMM-YYYY");
			}else{
				start=end;
			}
			manageAttendanceDateRangeSelect(start,end);
			$('[id^=saveAttendance_]').prop('disabled',true);
			var attendancePreference=respJson['attendancePreference'];
			var timeTable=respJson['timeTable'];
			if(timeTable.length!=0){
				$('#preferenceId').val(_Attendance.PreferenceType.TimeTable);
			}else if(attendancePreference.length!=0){
				$('#preferenceId').val(_Attendance.PreferenceType.Favourite);
			}else{
				$('#preferenceId').val(_Attendance.PreferenceType.None);
				$('#slot>li a').children().eq(0).click();
				var dayVal=(getDayFromDate(start));
					--dayVal;
				if(dayVal==0){
					dayVal=7;
				}
				$('#day>li a').children().eq(dayVal).click();
			} 
			getAttendenceStudentsSearch(_Attendance.ClickedType.AttedanceDefaultSearchType);
		} 

		
		function resetAttendanceStudentsSearch(typeOfClick){
			if(typeOfClick==_Attendance.ClickedType.ResetType && !isValidAttendanceSearch(typeOfClick)){
				return;
			}	
			$('#slot>li a').each(function() {
				$('input',this).prop("checked", false);
			});
			$('#day>li a').each(function() {
				$('input',this).prop("checked", false);
			});
			 $("#selectedSlots").empty();
			 $("#selectedDates").empty();
			 $("#slotId").val("");
			 $("#dayId").val("");
			 $('#preferenceId').val(_Attendance.PreferenceType.None);
			 manageAttendanceDateRangeSelect(moment(), moment());
			 getEmptyShowAttendanceStudentsHtml(2);
			 studentData.isAttendanceModified=false;// reset
													// isAttendanceModified to
													// false
			// studentData.isFavouriteModified=false // reset
			// isFavouriteModified to false
			 checkComboValues = {};// reset checkComboValues
		}
		
		function handleAttendanceBack(typeOfClick){
			if(typeOfClick==_Attendance.ClickedType.BackType && !isValidAttendanceSearch(typeOfClick)){
				return;
			}
			handleRefresh(1,this.controllerMode,this.actionType,this.menuId);
			 checkComboValues = {};// reset checkComboValues
		}
		function getEmptyShowAttendanceStudentsHtml(type){
			var html="";
			if(type==1){ // if students not find
				html+="<div class='cstm_errshow_bar'><span class='fa fa-users fa-2x' " +
						"aria-hidden='true'></span> No Students found / Semester not started <div class='text-danger'>Note: Please contact Pesu Academy Co-ordinator</div></div>"; 	
			}else if(type==2){ // if sem completed
				html+="<div class='cstm_errshow_bar'><span class='fa fa-users fa-2x' " +
				"aria-hidden='true'></span> No Students found</div>"; 
			}
			$("#showAttendanceStudents").html("");
			$("#showAttendanceStudents").html(html);
		}
		
		function hideSaveAttendanceDiv(){
			$("[data-attendanceSavePreNxt='2']").each(function() {
				$(this).hide();
			});
		}
		
		
		function showSaveAttendanceDiv(){
				$('[data-toggle="tooltip"]').tooltip();
				$('[data-toggle="popover"]').popover();
				$("[data-attendanceSavePreNxt='2']").each(function() {
					$(this).show();
				});
				$("[data-attendanceHref='1']").each(function() {
					$(this).removeClass("disabled");
				});
		}
		function disableAttendanceButtons(){
			$('[id^=saveAttendance_]').prop('disabled',true);
			$("[data-attendanceHref='1']").each(function() {
				$(this).addClass("disabled");
			});
		}
		
		function isDataExistInStudentAttendance(){
			var resp=false;
			if(Object.keys(studentData.dateWithSlots).length!= 0
					&& studentData.studentList.length!=0){
				resp=true;
			}
		return resp;
		}
		
		
		
		 function checkIsNoClassFound(date,slotPosition,studentArr){
			 for(var i in studentArr){
					 if(studentArr[i].attendanceStatus==_Attendance.STATUS.NOCLASS){
						studentArr[i].attendanceStatus=_Attendance.STATUS.PRESENT;
						studentArr[i].attendanceIsHistory=0;
						var thisId = $("#stdAttend_"+date+"_"+slotPosition+"_"+studentArr[i].userId);
						 $(thisId).data('checked', _Attendance.STATUS.PRESENT);
						 $(thisId).attr('data-userId',studentArr[i].userId);
						 getAttendanceCurrentStatus($(thisId));
						 getAttendanceStatusByRestriction($(thisId));
						 checkStudentAllAttendanceByRow(thisId);
					}
			 }	
			 
		 }
		 
		 
		 function saveFavouriteAttendance(typeOfClick) { 
			   // bgCurtain();
			 studentData.preferenceMasterId=1;
			var formData = {
					controllerMode : 8030,
					actionType : 98,
					menuId : this.menuId, 
					studentAttendance:JSON.stringify(studentData),
				};
			$('[id^=saveAttendance_]').prop('disabled',true);
			doAjaxCall(this.url, 'POST', formData, function(data) {
			var dataArray = data.split("_");
			var status = dataArray[0].toUpperCase();
			var statusResp = dataArray[1];
			if (status == "SUCCESS") {
				if(typeOfClick==_Attendance.ClickedType.Individual)
				showIdMessage(statusResp, 'success', 'showAttendanceMsg', 'top');
			} else if (status == "ERROR") {
				$('[id^=saveAttendance_]').prop('disabled',false);
				showIdMessage(statusResp, 'error', 'showAttendanceMsg', 'top');
			}
			// removeBgCurtain();
		});

		}
		
		 
/*--------------------------------End Attendance---------------------------------------------------*/

		
		function attachCheckComboEventUnCheckAll(currentIdComBoId,currentCheckbox){
			$('#' + currentIdComBoId + '>li a').each(function() {
				var id = $('input',this).attr('id');
				if (checkComboValues[id])
					delete checkComboValues[id];
				$('input',this).prop("checked", false);
			})
		}

// ////////////////////END Student Details Info /////////////




// / student attendance list start



function getStudentAttendanceList(controllerMode, actionType, id, selectedData) {
	var buttonName = $("a:focus").text();
	menuId=this.menuId;
	var formData = {
		controllerMode : parseInt(controllerMode),
		actionType : parseInt(actionType),
		id : id,
		selectedData : selectedData,
		menuId : this.menuId
	};
	var buttons = [ 
                	{
					type : "button",
					label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='download-span-1'></span>Download",
					className : "btn-sm btn-default",
					callback : function(e) {
						getAttendanceReport(menuId);
						return false;
					}
				},
				{
			type : "cancel",
			label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
			className : "btn-default btn-sm",
			callback : null
		} ];
	var that=this;
	var obj = getDialogMessage(controllerMode, actionType, id, selectedData);
	doAjaxCall(this.url, 'GET', formData, function(data) {
		getModalDialog('large',	obj.title,data,buttons,function() {
			eval(that.url
					+ "(formData.controllerMode,formData.actionType,formData.id,formData.selectedData,true);");	
});
	});
	

}

		function attachCheckComboEventCheckAll(currentIdComBoId,currentCheckbox){
			$('#' + currentIdComBoId + '>li a').each(function() {
				var obj = {
						id : $('input',this).attr('id'),
						value : $('input',this).attr('value'),
						label : $(this).text(),
						currentIdComBoId:currentIdComBoId
					}
				$('input',this).prop("checked", true);
				if($('input',this).attr('value')!=0)
				checkComboValues[obj.id] = obj;
			})
		}
		 function displayCheckAllLabel(sts,j,currentIdComBoId){
				for ( var i in checkComboValues) {
					if (Object.keys(checkComboValues).length == j && currentIdComBoId==checkComboValues[i].currentIdComBoId){
						sts+=checkComboValues[i].value;
					}else if(currentIdComBoId==checkComboValues[i].currentIdComBoId){
						sts+=checkComboValues[i].value+",";
					}
					j++;
				}
				return sts;
		 }

		 function isCheckAllLabels(currentIdComBoId,selectedCheckId,selectedComBoxLength){
				if($('#' + currentIdComBoId + '>li a').length-1==selectedComBoxLength){
					if($('#' + currentIdComBoId + '>li a').children().eq(0).val()==0){
						  $('#' + currentIdComBoId + '>li a').children().eq(0).prop("checked", true);
						  $("#"+selectedCheckId).empty();
						  $("#"+selectedCheckId).append($('#' + currentIdComBoId + '>li').children().eq(0).text());
					}
				}else if($('#' + currentIdComBoId + '>li a').children().eq(0).val()==0){
					  $('#' + currentIdComBoId + '>li a').children().eq(0).prop("checked", false);
				}
		}


		 function handleRestrictionSingleQuotes(id){
				$('#' + id +" :input").keydown(function(e){
						if(e.which == '222')
						 e.preventDefault();
				});
			}


		 
function handleGoogleSignUp()
{
	
	var redirectUrlValue=GOOGLE_SIGNON_SETUP.TEST_REDIRECT_URL_VALUE;
	
	if(window.location.href.indexOf('pesuacademy.com')>-1)
		{
		redirectUrlValue=GOOGLE_SIGNON_SETUP.ACTUAL_REDIRECT_URL_VALUE;
		}
	
	var params = {};
	params.scope=GOOGLE_SIGNON_SETUP.SCOPE_VALUE;
	params.redirect_uri=redirectUrlValue;
	params.response_type=GOOGLE_SIGNON_SETUP.RESPONSE_TYPE_VALUE;
	params.client_id=GOOGLE_SIGNON_SETUP.CLIENT_ID_VALUE;
	params.approval_prompt=GOOGLE_SIGNON_SETUP.APPROVAL_PROMPT_VALUE;
	
	
	var urlWithParams=buildUrlWithParameters(GOOGLE_SIGNON_SETUP.OAUTH2_AUTH_URL, params)
	window.location.href=urlWithParams;
}
function buildUrlWithParameters(url, parameters)
{
	  var qs = "";
	  for(var key in parameters) {
	    var value = parameters[key];
	    qs += encodeURIComponent(key) + "=" + encodeURIComponent(value) + "&";
	  }
	  if (qs.length > 0){
	    qs = qs.substring(0, qs.length-1); // chop off last "&"
	    url = url + "?" + qs;
	  }
	  return url;
}


function saveProgressReportRecipientsSendMail(controllerMode, actionType)
{
	
		if (!$("#genericSave").valid())
			return false;
	
	if(actionType==1){
		$("#actionType").val(actionType)
	}
	if(actionType==2){
		$("#actionType").val(actionType)
	}
	if(actionType==3){
		$("#actionType").val(actionType)
	}
	if(actionType==4){
		$("#actionType").val(actionType)
	}
		
	var formData = new FormData($('#genericSave')[0]);
	
	bgCurtain();
	doAjaxCall('instituteApp', 'POST', formData,
			function(data) {
					removeBgCurtain();
					
					var id = data.split('##');
					var res=id[0];
					if(res=="SUCCESS"){
						$('#ProgressReportId').val(id[1]);
						showMessage("SUCCESS_Progress Report Details Saved", "success");
					}else{
							$('#ProgressReportId').val(id[1]);
							showMessage("Error_Progress Report Details not Saved Properly", "error");
					}
			}, false, false);
	
}



function getAttendanceReport(menuId){
	
	var formData = {
			controllerMode : 9516,
			actionType : 133,
			classBatchSectionId:$('#getStudentSectionId').val(),
			subjectId:$('#getStudentSubjectId').val(),
			batchClassId:$('#getStudentBatchClassId').val(),
			userId:$('#userId').val(),
			startDate:$('#startDate').val(),
			endDate:$('#endDate').val(),
		    idType:$('#idType').val(),
		    subjectsBatchId:$('#subjectsBatchId').val(),
		    menuId:this.menuId
}
	bgCurtain();
	doAjaxCall('instituteApp', 'GET', formData, function(data) {
		removeBgCurtain();
	if(data!=""){
		var filename=encodeURIComponent(data);
		$('#showErrorMsg').hide();
		window.open('downloadStudentAttendanceList/'+filename,'_blank');
	}else{
		/* showMessage("Data Not Available On !", "error"); */
		
		$('#showErrorMsg').show();
	}
	
	});
}
// window.open('downloadStudentAttendanceList/'+classBatchSectionId+'/'+subjectId+'/'+batchClassId+"/"+userId+"/"+startDate+"/"+endDate+"/"+idType,'_blank');

	// /image upload in course content///
	
	function handleImageUpload(controllermode, actiontype,SubjectId){
		
		var formData = {
				controllerMode : controllermode,
				actionType : actiontype,
				subjectId:SubjectId,
		        menuId:this.menuId
			};
		
		
		doAjaxCall('appAdmin', 'GET', formData, function(data) {
			 showAction = bootbox.dialog({
				size : 'large',
				title : "Details",
				show : false,
				message : data,
				 keyboard: false,
				onEscape : function(e) {
					
				},
				buttons :[
							{
								type : "button",
								label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='classIconSave-id'></span>Save",
								className : "btn-sm btn-default",
								callback : function(e) {
								
								saveUploadedIMage();
									
									return false;
								}
							},
				   			{
				   				type : "cancel",
				   				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Close",
				   				className : "btn-sm btn-default",
				   				callback : function(e) {
				   					
				   				}
				   			} ]
	  			
			});
			showAction.on('shown.bs.modal', function() {

			});

			showAction.on('hidden.bs.modal', function() {
				showAction = null;
			});
			showAction.modal('show');
		});

	}


	function cropUploadImage(){
		var idValues=0;
		var img = "<div class='clearfix'><div class='col-md-12' id='cropImage' style='display:block;margin-top: 15px;'>" +
		"</div><input type='hidden' id='clickedCroppingId' name='clickedCroppingId' value='"+idValues+"'>" +
				"<div class='col-md-12 text-center' style='margin-bottom:10px;'>" +
				"<input type='button' onclick='croppedImage();' value='Crop Image'> " +
				"<input type='button' onclick='saveCroppedImage();' value='Save Image' style='display:none' id='saveCroppedIcon'>" +
				" </div>"+
		"<img id='cropedImg' style='display: block; width: 300px; margin: auto; margin-bottom: 10px;'/></div>";
			getModalDialog('medium', "Image",img, null,function(){
				croppUploadedImage();
				
			});
		
	}



	var uploadImage;
	function addUploadImage(){

		$("#addImage").on("change","[id^=imagePath]",function(){
			var flag=false;
				if(($(this)[0].files[0].type.indexOf("image/")>-1)){
						 var file=$(this)[0].files[0];	
						    if (file) {
						    	fn=file.name;
						    	var ext=fn.substring(fn.lastIndexOf("."));
								ext=ext.substring(1);
						    	
						        var reader = new FileReader();
						        reader.onload = function(readerEvt) {
						            var binaryString = readerEvt.target.result;
						            var image = new Image();
						            uploadImage=binaryString;
						             $('#imagePathInBase64').val(uploadImage);
								        };
								       
									        reader.readAsDataURL(file);
									       /*
											 * $("#ImageFileEdit").css("display","block");
											 * 
											 */
									    } 		
					
				}else{
					showMessage("Only Image files allowed!", "error");
					$(this).val(null);
				}
			
		});
	}


	function croppUploadedImage(idValues) {
		 $('#cropImage').croppie('destroy');
		        $('#cropImage').croppie({
		            // viewport options
		            viewport: {
		                width: 128,
		                height: 128,
		                type: 'square' // or 'circle'
		            },

		            // boundary options
		            boundary: {
		                width: 200,
		                height: 200
		            },
		            // addiontal CSS class
		            customClass: '',

		        });

		        var urlBase= uploadImage;
		        $('#cropImage').croppie('bind',{
		          url:urlBase,
		          points: [10,200,10,200],
		        });
		        
		       
	};

	var croppedImageData;
	function croppedImage(){
	    
		
		$('#cropImage').croppie('result', 'canvas').then(function (img) {
	      // img is html positioning & sizing the image correctly if
			// resultType is
			// 'html'
	      // img is base64 url of cropped image if resultType is 'canvas'
	     
			 $('#imagePathInBase64').val(img);
		      $('#cropedImg').attr("src",img).show();
		      croppedImageData=img;
		      var image = new Image();
		      image.src =img;
		  
		      $('#saveCroppedIcon').css('display','inline-block');
		      
		    
	    });
	  
	}


	function saveCroppedImage(){

		 modalDialog.modal('hide');
		$('#imagePathInBase64').val(croppedImageData);
		
	}



	function saveUploadedIMage(){
		var picFlag=false;
		var image = new Image();
    	var imageFile=$('#imagePathInBase64').val();
    	if(imageFile=="" || imageFile==null){
			showMessage("Please upload  image!", "error");
			 return false;
		}
    	
    	image.src=$('#imagePathInBase64').val();
		if(image.width < 100 || image.height < 100 && image.width > 128 || image.height > 128){
			picFlag=true;
	        }
		
		if(picFlag){
			showMessage("Please upload Picture With Height/width Greater Than 128 And less than 100 pixcels only", "error");
			return false;
		}
		
	var formData = {
			controllerMode : 7550,
			actionType : $('#actionType').val(),
			subjectId:$('#subjectId').val(),
			imsg:$('#imagePathInBase64').val(),
			subjectImageId:$('#subjectImageId').val(),
	        menuId:$('#menuId').val()
		};
	doAjaxCall('appAdmin', 'GET', formData, function(data) {
		removeBgCurtain();
		showMessage("Saved successfully","success");
		removeBgCurtain();
		showAction.modal('hide');
	});

	}


	function checkIsSlotsAvailable(){
			resp=true;
		$('[id^=slotDate_]').each(function() {
				if(!$(this).val()){
				resp=false;
				return false;
				}
			});
		
		return resp
	}
	

	/*--------------------------------Start Esa Timetable---------------------------------------------------*/




	function handleEsaTimeTable(controllerMode,actionType,esaId,selectedData){
		bgCurtain();
		var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			menuId : this.menuId,
			esaId : esaId,
			selectedData:selectedData
		};
		doAjaxCall(this.url, 'GET', formData, function(data) {
			$('#esaResultsDiv').html("");
			$('#esaResultsDiv').html(data);
			esaTTTimer = null;
			removeBgCurtain();
		});
	}


	function esaTimeTable(tempList,timeTableMap,actonType){ 
		var esaDescription="";
		var esaSlots="";
		   for (var i = 0; i<tempList.length; i++) {  
			   esaDescription +="<th width='40%' id=currentSlot_"+tempList[i].esaTimeTableTemplateDetailsId+" data-desc='"+tempList[i].description+"' data-slotId="+tempList[i].esaTimeTableTemplateDetailsId+">"+tempList[i].description+"</th>";
			   esaSlots +="<th data-slotId="+tempList[i].esaTimeTableTemplateDetailsId+">"+getDate(tempList[i].startTime)+"-"+getDate(tempList[i].endTime)+"</th>";
		   }
		   if(actonType==95) 
		   esaDescription +="<th rowspan='3' width='30' class='text-center'><a href='javascript:addEsaTimeTableByDateWise(1,"+JSON.stringify(tempList)+")' class='btn btn-xs btn-default addNewTT'>" +
		   			"<span class='glyphicon glyphicon-plus' aria-hidden='true'></span></a></th>";
			$('#esaDescription').append(esaDescription);
			$('#esaSlots').append(esaSlots);
			if(actonType==95) 
			getEsaTimeTableComboBox(timeTableMap,tempList);
			else if(actonType==100)
			displayNonEditableEsaTimeTable(tempList,timeTableMap);
			
	}

	function addEsaTimeTableByDateWise(typeOfClick,tempList){ // typeOfClick
																// decide 1:add
																// 2:edit
		esaTTCurrentRowId++;
		var today=new Date();
		var esaTableCalenderDiv ="<tr class='esa_settt_row' id=esaTTCurrentRow_"+esaTTCurrentRowId+"><td data-dateInfo='date' valign='middle'><div class='input-group date form_date'  data-date=''data-date-format='dd MM yyyy' data-link-field=esaCurrentDatePicker_"+esaTTCurrentRowId+" data-link-format='yyyy-mm-dd' id='datetimepicker1'>"
				+"<input class='form-control input-sm' readonly style='background-color: rgb(255, 255, 255)' type='text'id='showEsaDatePicker_"+esaTTCurrentRowId+"' data-dateVal='"+today+"' onchange='isValidDateInEsa(this.value,"+esaTTCurrentRowId+",2),setEsaDayName("+esaTTCurrentRowId+",this.value)' name='cbtScheduleDt' required value='"+formatDate(today,"DD MMMM YYYY")+"'>"
				+"<span class='input-group-addon'><span class='glyphicon glyphicon-calendar'></span></span>"
				+"<input id=esaCurrentDatePicker_"+esaTTCurrentRowId+" name='esaCurrentDatePicker' type='hidden' value='"+formatDate(today,"YYYY-MM-DD")+"'/></div> <span class='dayname' id=esaDayName_"+esaTTCurrentRowId+">"+moment(today).format('dddd')+"</span></td>";
			$('#esaTableBody').append(esaTableCalenderDiv);
			if(typeOfClick==_EsaTimeTable.typeOfClick.Add)
			isValidDateInEsa(today,esaTTCurrentRowId,1)
			
		for (var i = 0;i<tempList.length; i++) {  
			var esaTableDiv="<td id=esaTTCurrentTd_"+esaTTCurrentRowId+"_"+tempList[i].esaTimeTableTemplateDetailsId+" data-groupId='0' data-isHistory='0'  data-slotId="+tempList[i].esaTimeTableTemplateDetailsId+" data-tdDiv='tdDiv'>";
			esaTableDiv +=getEsaTdDiv(typeOfClick,esaTTCurrentRowId,tempList[i].esaTimeTableTemplateDetailsId);
			esaTableDiv +="</td>";
			/*
			 * esaTableDiv +="<td class='text-center' valign='middle'>" +"<a
			 * class='indiv_blk_link' id='allocateTT_1'><span class='glyphicon
			 * glyphicon-edit' aria-hidden='true'></span><span>Manage Question
			 * Paper</span></a>" +" <a class='indiv_blk_link'
			 * id='esaAllocateRoom_1'><span class='glyphicon glyphicon-edit'
			 * aria-hidden='true'></span><span>Room Allocation</span></a></td>"
			 */
				$('#esaTTCurrentRow_'+esaTTCurrentRowId).append(esaTableDiv);
				if(typeOfClick==_EsaTimeTable.typeOfClick.Add)
				setEsaTTProgram("",esaTTCurrentRowId,esaTTCurrentDivId);
		}
			var esaTableRemoveButtonDiv ="<td class='text-center' valign='middle'><a onclick='removeEsaTimeTableDiv(1,this,"+esaTTCurrentRowId+",100)' class='btn btn-xs btn-default RemovetableRow'><span class='glyphicon glyphicon-minus' aria-hidden='true'></span></a></td>" 
			$('#esaTTCurrentRow_'+esaTTCurrentRowId).append(esaTableRemoveButtonDiv+"</tr>");
			setDateTimePicker();
	}

	function setEsaDayName(esaTTCurrentRowId,date){
			if(date)
	    	 document.getElementById('esaDayName_'+esaTTCurrentRowId).innerHTML=moment(date).format('dddd');
	}

	function getEsaTdDiv(typeOfClick,esaTTCurrentRowId,esaTimeTableTemplateDetailsId){// typeOfClick
																						// decide
																						// 1:add
																						// 2:edit
		var resp="";
		if(typeOfClick==_EsaTimeTable.typeOfClick.Add)
		  esaTTCurrentDivId++;
		
	 resp +="<div class='esa_inner_ele_row' id=tdDiv_"+esaTTCurrentRowId+"_"+esaTTCurrentDivId+"><div class='col-xs-3'><select class='esa_frmelem' data-program='program' id=esaProgrmId_"+esaTTCurrentRowId+"_"+esaTTCurrentDivId+"  data-slotId="+esaTimeTableTemplateDetailsId+" onchange='javascript:getEsaTTSemesterByProgrmId(1,"+esaTTCurrentRowId+","+esaTTCurrentDivId+",this.value,\""+esaTimeTableTemplateDetailsId+"\")'></select></div>" 
					    +"<div class='col-xs-3'><select class='esa_frmelem'  data-sem='sem' id=esaSem_"+esaTTCurrentRowId+"_"+esaTTCurrentDivId+" multiple='multiple' data-slotId="+esaTimeTableTemplateDetailsId+" onmouseout='javascript:checkESASemProgram(this)'></select></div>" 
	 resp +="<div class='col-xs-5'><textarea class='esa_frmelem'  data-subjectCode='subjectCode' id=subjectCode_"+esaTTCurrentRowId+"_"+esaTTCurrentDivId+" data-slotId="+esaTimeTableTemplateDetailsId+" placeholder='Enter Subject Code'></textarea>"
			          +"<input type='text' data-desc='desc' id=desc_"+esaTTCurrentRowId+"_"+esaTTCurrentDivId+" class='esa_frmelem'placeholder='Description' data-slotId="+esaTimeTableTemplateDetailsId+"/></div>"
	 resp +="<div class='col-xs-1'><a href='javascript:addEsaTd(1,"+esaTTCurrentRowId+",\""+esaTimeTableTemplateDetailsId+"\")' class='addesaelerow' ><span class='glyphicon glyphicon-plus-sign' aria-hidden='true'></span></a>"
		               +"<a onclick='removeEsaTimeTableDiv(2,this,"+esaTTCurrentRowId+","+esaTTCurrentDivId+")' class='remesaelerow'><span class='glyphicon glyphicon-minus-sign' aria-hidden='true'></span></a></div><div>"                
	return 	resp;		 
	 }

	function addEsaTd(typeOfClick,esaTTCurrentRowId,esaTimeTableTemplateDetailsId){
		var resp=getEsaTdDiv(typeOfClick,esaTTCurrentRowId,esaTimeTableTemplateDetailsId);
		$("#esaTTCurrentTd_"+esaTTCurrentRowId+"_"+esaTimeTableTemplateDetailsId).append(resp);
		if(typeOfClick==_EsaTimeTable.typeOfClick.Add)
		setEsaTTProgram("",esaTTCurrentRowId,esaTTCurrentDivId);
	}
	function removeEsaTimeTableDiv(typeOfClick,thisReq,rowId,divId){
		if(typeOfClick==_EsaTimeTable.typeOfClick.Individual){
			var progrm=parseInt($("#esaProgrmId_"+rowId+"_"+divId).val());
			if(progrm!=0){
				progrm=$('#esaProgrmId_'+rowId+'_'+divId+' option:selected').text();
				var slotId=$('#esaProgrmId_'+rowId+'_'+divId).attr('data-slotid');
				var slotName=$('#currentSlot_'+slotId).attr('data-desc')
				getConfirmDialog(
						"Remove "+ progrm + " (" + slotName +" - "+ $("#showEsaDatePicker_"+rowId).val()+ ")  information",
						" Do you want to remove "+ progrm + " (" + slotName +" - "+ $("#showEsaDatePicker_"+rowId).val()+ ")  information ?",
						function() {
							$(thisReq).parents('.esa_inner_ele_row').remove();
						});
			}else{
				$(thisReq).parents('.esa_inner_ele_row').remove();
			}
		}
		else if(typeOfClick==_EsaTimeTable.typeOfClick.RowWise){
			getConfirmDialog(
					"Remove "+$("#showEsaDatePicker_"+rowId).val() +" schedule",
					" Do you want to remove "+ $("#showEsaDatePicker_"+rowId).val() +" schedule ?",
					function() {
						deleteValueFromArray(randomDate,$("#showEsaDatePicker_"+rowId).val());
						$(thisReq).parents('.esa_settt_row').remove();
					});
		}
		
	}

	function getEsaTimeTableComboBox(timeTableMap,tempList){
				doAjaxCall('/Academy/a/i/programByEsaId/'+$("#esaId").val(), 'GET', {}, function(data) {
					programOptions=data;
					getEsaTimeTableFromDb(timeTableMap,tempList);
				});
	}

	function setEsaTTProgram(prgrmId,esaTTCurrentRowId,esaTTCurrentDivId){
		$('#esaProgrmId_'+esaTTCurrentRowId+"_"+esaTTCurrentDivId).append(programOptions);
		if(prgrmId){
			$('#esaProgrmId_'+esaTTCurrentRowId+"_"+esaTTCurrentDivId).val(prgrmId);
		}else{
			$('#esaProgrmId_'+esaTTCurrentRowId+"_"+esaTTCurrentDivId+' option:first-child').attr("selected", "selected");
			 prgrmId=parseInt($('#esaProgrmId_'+esaTTCurrentRowId+"_"+esaTTCurrentDivId).val());
			 var slotId=$('#esaProgrmId_'+esaTTCurrentRowId+"_"+esaTTCurrentDivId).attr('data-slotId');
			if(prgrmId!=0){
				getEsaTTSemesterByProgrmId(2,esaTTCurrentRowId,esaTTCurrentDivId,prgrmId,slotId);
			}
		}
		
	}


	function getEsaTTSemesterByProgrmId(typeOfClick,rowId,divId,esaProgrmId,slotId){
		if(typeOfClick==_EsaTimeTable.typeOfClick.Add && !isValidProgramInEsa(esaProgrmId,slotId,rowId,divId)){
			showIdMessage($('#esaProgrmId_'+rowId+"_"+divId+' option:selected').text()+' already in used in this date',
					'error', 'esaProgrmId_'+rowId+"_"+divId, 'top');
			$('#esaProgrmId_'+rowId+"_"+divId).val(0);
			return;
		}
		doAjaxCall('/Academy/a/i/getEsaSemesterByProgrmId/'+esaProgrmId+'/'+$("#esaId").val(), 'GET', {}, function(data) {
			$('#esaSem_'+rowId+"_"+divId).empty();	
			$('#esaSem_'+rowId+"_"+divId).append(data);
			var semList=esaTableInfoFromDb[2];
			var groupId= $("#esaTTCurrentTd_"+rowId+"_"+slotId).attr('data-groupId');
			if(semList.length!=0 && groupId!=0){
				var semList=esaTableInfoFromDb[2];
				showEsaSemDetails(rowId,divId,semList,esaProgrmId,groupId,'');
			}
		
			
		});
	}

	function isValidProgramInEsa(prgrmId,currentSlotId,rowId,divId){
		var resp=true;
		return resp;
	}

	function isValidDateInEsa(today,rowId,typeOfClick){
		var resp=false;
		var respDate="";
		today=formatDate(today,"DD MMMM YYYY");
		$('[id^=showEsaDatePicker_]').each(function() {
			var id=$(this).attr('id');
			if(typeOfClick==_EsaTimeTable.typeOfClick.Add){
				if(randomDate.indexOf(today) < 0){
					respDate=today
				}else{
					respDate=getEsaDateByOrder(today);
				}
				resp=true;
				randomDate.push(respDate);
			}else if(typeOfClick==_EsaTimeTable.typeOfClick.EDIT){
				 respDate=$("#showEsaDatePicker_"+rowId).attr('data-dateVal');	
				if($(this).val()==today && rowId!=parseInt(id.split("_")[1])){
					showIdMessage(formatDate($(this).val(),"DD MMMM YYYY")+" already in use", 'error', "showEsaDatePicker_"+rowId, 'top');
					 resp=true;
				}
			}
			if(resp){
				$("#showEsaDatePicker_"+rowId).val(formatDate(respDate,"DD MMMM YYYY")),
				$("#esaCurrentDatePicker_"+rowId).val(formatDate(respDate,"YYYY-MM-DD")),
				$("#showEsaDatePicker_"+rowId).attr('data-dateVal',formatDate(respDate,"DD MMMM YYYY")),
				 setEsaDayName(rowId,respDate);
				return false;
			}	
		});
		
		if(!resp){
			deleteValueFromArray(randomDate,respDate);
			$("#showEsaDatePicker_"+rowId).attr('data-dateVal',formatDate(today,"DD MMMM YYYY"));
			randomDate.push(today);
		}
		return resp;
	}

	function getEsaDateByOrder(respDate){
		randomDate.sort();
		respDate=formatDate(moment(respDate).add(1, 'days'),"DD MMMM YYYY")
		for(var i in randomDate){
			if(respDate==randomDate[i]){
				return getEsaDateByOrder(respDate);
				
			}
		} 
	return respDate;
	}
	
	
	function deleteValueFromArray(arr,val){
		for(var i in arr){
			if(arr[i].startsWith(val)){
				arr.splice(i,1);
				break;
			}
		}
	}
	
	function saveEsaTimeTable(typeOfClick) {
		id='showEsaTimetableMsg';
		var esaTimeTableInfo=getEsaTimeTableInfo();
		if(esaTimeTableInfo[0]){
			var ids=esaTimeTableInfo[0].split("&&");
			showIdMessage(ids[1], 'error', ids[0], 'top');
			return;
		}else if(Object.keys(esaTimeTableInfo[1]).length==0){
			showIdMessage('Please provide at least one session details', 'error', id, 'top');
			return;
		}
		    bgCurtain();
		var formData = {
				controllerMode : 370,
				actionType : 96,
				menuId : this.menuId, 
				esaId:$("#esaId").val(),
				esaTimeTableInfo:JSON.stringify(esaTimeTableInfo[1])
			};
		$('[id^=saveEsaTimeTable_]').prop('disabled',true);
		doAjaxCall(this.url, 'POST', formData, function(data) {
		var dataArray = data.split("_");
		var status = dataArray[0].toUpperCase();
		var statusResp = dataArray[1];
		if (status == "SUCCESS") {
			showIdMessage(statusResp, 'success', 'showEsaTimetableMsg', 'top');
		} else if (status == "ERROR") {
			if(dataArray[1]=='esaProgrmId'){
				var id=dataArray[1]+"_"+dataArray[2]+"_"+dataArray[3];
				statusResp=dataArray[4];
			}
			showIdMessage(statusResp, 'error', id, 'top');
		}
		removeBgCurtain();
		$('[id^=saveEsaTimeTable_]').prop('disabled',false);
	});

	}

	function getEsaTimeTableInfo(){	
		var respObj=[];
		var isValid="";
		var objArr=[];
		var programError=false;
		var dateObject={};
		var date="";
		$("#esaTableBody tr").each(function(){
			var sessionObj={};
			$(this).children().each(function(){
				var thisReq=$(this);
				if($(thisReq).attr("data-dateInfo")){
					date=$(thisReq).find("input")[1].value;
				}else if(thisReq.length>0 && $(thisReq).attr("data-tdDiv")){
					var slotId=$(thisReq).attr('data-slotId');
					var groupId=$(thisReq).attr('data-groupId');
					$(thisReq).children().each(function(){
						var parameterObj={};
						var id="";
						var semError=""
						$(this).find("select").each(function(){
							if($(this).attr("data-program")){
								id=$(this).attr('id');
								parameterObj["programId"]=$(this).val();
								if(parameterObj["programId"]!='0'){
									programError=true;
								}
								parameterObj["programName"]=$('#'+id+' option:selected').text();
							}else if($(this).attr("data-sem")){
							 	var sem=$(this).val() ? $(this).val() : "";
								parameterObj["semIds"]=sem;
								if(!sem && parameterObj["programId"]!='0'){
									semError="Please select at least one semester  ";
								}
							}
						});
								parameterObj["subjectCode"]=$(this).find("textarea").val();
								parameterObj["desc"]=$(this).find("input").val();
								parameterObj["slotId"]=slotId;
								parameterObj["slotName"]=$('#currentSlot_'+slotId).attr('data-desc');
								parameterObj["groupId"]=groupId;
								sessionObj[id]=parameterObj;
								dateObject[date]=sessionObj;
						  
						// Start validation
						var errorCode="";
						if(semError){
							isValid=id+"&&"+semError+errorCode;
						}else if((!isValid && !parameterObj["subjectCode"]) && parameterObj["programId"]!='0'){
							isValid=id+"&&"+"Please enter subjectcode "+errorCode;
						}else if((!isValid && parameterObj["subjectCode"]) && parameterObj["programId"]=='0'){
							isValid=id+"&&"+"Please select program "+errorCode;
						}else if((!isValid && parameterObj["desc"]) && parameterObj["programId"]=='0'){
							isValid=id+"&&"+"Please select program  "+errorCode;
						} 
						// End validation
					});
			}			
			});
		});
		
		if(!programError){
			isValid="showEsaTimetableMsg"+"&&"+"Please select at least one program";
		}
		
		respObj.push(isValid);
		respObj.push(dateObject);
		return respObj;
	}


	function getEsaTimeTableFromDb(timeTableWithPrgrmMap,tempList){
		var timeTableMap =timeTableWithPrgrmMap[0];
		var prgrmSemMap =timeTableWithPrgrmMap[1];
		var semList=timeTableWithPrgrmMap[2];
		if(Object.keys(timeTableMap).length>0){
			var dateTemp="";
			var dateSortMap=Object.keys(timeTableMap).sort();
			for (d in dateSortMap){
				var date=dateSortMap[d];
				if(dateTemp!=date){
					addEsaTimeTableByDateWise(_EsaTimeTable.typeOfClick.EDIT,tempList);
					$("#showEsaDatePicker_"+esaTTCurrentRowId).val(formatDate(date,"DD MMMM YYYY"));
					$("#esaCurrentDatePicker_"+esaTTCurrentRowId).val(date);
					dateTemp=date;
					$('[id^=tdDiv_'+esaTTCurrentRowId+']').remove();
					setEsaDayName(esaTTCurrentRowId,date);
				}
				for (p in timeTableMap[date]){
					var subjectCode="";var arrayIds=[];
					esaTTCurrentDivId++;
					for (i in timeTableMap[date][p]){
						var dto=timeTableMap[date][p][i];
						var prgrmId=dto.programId;
						var divOrder = dto.orderBy;
						if(i==0){
							randomDate.push(formatDate(date,"DD MMMM YYYY"));
							addEsaTd(_EsaTimeTable.typeOfClick.EDIT,esaTTCurrentRowId,dto.esaTimeTableTemplateDetailsId);
							setEsaTTProgram(prgrmId,esaTTCurrentRowId,esaTTCurrentDivId);
							$('#esaSem_'+esaTTCurrentRowId+"_"+esaTTCurrentDivId).append(prgrmSemMap[prgrmId]);
							$("#desc_"+esaTTCurrentRowId+"_"+esaTTCurrentDivId).val(dto.description);	
							$("#esaTTCurrentTd_"+esaTTCurrentRowId+"_"+dto.esaTimeTableTemplateDetailsId).attr('data-groupId',dto.groupId);
							showEsaSemDetails(esaTTCurrentRowId,esaTTCurrentDivId,semList,prgrmId,dto.groupId,divOrder);
							$("#showEsaDatePicker_"+esaTTCurrentRowId).attr('data-dateVal',formatDate(date,"DD MMMM YYYY"));
							}
						if(arrayIds.indexOf(dto.subjectId) < 0){
								arrayIds.push(dto.subjectId);
								subjectCode+=dto.subjectDescription+",";
							}
						 }
					$("#subjectCode_"+esaTTCurrentRowId+"_"+esaTTCurrentDivId).val(subjectCode);
					}
				$('[id^=esaTTCurrentTd_'+esaTTCurrentRowId+']').each(function() {
					var id=$(this).attr('id');
					var esaTimeTableTemplateDetailsId=$(this).attr('data-slotId');
					if($("#"+id).find(".esa_inner_ele_row").length==0){
						addEsaTd(_EsaTimeTable.typeOfClick.Add,esaTTCurrentRowId,esaTimeTableTemplateDetailsId);
					}
				});
			}
		} 
	}
	  
	function showEsaSemDetails(rowId,divId,semList,prgrmId,groupId,divOrder){
		for (s in semList){
			if(prgrmId==semList[s].programId && semList[s].groupId==groupId && divOrder == semList[s].divOrder){
			$("#esaSem_"+rowId+"_"+divId+" option[value="+semList[s].classId+"]").attr("selected",true);
		}
			}
	}


	function cancelEsaTimeTable(info,menuTab){
		getConfirmDialog( 
				" Confirm Navigation ",
				" Are you sure you want to leave this page ?",
				function() {
					handleRefresh("","","",menuTab);
				});
	}


	function clearEsaTimeTable(selectedData) {
		var formData = {
				controllerMode : 370,
				actionType : 97,
				menuId : this.menuId, 
				esaId:$("#esaId").val(),
				selectedData:selectedData
		};
		getConfirmDialog(
				"Clear "+selectedData +" TimeTable ",
				" Do you want to clear the "+ selectedData + " TimeTable ?",
				function() {
			$('[id^=resetEsaTimeTable_]').prop('disabled',true);
			doAjaxCall(this.url, 'GET', formData, function(data) {
			var dataArray = data.split("_");
			var status = dataArray[0].toUpperCase();
			var statusResp = dataArray[1];
			if (status == "SUCCESS") {
				showIdMessage(statusResp, 'success', 'showEsaTimetableMsg', 'top');
				startEsaTTTimer($("#esaId").val(),selectedData);
			} else if (status == "ERROR") {
				showIdMessage(statusResp, 'error', 'showEsaTimetableMsg', 'top');
			}
			$('[id^=resetEsaTimeTable_]').prop('disabled',false);
		});
			
		});
		
	}

	var esaTTTimer = null;
	function startEsaTTTimer(esaId,selectedData) {
		clearTimeout(esaTTTimer);
		esaTTTimer = null;
		esaTTTimer=setTimeout(function() {
			handleEsaTimeTable(370,95,esaId,selectedData);
		}, 2000);
	}

	
	function displayNonEditableEsaTimeTable(tempList,timeTableWithPrgrmMap){
		var timeTableMap =timeTableWithPrgrmMap[0];
		var semList=timeTableWithPrgrmMap[2];
		if(Object.keys(timeTableMap).length>0){
			var dateTemp="";
			var dateSortMap=Object.keys(timeTableMap).sort();
			for (d in dateSortMap){
				var date=dateSortMap[d];
				var dateRow= "<tr class='esa_settt_row' id=esaTTCurrentRow_"+date+"><td valign='middle' class='text-center'><strong>" +
						""+formatDate(date,"DD MMMM YYYY")+"</strong>" +
						" <span class='dayname'>"+moment(date).format('dddd')+"</span> </td></tr>";
				$('#esaTableBody').append(dateRow);
				for (var i = 0;i<tempList.length; i++) {  
					var esaTableDiv ="<td id=esaTTCurrentTd_"+date+"_"+tempList[i].esaTimeTableTemplateDetailsId+"></td>" 
					 +"<td class='text-center' valign='middle'>"
						+"<a onclick='handleEsaQuestionPaper(this)' class='indiv_blk_link' id=esaQp_"+date+"_"+tempList[i].esaTimeTableTemplateDetailsId+" data-date="+date+" data-tempId="+tempList[i].esaTimeTableTemplateDetailsId+" data-groupId='0'><span class='glyphicon glyphicon-edit' aria-hidden='true'></span><span>Manage Question Paper</span></a>" 
						+"<a onclick='handleEsaSeatingAllocation(370,102,1,this)' data-dss='"+formatDate(date,"DD MMMM YYYY")+"_"+tempList[i].description+"_"+getDate(tempList[i].startTime)+"-"+getDate(tempList[i].endTime)+"' class='indiv_blk_link' id=esaroomAllocation_"+date+"_"+tempList[i].esaTimeTableTemplateDetailsId+" data-date="+date+" data-tempId="+tempList[i].esaTimeTableTemplateDetailsId+" data-groupId='0'><span class='glyphicon glyphicon-edit' aria-hidden='true'></span><span>Seating Allocation</span></a></td>"
						$('#esaTTCurrentRow_'+date).append(esaTableDiv);
				}
				var tempArr=[];
				for (p in timeTableMap[date]){
					var subjectCode="";var arrayIds=[];var sem="",esaTimeTableTemplateDetailsId=""; 
				 var divTd ="<div class='esa_inner_ele_row'>";
					for (i in timeTableMap[date][p]){
						var dto=timeTableMap[date][p][i];
						 esaTimeTableTemplateDetailsId=dto.esaTimeTableTemplateDetailsId;
						var divOrder = dto.orderBy;
						var prgrmId=dto.programId;
						var programAbbreviation=dto.programAbbreviation;
						if(i==0){
							divTd+="<div class='col-xs-3 text-center'>  "+programAbbreviation+" </div>";
							sem=getEsaSemDetails(semList,prgrmId,dto.groupId,divOrder);
						}
						if(arrayIds.indexOf(dto.subjectId) < 0){
							arrayIds.push(dto.subjectId);
							subjectCode+=dto.subjectDescription+", ";
						}
						if(tempArr.indexOf(esaTimeTableTemplateDetailsId)<0){
							tempArr.push(esaTimeTableTemplateDetailsId);
							$("#esaQp_"+date+"_"+esaTimeTableTemplateDetailsId).attr('data-groupId',dto.groupId);
							$("#esaroomAllocation_"+date+"_"+esaTimeTableTemplateDetailsId).attr('data-groupId',dto.groupId);
						}
						
					 }
						divTd +="<div class='col-xs-3 text-left'>"+sem+"</div>"
						divTd +="<div class='col-xs-6 text-left'><span>"+subjectCode+"</span><br/><br/><span><strong>"+dto.description+"</strong></span></div></div>"
						$('#esaTTCurrentTd_'+date+"_"+esaTimeTableTemplateDetailsId).append(divTd);
				}
			
				$('[id^=esaTTCurrentTd_'+date+']').each(function() {
					var id=$(this).attr('id').split("_")[2];
					if($("#"+$(this).attr('id')).find(".esa_inner_ele_row").length==0){
						$('#esaTTCurrentTd_'+date+"_"+id).append("<div class='esa_inner_ele_row'> <div class='col-xs-12 text-center'> <span class='error'>No Schedule</span></div></div>");
					}
				});
			
			}
		} 
	}
	
	
	
	function getEsaSemDetails(semList,prgrmId,groupId,divOrder){
	var semResp="";
		for (s in semList){
			if(prgrmId==semList[s].programId && semList[s].groupId==groupId && divOrder == semList[s].divOrder){
				semResp +=semList[s].className+", ";
		}
			}
		return semResp;
	}
	
	
	function handleEsaSeatingAllocation(controllerMode,actionType,type,thisReq){
		var groupId="";
		var id="";
		var sessionDesc=""
		if(type==1){
		 groupId=$(thisReq).attr('data-groupId');
		 id=$(thisReq).attr('id');
		 sessionDesc=$(thisReq).attr('data-dss');
		if(groupId=='0'){
			showIdMessage("No Schedule", "error",id);
			return;
		}
		}else{ // refresh after saving seating allocation
			 groupId=thisReq.split('&&')[0];
			 sessionDesc=thisReq.split('&&')[1];
		}
		bgCurtain();
		var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			menuId : this.menuId,
			esaId : $("#esaId").val(),
			selectedData:$("#selectedData").val(),
			groupId:groupId,
			sessionDesc:sessionDesc
		};
		doAjaxCall(this.url, 'GET', formData, function(data) {
			$('#esaResultsDiv').html("");
			$('#esaResultsDiv').html(data);
			manageESAAllocationBasedOnInstitute(groupId,esaId,sessionDesc);
			removeBgCurtain();
		});
	}
	
	
	function manageEsaSeatingAllocation(controllerMode,actionType,seatingAloocationId,sessionDesc){
		bgCurtain();
		var formData = {
				controllerMode : controllerMode,
				actionType : actionType,
				menuId : this.menuId,
				esaId : $("#esaId").val(),
				selectedData:$("#selectedData").val(),
				sessionDesc:sessionDesc,
				groupId:$("#groupId").val(),
				seatingAloocationId:seatingAloocationId 
			};
		var sessionDesc=sessionDesc.split("_");
		sessionDesc=sessionDesc[0]+"-"+sessionDesc[1]+"-"+sessionDesc[2];
		var buttons = [
			{
				type : "cancel",
				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
				className : "btn-sm btn-default",
				callback : null
			} ];
		doAjaxCall(this.url, 'get', formData, function(data) {
			getModalDialog('large', "Manage Esa Seating Allocation( "+sessionDesc+" )", data, buttons, function() {
				$('button[data-bb-handler="cancel"][type="button"]').before("<a href='javascript:allocationSummary()'" +
				" class='btn btn-sm btn-default' id='allocateAllStd'><span class='glyphicon glyphicon-ok-circle'></span>Allocate All Students</a>");
				if(!seatingAloocationId)
					$('#allocateAllStd').addClass('disabled');
				$('button[data-bb-handler="cancel"][type="button"]').before("<a href='javascript:saveEsaSeatingAllocation()' class='btn btn-sm btn-default' id='saveESA'><span class='glyphicon glyphicon-ok-circle'></span>Save</a>");
				esaAllocationDataBasedOnInstitute(seatingAloocationId);
			});
			removeBgCurtain();
	});
		
	}
	
	
	function esaSeatingAllocationInit(esaSeatingAllocationObj){
		
		   getEsaSemPriority("");
		   getEsaBuildingPriority("");
		   esaRoomsCheckAll("");
		   getEsaSeatGapGrpEtc(esaSeatingAllocationObj);
		   if(esaSeatingAllocationObj.seatGap==0)
		   allocationSummary()
	}
	
	
	function allocationSummary(){
		var totalRumsInAllBuildingCount=0;
		var buildingCount=0;
		var studentCount=0;
		var progrmName="";
		$("#buildingInfo > tbody > tr").each(function(){
			var currentDrpDown=$(this).children().find('select');
			var roomCount=parseInt($(currentDrpDown).attr('data-roomCount'));
			if($(currentDrpDown).val()!=0){
				buildingCount++;
			}
		 });
		
		   $('#buildingWithRooms').DataTable().rows().every( function ( rowIdx, tableLoop, rowLoop ) {
			   if($(this.node()).children().find('input').is(':checked')){
				   totalRumsInAllBuildingCount++;
			   }
			} );
		
		   var semCount=0;
		$("#semInfo > tbody > tr").each(function(){
			var currentDrpDown=$(this).children().find('select');
			var priority=parseInt($(currentDrpDown).attr('data-priority'));
			var totalStudent=parseInt($(currentDrpDown).attr('data-totalStudent'));
			var prgrm=$(currentDrpDown).attr('data-prgrm');
			if($(currentDrpDown).val()!=0){
				studentCount=studentCount+totalStudent;
				progrmName +=prgrm+","
				semCount++;
			}
		 });
		
		
		// $("#esaGrpSize").val(semCount);
		 document.getElementById("noOfBuildings").innerHTML=buildingCount;
		 document.getElementById("noOfRooms").innerHTML=totalRumsInAllBuildingCount;
		 document.getElementById("noOfStudents").innerHTML=studentCount;
		 document.getElementById("noOfProgrms").innerHTML=progrmName;
	}
	function getEsaSeatGapGrpEtc(esaSeatingAllocationObj){
		if(esaSeatingAllocationObj.seatGap!=0){
		 $("#esaSeatGap option[value="+esaSeatingAllocationObj.seatGap+"]").attr("selected",true);
		 $("#esaGrpSize option[value="+esaSeatingAllocationObj.groupSize+"]").attr("selected",true);
		 /*
			 * if(esaSeatingAllocationObj.subjectCombination==1)
			 * $("#subjectCombo").prop('checked',true);
			 */
		}else{
			 $("#esaSeatGap").val(1);
			 $("#esaGrpSize").val(4);
			/* $("#subjectCombo").prop('checked',true); */
		}
	}
	function getEsaSelectedBuildingRoomsCount(type){ // type of action
		var totalCount=0;
		var countNoOfRums=0;
			var tempBuildId=0;
			   $('#buildingWithRooms').DataTable().rows().every( function ( rowIdx, tableLoop, rowLoop ) {
				   var buildId=parseInt($(this.node()).children().find('input').attr("data-building"));
				   var dbRoomId=parseInt($(this.node()).children().find('input').attr("data-dbRoomId"));
				   
				   if(type!=1 && type!=3){ 
				   $(this.node()).children().find('input').prop('disabled',false);
				   $(this.node()).children().find('input').prop('checked',true);
				   }
				   if($("#buildIng_"+buildId).val()==0){
					   $(this.node()).children().find('input').prop('disabled',true);
					   $(this.node()).children().find('input').prop('checked',false);
				   }
				   
				   if((!dbRoomId && type==2) && $('#seatingAloocationId').val()){
					   $(this.node()).children().find('input').prop('checked',false);
				   }
				   
				   if(tempBuildId!=buildId){
					   tempBuildId=buildId;
					   totalCount=0; 
				   }
				   if($(this.node()).children().find('input').is(':checked')){
					   totalCount++;
					   countNoOfRums++;
				   }
				   document.getElementById("bulidingWithRoomCount_"+buildId).innerHTML=totalCount;
				} );
		var totalRumsInAllBuildings=0;
		$("#buildingInfo > tbody > tr").each(function(){
			var currentDrpDown=$(this).children().find('select');
			var roomCount=parseInt($(currentDrpDown).attr('data-roomCount'));
			if($(currentDrpDown).val()!=0)
			totalRumsInAllBuildings=totalRumsInAllBuildings+roomCount;
		 });
		if( totalRumsInAllBuildings!=0 && countNoOfRums==totalRumsInAllBuildings){
			$("#bulidingWithRoomCheckAll").prop('checked',true);
		}else{
			$("#bulidingWithRoomCheckAll").prop('checked',false);
		}
	}
	
	function getEsaSemPriority(){
		var count=1;
		$("#semInfo > tbody > tr").each(function(){
			var currentDrpDown=$(this).children().find('select');
			var priority=parseInt($(currentDrpDown).attr('data-priority'));
			var totalStudent=parseInt($(currentDrpDown).attr('data-totalStudent'));
			var val=count;
			if(priority!=0 && $('#seatingAloocationId').val()){
				val=priority;
			}else if(priority==0 && $('#seatingAloocationId').val()){
				val=0;
			}else if(totalStudent==0){
				val=0;
			}
			$("#"+$(currentDrpDown).attr('id')).val(val);
			 $(currentDrpDown).attr('data-priority',val);
			if(totalStudent==0)
			$(currentDrpDown).find('option').not(':selected').remove();
			count++;
		 });
	
	}
	
	function getEsaBuildingPriority(){
		var count=1;
		$("#buildingInfo > tbody > tr").each(function(){
			var currentDrpDown=$(this).children().find('select');
			var priority=parseInt($(currentDrpDown).attr('data-priority'));
			var roomCount=parseInt($(currentDrpDown).attr('data-roomCount'));
			var val=count;
			if(priority!=0 && $('#seatingAloocationId').val()){
				val=priority;
			}else if(priority==0 && $('#seatingAloocationId').val()){
				val=0;
			}else if(roomCount==0){
				val=0;
			}
			$("#"+$(currentDrpDown).attr('id')).val(val);
			 $(currentDrpDown).attr('data-priority',val);
			count++;
			if(roomCount==0)
			$(currentDrpDown).find('option').not(':selected').remove();
		 });
	}
	
	function esaRoomsCheckAll(thisReq){
		   $('#buildingWithRooms').DataTable().rows().every( function ( rowIdx, tableLoop, rowLoop ) {
			   if($(thisReq).is(':checked') || !thisReq)
				   $(this.node()).children().find('input').prop('checked',true);
					else
				   $(this.node()).children().find('input').prop('checked',false);
			} );
		   var type=2;
		   if(thisReq)
			   type=1;
		   getEsaSelectedBuildingRoomsCount(type);
	}
	
	
	function saveEsaSeatingAllocation() {
	
		var respObj=getEsaSeatingAllocationInfo();
		if(!$("#esaSeatingAllocationDec").val()){
			showMessage("Enter Allocation Name", 'error');
			return;
		}else if(!$("#institutionId").val()){
			showMessage("Select Institute", 'error');
			return;
		}/*else if(respObj[0].length!=$("#esaGrpSize").val()){
			showMessage("Group Size should be "+respObj[0].length, 'error');
			return
		}*/else if(respObj[3].length!=0){
			showMessage(respObj[3][1], 'error');
			return;
		}
		esaInstId = $("#institutionId").val();
		var noOfStudents = document.getElementById("noOfStudents").innerHTML;
		var noOfProgrms = document.getElementById("noOfProgrms").innerHTML;
		var noOfRooms = document.getElementById("noOfRooms").innerHTML;
		var noOfBuildings = document.getElementById("noOfBuildings").innerHTML;
		
		$('#saveESA').addClass('disabled');
		
		   bgCurtain();
		    var formData = {
					controllerMode : 370,
					actionType : 106,
					menuId : this.menuId,
					esaId : $("#esaId").val(),
					selectedData:$("#selectedData").val(),
					sessionDesc:$("#sessionDesc").val(),
					groupId:$("#groupId").val(),
					seatingAloocationId:$("#seatingAloocationId").val(),
					esaSeatingAllocationDec:$("#esaSeatingAllocationDec").val(),
					esaSeatGap:$("#esaSeatGap").val(),
					esaGrpSize:$("#esaGrpSize").val(),
					subjectCombo:$('#subjectCombo').is(":checked")? 1:0,
					esaSeatingAllocationInfo:JSON.stringify(respObj),
					instId : $('#institutionId').val(),
					noOfStudents : noOfStudents,
					noOfProgrms : noOfProgrms,
					noOfBuildings : noOfBuildings,
					noOfRooms : noOfRooms					
			};
		doAjaxCall(this.url, 'POST', formData, function(data) {
		var dataArray = data.split("_");
		var status = dataArray[0].toUpperCase();
		var statusResp = dataArray[1];
		if (status == "SUCCESS") {
			showMessage(statusResp, "success");
			if(modalDialog){
				modalDialog.modal('hide');
			}
			getCombobox('/Academy/a/i/getInstituteBasedOnESAId/'+$('#esaId').val(), 'esaInstId',null,null,function(){
				$("#esaInstId").val(esaInstId);
				manageESAAllocationBasedOnInstitute($("#groupId").val(),$("#esaId").val(),$("#sessionDesc").val());
			});
			$('#allocateAllStd').removeClass('disabled');
		} else if (status == "ERROR") {
			showMessage(statusResp, "error");
			$('#saveESA').removeClass('disabled');
		}
		removeBgCurtain();
	});

	}
	
	
	function getEsaSeatingAllocationInfo(){
		var returnObj=[];
		var tempAry=[];
		var tempObj={};
		var erroArry=[];
		var studentArr=[];
		var totalStudent=0;
		$("#semInfo > tbody > tr").each(function(){
			 tempObj={};
			var currentDrpDown=$(this).children().find('select');
			var classId=parseInt($(currentDrpDown).attr('data-classId'));
			var prgmId=parseInt($(currentDrpDown).attr('data-progrmId'));
						
			var priority=parseInt($(currentDrpDown).val());
			if(priority!=0){
		 totalStudent=totalStudent+parseInt($(currentDrpDown).attr('data-totalStudent'));
			tempObj["classId"]=classId;
			tempObj["prgmId"]=prgmId;
			tempObj["priority"]=priority;
			tempObj["totalStudent"]=parseInt($(currentDrpDown).attr('data-totalstudent'));
			tempAry.push(tempObj);
			studentArr.push(parseInt($(currentDrpDown).attr('data-totalstudent')));
			}
		 });
		returnObj.push(tempAry);
		if(tempAry.length==0){
			erroArry.push('semInfo'),
			erroArry.push('Select at least one semester and program information');
		}
		 tempObj={};
		$("#buildingInfo > tbody > tr").each(function(){
			var currentDrpDown=$(this).children().find('select');
			var buildingId=parseInt($(currentDrpDown).attr('data-buildingId'));
			var priority=parseInt($(currentDrpDown).val());
			if(priority!=0){
			 tempObj[buildingId]=priority
			}
		 });
		returnObj.push(tempObj);
		if(Object.keys(tempObj).length==0){
			erroArry.push('buildingInfo'),
			erroArry.push('Select at least one building and room information');
		}
		 tempAry=[];
		  var totalRooms=0;
		   $('#buildingWithRooms').DataTable().rows().every( function ( rowIdx, tableLoop, rowLoop ) {
			   tempObj={};
			   var buildingId=parseInt($(this.node()).children().find('input').attr("data-building"));
			   var roomId=parseInt($(this.node()).children().find('input').val());
			   if($(this.node()).children().find('input').is(':checked')){
				   totalRooms=totalRooms+parseInt($(this.node()).children().find('input').attr("data-roomCap"));
				   tempObj["buildingId"]=buildingId;
					tempObj["roomId"]=roomId;
					tempAry.push(tempObj);
			   }
			} );
		   returnObj.push(tempAry);
		   returnObj.push(erroArry);
		   if(!(totalStudent<=totalRooms)){
			   totalRooms=totalStudent-totalRooms;
				erroArry.push('buildingWithRooms'),
				erroArry.push('Required Room Capacity '+totalRooms);
			}
		  return returnObj;
		
	}
	
	function checkEsaPriority(thisReq){
	var selectedId=$(thisReq).attr('id');
	var selectedPriority= parseInt($(thisReq).attr('data-priority'));
	var selectedVal= parseInt($(thisReq).val());
	var resp=true;
	if(selectedId.startsWith("sem")){
		$("#semInfo > tbody > tr").each(function(){
			var currentDrpDown=$(this).children().find('select');
			var totalStudent=parseInt($(currentDrpDown).attr('data-totalStudent'));
			var id=$(currentDrpDown).attr('id');
			var val=parseInt($(currentDrpDown).val());
			if((val!=0 && totalStudent!=0) && (val==selectedVal && selectedId!=id)){
				resp=false;
				return false;
			}
		 });
	}else if(selectedId.startsWith("buildIng")){
		$("#buildingInfo > tbody > tr").each(function(){
			var currentDrpDown=$(this).children().find('select');
			var roomCount=parseInt($(currentDrpDown).attr('data-roomCount'));
			var id=$(currentDrpDown).attr('id');
			var val=parseInt($(currentDrpDown).val());
			if((val!=0 && roomCount!=0) && (val==selectedVal && selectedId!=id)){
				resp=false;
				return false;
			}
		 });
	}
	
	if(!resp){
		$('#'+selectedId).val(selectedPriority);
		showIdMessage('Selected Priority already in use', 'error', selectedId, 'top');
	}else if(resp){
		$('#'+selectedId).attr('data-priority',selectedVal);
		if(selectedId.startsWith("buildIng")){
		 getEsaSelectedBuildingRoomsCount(4);
		}
		 allocationSummary();
	}
	}
	
	
	function handleEsaStudentSeatingAllocation(controllerMode,actionType,seatingAloocationId,sessionDesc){
		
		var formData = {
				controllerMode : controllerMode,
				actionType : actionType,
				menuId : this.menuId,
				esaId : $("#esaId").val(),
				selectedData:$("#selectedData").val(),
				sessionDesc:sessionDesc,
				groupId:$("#groupId").val(),
				seatingAloocationId:seatingAloocationId,
				institutionId:$("#esaInstId").val(),
			};
		var sessionDesc=sessionDesc.split("_");
		sessionDesc=sessionDesc[0]+"-"+sessionDesc[1]+"-"+sessionDesc[2];
		getConfirmDialog("Generate Student Seating Allotment", "Are you sure you want to generate student seating allotment for "+sessionDesc+" ?", function() {
			bgCurtain();
		doAjaxCall(this.url, 'POST', formData, function(data) {
			var dataArray = data.split("_");
			var status = dataArray[0].toUpperCase();
			var statusResp = dataArray[1];
			if (status == "SUCCESS") {
				showMessage(statusResp, "success");
			} else if (status == "ERROR" && statusResp.startsWith("Required")) {
				getConfirmDialog(statusResp, "Are you sure you want to allocate remaining Seats(Rooms) ?", function() {
					manageEsaSeatingAllocation(370,103,seatingAloocationId,sessionDesc);
				});
			}else if (status == "ERROR"){
				showMessage(statusResp, "error");
			}
			removeBgCurtain();
		});

		});
	}
	
	function handleEsaSeatAllottedStudents(controllerMode,actionType,seatingAloocationId,sessionDesc){
		bgCurtain();
		var formData = {
				controllerMode : controllerMode,
				actionType : actionType,
				menuId : this.menuId,
				esaId : $("#esaId").val(),
				selectedData:$("#selectedData").val(),
				sessionDesc:sessionDesc,
				groupId:$("#groupId").val(),
				seatingAloocationId:seatingAloocationId,
				institutionId:$("#esaInstId").val()
			};
		var sessionDesc=sessionDesc.split("_");
		sessionDesc=sessionDesc[0]+"-"+sessionDesc[1]+"-"+sessionDesc[2];
		var buttons = [
			{
				type : "cancel",
				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Close",
				className : "btn-sm btn-default",
				callback : null
			} ];
		doAjaxCall(this.url, 'get', formData, function(data) {
			getModalDialog('large', "Seat Allotted Students( "+sessionDesc+" )", data, buttons, function() {
			});
			removeBgCurtain();
	});
		
	}
	
	function handleEsaNonEditableTimeTable(controllerMode,actionType,esaId,selectedData){
		
		var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			menuId : this.menuId,
			esaId : esaId,
			selectedData:selectedData
		};
		getConfirmDialog( 
				" Confirm Navigation ",
				" Are you sure you want to leave this page ?",
				function() {
					bgCurtain();
		doAjaxCall(this.url, 'GET', formData, function(data) {
			$('#esaResultsDiv').html("");
			$('#esaResultsDiv').html(data);
			esaTTTimer = null;
			removeBgCurtain();
		});
		});
	}
	
	/*--------------------------------end Esa Timetable---------------------------------------------------*/

	function preReqVal(subId){
		var ret=true;
		$('#courseCode-textarea option').each(function(){
			console.log(subId+"=="+parseInt($(this).val()))

			if(subId==parseInt($(this).val())){
				console.log(subId+"=="+parseInt($(this).val()))
					ret	=false;
					return false;
			}
		});
	return ret;
	}

function handleISApGetReport(type){
	switch (parseInt(type)) {
	case 1:
		if(!$("#isapdept").val() || $("#isapdept").val().length<=0){
			showMessage("Please select department", "error");
			return;
		}
		var formData={
			controllerMode:9521,
			actionType:139,
			batchId:$("#isapbatch").val(),
			programId:$("#isapprog").val(),
			deptId:$("#isapdept").val(),
			classId:$("#isapclass").val(),
			instId:$("#institutionId").val(),
			menuId:this.menuId
			}
		
		bgCurtain();
		doAjaxCall(this.url, 'POST', formData, function(data) {
			$("#reportPreview").html(data);
			removeBgCurtain();
		});
		break;
	case 2:
		if(!$("#isapdept").val() || $("#isapdept").val().length<=0){
			showMessage("Please select department", "error");
			return;
		}
		var url="reports/Reports/isapatternreport/"+$("#institutionId").val()+"/"+$("#isapbatch").val()+"/"+$("#isapprog").val()+"/"+$("#isapdept").val()+"/"+$("#isapclass").val();
		var w=window.open(url,null);
		
		break;
	case 3:
		$("#institutionId").val(null);
		$(".reset-validate").empty();
		$("#reportPreview").html('');
		break;		
	default:
		break;
	}
}


function handleAcademicStudentsDetails(){
	var instid = $('#institutionId').val();
	var isapprog = $('#isapprog').val();
	var isapbatch = $('#isapbatch').val();
	$("#batchClassSecId option:selected").each(function(i) {
		ret.push($(this).val());
	});
	
	var isapdept = $('#isapdept').val();
	var isapclass = $('#isapclass').val();
	 
	if(instid==null)
	{
	  
	showMessage("Please Select Institute", "error");
	return false;
	}

else if(isapprog==null)
{
	showMessage("Please Select Program", "error");
	return false;
}
 
else if(isapclass==null)
{
	showMessage("Please Select Semester ", "error");
	return false;
}
else if($("#batchClassId").val()==null)
{
	showMessage("Please Select Class ", "error");
	return false;
}
	 
		var formData={
			controllerMode:9930,
			actionType:212,
			id:$("#batchClassId").val(),
			menuId:this.menuId
			}
		bgCurtain();
		doAjaxCall(this.url, 'POST', formData, function(data) {
			
			$("#reportPreview").html(data);
		});
}

function handleAcademicFaculty(){
	var instid = $('#institutionId').val();
	var dept = $('#isapdept').val();
	if(instid==null)
	{
	  
	showMessage("Please Select Institute", "error");
	return false;
	}

else if(dept==null)
{
	showMessage("Please Select Department", "error");
	return false;
}
		var formData={
			controllerMode:9930,
			actionType:214,
			instid:instid,
			deptid:dept,
			menuId:this.menuId
			}
		bgCurtain();
		doAjaxCall(this.url, 'POST', formData, function(data) {
			
			$("#reportPreview").html(data);
		});
}

function getStudentData(usn){
	
	if(!usn){
		showIdMessage("Invalid USN", "error","usn");
		return false;
	}
	var formData = {
			controllerMode : 369,
			actionType : 38,
			usn:usn,
			page :"studentDetailsHome",
			menuId:this.menuId,
			
		};
	title='Student Details';
		buttons='';
		doAjaxCall('instituteApp', 'GET', formData, function(data) {
			var dataArray = data.split("_");
			var status = dataArray[0].toUpperCase();
			var statusResp = dataArray[1];
			if (status == "ERROR") {
				showMessage(statusResp, "error");
			}else{
				getModalDialog('large', title, data, buttons,  function() {			
				});	
			//$("#sssss").html(data);
				studentInitCall();
		        $("#stdinfo_1").trigger("click");
			getStudentProfileInfo();
			}
			});
	
}


// ///////////////////////Manage ESA Question Paper Start /////////////////////
function handleEsaQuestionPaper(obj){
	
	var qpId = $(obj).attr('data-groupId');
	var id = $(obj).attr('id');
	if(qpId=='0'){
		showIdMessage("No Schedule", "error",id);
		return;
	}

	var formData = {
			controllerMode : 370,
			actionType : 99,
			type:1,
			id : $(obj).attr('data-groupId'),
			menuId : this.menuId
		};
	
	
	var buttons = [
		{
			type : "button",
			label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='saveEvaluatorId'></span>Download QP Barcode",
			className : "btn-sm btn-default",
			callback : function(e) {		
				downloadQPBarcode(qpId,id);				
				return false;
			}
		},
	
		{
			type : "cancel",
			label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
			className : "btn-sm btn-default",
			callback : null
		} ];
	doAjaxCall(this.url, 'get', formData, function(data) {
		getModalDialog('large', "Manage Question Paper", data, buttons, function() {
			// eval(this.url + "(controllerMode,actionType,id,selectedData);");
			tempModel=modalDialog;
		});
});
	
}

function getEsaQuestionPaperDetails(){
	var formData = {
			controllerMode : $('#controllerMode').val(),
			actionType : 99,
			type:2,
			esaId:$('#esaid').val(),
			id : $('#groupid').val(),
			menuId : this.menuId
		};
	doAjaxCall(this.url, 'get', formData, function(data) {
		$('#esaqpdata').html(data);
	});
}

function esaQuestionPaperManage(subjectlist,qpdata,qpcombo){
	templatecombo=qpcombo;
	
	if(Object.keys(subjectlist).length>0){
		var qpbody="";
		if(Object.keys(qpdata).length>0){
			var sindex=Object.keys(subjectlist)
			for(i in sindex){
				var subject=subjectlist[i];	
				qpbody="<tr id="+subject.subjectCode+"><td> <label id = subjectCode"+subject.subjectId+">"+subject.subjectDescription+"<input type='hidden' id=subjectid_"+subject.subjectId+" name=subjectid_"+subject.subjectId+"  value="+subject.subjectId+"></label>  </td><td id=subtd_"+subject.subjectId+"></td></tr> ";
				$('#esaqpbody').append(qpbody);
				var savedqp=qpdata[subject.subjectId];
				if(savedqp.length<=0){
					var content="";
					content="<div class='esa_inner_ele_row lvlinner'><input type='hidden' id="+subject.subjectId+"_qp_id_new_0 name="+subject.subjectId+"_qp_id_new_0>"+
					"<div class='col-xs-2'> <label>"+subject.esaname+"-"+subject.subjectCode+"</label><input type='hidden' id="+subject.subjectId+"_qp_name_new_0 name="+subject.subjectId+"_qp_name_new_0 value='"+subject.esaname+"-"+subject.subjectCode+"'>"
					+"</div>"
/*					+"<div class='col-xs-2'>"
						+"<select class='form-control input-sm' id="+subject.subjectId+"_qp_template_new_0 name="+subject.subjectId+"_qp_template_new_0></select>"
					+" </div>"*/
					+" <div class='col-xs-2'><textarea class='form-control input-sm' id="+subject.subjectId+"_qp_description_new_0 name="+subject.subjectId+"_qp_description_new_0></textarea></div>"
					+"<div class='col-xs-5'>"
					+"<a class='btn btn-sm btn-default btnhidefrstrow' id='new' href='javascript:handleEsaQPAssignStudents(0)'>Assign Students</a>"
					+"<a class='btn btn-sm btn-default'  href='javascript:handleEsaQPPattern(0)'>QP Pattern</a>"
					+"<a class='btn btn-xs btn-default addNewQPRow' onclick='addQuestionPaperTab("+subject.subjectId+",this)'><span class='glyphicon glyphicon-plus' aria-hidden='true'></span></a>"
					+"<a class='btn btn-xs btn-default removeQPRow' onclick='removeQuestionPaperTab("+subject.subjectId+",this,0)'><span class='glyphicon glyphicon-minus' aria-hidden='true'></span></a>"
					+"</div></div>";
					$("#subtd_"+subject.subjectId+"").append(content);
					$("#"+subject.subjectId+"_qp_template_new_0").append(qpcombo[subject.subjectId]);
					
				}else{  
					
					var qpindex=Object.keys(savedqp);
					for(j in qpindex){
						var qp=savedqp[j];
						var content="";
						content="<div class='esa_inner_ele_row lvlinner'><input type='hidden' id="+subject.subjectId+"_qp_id_"+qp.esaquestionpaperid+" name="+subject.subjectId+"_qp_id_new_0>"+
/*						"<div class='col-xs-2'> <label id =qpName"+qp.esaquestionpaperid+">"+qp.questionPaperName+"</label><input type='hidden' id="+subject.subjectId+"_qp_name_"+qp.esaquestionpaperid+" name="+subject.subjectId+"_qp_name_"+qp.esaquestionpaperid+" value='"+qp.questionPaperName+"'>"
*/						"<div class='col-xs-2'> <label id =qpName"+qp.esaquestionpaperid+">"+subject.esadescription +"-"+subject.subjectDescription+"</label><input type='hidden' id="+subject.subjectId+"_qp_name_"+qp.esaquestionpaperid+" name="+subject.subjectId+"_qp_name_"+qp.esaquestionpaperid+" value='"+qp.questionPaperName+"'>"
						+"</div>"
/*						+"<div class='col-xs-2'>"
							+"<select class='form-control input-sm' id="+subject.subjectId+"_qp_template_"+qp.esaquestionpaperid+" name="+subject.subjectId+"_qp_template_"+qp.esaquestionpaperid+"></select>"
						+" </div>"*/
						+" <div class='col-xs-2'><textarea class='form-control input-sm' id="+subject.subjectId+"_qp_description_"+qp.esaquestionpaperid+" name="+subject.subjectId+"_qp_description_"+qp.esaquestionpaperid+" onchange='saveDescriptionForEsaQp(this)'>"+qp.description+"</textarea></div>"
						+"<div class='col-xs-5'>"
						+"<a class='btn btn-sm btn-default btnhidefrstrow' id='new' href='javascript:handleEsaQPAssignStudents("+qp.esaquestionpaperid+")'>Assign Students</a>"
						+"<a class='btn btn-sm btn-default'  href='javascript:handleEsaQPPattern("+qp.esaquestionpaperid+",\""+qp.questionPaperName+"\")'>QP Pattern</a>"
						+"<a class='btn btn-xs btn-default addNewQPRow' onclick='addQuestionPaperTab("+subject.subjectId+","+qp.esaid+",\""+qp.timeTableGroupId+"\",this)'><span class='glyphicon glyphicon-plus' aria-hidden='true'></span></a>"
						+"<a class='btn btn-xs btn-default removeQPRow' onclick='removeQuestionPaperTab("+subject.subjectId+",this,"+qp.esaquestionpaperid+")'><span class='glyphicon glyphicon-minus' aria-hidden='true'></span></a>"
						+"</div></div>";
						$("#subtd_"+subject.subjectId+"").append(content);
						$("#"+subject.subjectId+"_qp_template_"+qp.esaquestionpaperid+"").append(qpcombo[subject.subjectId]);
						$("#"+subject.subjectId+"_qp_template_"+qp.esaquestionpaperid+"").val(qp.facultyQPSchemaId);
						
					}
				}
				
			}
		}else{
			var sindex=Object.keys(subjectlist)
			for(i in sindex){
				
				var subject=subjectlist[i];
				qpbody="<tr id="+subject.subjectCode+"><td> <label id = subjectCode"+subject.subjectId+">"+subject.subjectCode+"<input type='hidden' id=subjectid_"+subject.subjectId+" name=subjectid_"+subject.subjectId+"  value="+subject.subjectId+"></label>  </td><td id=subtd_"+subject.subjectId+"> "
				+"<div class='esa_inner_ele_row lvlinner'><input type='hidden' id="+subject.subjectId+"_qp_id_new_0 name="+subject.subjectId+"_qp_id_new_0>"+
				"<div class='col-xs-2'> <label>"+subject.esaname+"-"+subject.subjectCode+"</label><input type='hidden' id="+subject.subjectId+"_qp_name_new_0 name="+subject.subjectId+"_qp_name_new_0 value='"+subject.esaname+"-"+subject.subjectCode+"'>"
				+"</div>"
/*				+"<div class='col-xs-2'>"
					+"<select class='form-control input-sm' id="+subject.subjectId+"_qp_template_new_0 name="+subject.subjectId+"_qp_template_new_0></select>"
				+" </div>"*/
				+" <div class='col-xs-2'><textarea class='form-control input-sm' id="+subject.subjectId+"_qp_description_new_0 name="+subject.subjectId+"_qp_description_new_0></textarea></div>"
				+"<div class='col-xs-5'>"
				+"<a class='btn btn-sm btn-default btnhidefrstrow' id='new' href='javascript:handleEsaQPAssignStudents(0)'>Assign Students</a>"
				+"<a class='btn btn-sm btn-default'  href='javascript:handleEsaQPPattern(0)'>QP Pattern</a>"
				+"<a class='btn btn-xs btn-default addNewQPRow' onclick='addQuestionPaperTab("+subject.subjectId+",this)'><span class='glyphicon glyphicon-plus' aria-hidden='true'></span></a>"
				+"<a class='btn btn-xs btn-default removeQPRow' onclick='removeQuestionPaperTab("+subject.subjectId+",this,0)'><span class='glyphicon glyphicon-minus' aria-hidden='true'></span></a>"
				+"</div></div></td></tr>";
				$('#esaqpbody').append(qpbody);
				$("#"+subject.subjectId+"_qp_template_new_0").append(qpcombo[subject.subjectId]);
				
				
			}
		}
		
	}

	
}

function addQuestionPaperTab(subejctid,esaid,timeTableGroupId,curr){

	var qpno=1;
		var qpname="";
		$("[id^="+subejctid+"_qp_name_]").each(function() {
			qpname=$(this).val().split("_")[0]
				var dd=$(this).val().split("_")[1];
				if(dd!=undefined){
					if(parseInt(qpno)<=parseInt(dd)){
						qpno=dd;
					}
				}
		});
		qpno++;
		var newqpname=qpname+"_"+qpno;
		var title=' Add New Question Paper : '+newqpname;
		var msg="Are you sure ? You want to continue : "+newqpname;
		getConfirmDialog(title, msg, function() {
			var formData = {
					controllerMode : 370,
					actionType : 180,
					esaId : esaid,
					subjectid : subejctid,
					timeTableGroupId : timeTableGroupId,
					newqpname : newqpname,
					menuId : this.menuId
			};
			bgCurtain();
			doAjaxCall(this.url, 'GET', formData, function(data) {
				removeBgCurtain();
				var dataArray = data.split("_");
				var status = dataArray[0].toUpperCase();
				var statusResp = dataArray[1];
				var pk = dataArray[2];
				if (status == "SUCCESS") {
					var newqp=	"<div class='esa_inner_ele_row lvlinner'><input type='hidden' id="+subejctid+"_qp_id_new_"+qpno+" name="+subejctid+"_qp_id_new_"+qpno+">"+
					"<div class='col-xs-2'> <label>"+newqpname+"</label><input type='hidden' id="+subejctid+"_qp_name_new_"+qpno+" name="+subejctid+"_qp_name_new_"+qpno+" value='"+newqpname+"'>"
					+"</div>"
					/*	+"<div class='col-xs-2'>"
 	 			+"<select class='form-control input-sm' id="+subejctid+"_qp_template_new_"+qpno+" name="+subejctid+"_qp_template_new_"+qpno+"></select>"
 	 		+" </div>"*/
					+" <div class='col-xs-2'><textarea class='form-control input-sm' id="+subejctid+"_qp_description_new_"+qpno+" name="+subejctid+"_qp_description_new_"+qpno+" onchange='saveDescriptionForEsaQp(this)'></textarea></div>"
					+"<div class='col-xs-5'>"
					+"<a class='btn btn-sm btn-default btnhidefrstrow' id='new' href='javascript:handleEsaQPAssignStudents("+pk+")'>Assign Students</a>"
					+"<a class='btn btn-sm btn-default'  href='javascript:handleEsaQPPattern("+pk+",\""+newqpname+"\")'>QP Pattern</a>"
					+"<a class='btn btn-xs btn-default addNewQPRow' onclick='addQuestionPaperTab("+subejctid+","+esaid+",\""+timeTableGroupId+"\",this)'><span class='glyphicon glyphicon-plus' aria-hidden='true'></span></a>"
					+"<a class='btn btn-xs btn-default removeQPRow' onclick='removeQuestionPaperTab("+subejctid+",this,"+pk+")'><span class='glyphicon glyphicon-minus' aria-hidden='true'></span></a>"
					+"</div></div>";
					$(curr).closest('.esa_inner_ele_row.lvlinner').after(newqp);
					$("#"+subejctid+"_qp_template_new_"+qpno+"").append(templatecombo[subejctid]);
				}else{
					showMessage(statusResp, "error");
				}
			});
		});
}
function removeQuestionPaperTab(subejctid,curr,qpid){
	var qpname="";
	$("[id^="+subejctid+"_qp_name_]").each(function() {
		qpname=$(this).val();
	});
	var title=' Remove Question Paper : '+qpname;
	var msg="Are you sure ? You want to continue <br/>"+
			"Note : Question paper will be removed : "+qpname;
	getConfirmDialog(title, msg, function() {
	var formData = {
 			controllerMode : 370,
 			actionType : 181,
 			qpid : qpid,
 			subjectid : subejctid,
 			menuId : this.menuId
 	};
 	bgCurtain();
 	doAjaxCall(this.url, 'GET', formData, function(data) {
 	 	removeBgCurtain();
 	 	var dataArray = data.split("_");
 	 	var status = dataArray[0].toUpperCase();
 	 	var statusResp = dataArray[1];
 	 	var pk = dataArray[2];
 	 	if (status == "SUCCESS") {
 	 		if(qpid!=0){
 	 			var qpdeleteids=$('#deleteqp').val();

 	 			qpdeleteids+=qpid+",";
 	 			$('#deleteqp').val(qpdeleteids);
 	 		}
 	 		$(curr).closest('.esa_inner_ele_row.lvlinner').remove();
 	 	}else{
 	 		showMessage(statusResp, "error");
 	 	}
 	});
	});
}
function saveEsaQuestionPaper(){
	 var objArr=[];
	 var obj={};
	 var flag = false;
	 var qpnameforval = "";
	$("[id^=subjectid_]").each(function() {
		var sub_Id=$(this).val();
		
		$("[id^="+sub_Id+"_qp_id_]").each(function() {
			obj={};
			obj.subjectId=sub_Id;
			var qp_id=$(this).attr('id');
			var d_id='';
			if(qp_id.split("_")[3]=='new'){
				d_id=qp_id.split("_")[3]+"_"+qp_id.split("_")[4];
				obj.id=0;
			}else{
				d_id=qp_id.split("_")[3];
				obj.id=qp_id.split("_")[3];
			}
			obj.name=$("#"+sub_Id+"_qp_name_"+d_id).val();
			obj.description=$("#"+sub_Id+"_qp_description_"+d_id).val();
			
			var len = obj.description.length;
			if(len>255){
				flag = true;
				qpnameforval = obj.name;
			}			
			obj.template=$("#"+sub_Id+"_qp_template_"+d_id).val();
			objArr.push(obj);			
		});		
	});
	 var data=JSON.stringify(objArr);	 
	 if(flag==true)
		 {
			showMessage(qpnameforval+" description length is greater that 255",'error');
			return false;
		 }
	 
	 else{	 
	bgCurtain();
	 var formData = {
				controllerMode : 370,
				actionType : 101,
				esaId:$('#esaId').val(),
				id : $('#groupid').val(),
				deleteqp:$('#deleteqp').val(),
				data:data,
				menuId : this.menuId
			};
		doAjaxCall(this.url, "GET", formData, function(data){
			var dataArray = data.split("_");
			var status = dataArray[0].toUpperCase();
			var statusResp = dataArray[1];
			if (status == "SUCCESS") {
				//getEsaQuestionPaperDetails();
				removeBgCurtain();
				showMessage(statusResp,'success');
				return;
			}else{
				showMessage(statusResp,'error');
			}
			
		});
	}
}

// ///////////////////////Manage ESA Question Paper End /////////////////////

// /////////////////Manage Esa Assign Student to Question
// Paper///////////////////

function handleEsaQPAssignStudents(id){
	if(id!=0){
		 bgCurtain();
		var formData = {
				controllerMode : 370,
				actionType : 104,
				id : id,
				menuId : this.menuId
			};
		
		
		var buttons = [
		
			{
				type : "cancel",
				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
				className : "btn-sm btn-default",
				callback : null
			} ];
		doAjaxCall(this.url, 'get', formData, function(data) {
			removeBgCurtain();
			getModalDialog('large', "Manage Assign Students", data, buttons, function() {
				// eval(this.url +
				// "(controllerMode,actionType,id,selectedData);");

			});
	});
		
		
	}else{
		showMessage("Question Paper not saved.! Save and Proceed", "error");
		return false;
	}
	
}
function handledefaultEsaAssignQuestionPaper(){
	var selectedvalues=$('#selectdids').val();
	var selectedarray=[];
	var id="";
	
	if(selectedvalues !=undefined && selectedvalues!=''){
		selectedarray=selectedvalues.split(",")
	}
	
	var otherselectedvalues=$('#otherselectdids').val();
	var otherselectedarray=[];
	if(otherselectedvalues !=undefined && otherselectedvalues!=''){
		otherselectedarray=otherselectedvalues.split(",")
	}
	
	$("[id^=esasection_]").each(function() {
		var batchclassid=$(this).attr('id').split("_")[1];
		var sectionid=$(this).attr('id').split("_")[2];
		id=batchclassid+"_"+sectionid;
		if(selectedarray.indexOf(id)>-1){
			this.checked = true;
		}
		
		if(otherselectedarray.indexOf(id)>-1){			
			$("#esasection_"+id).attr("disabled", true);
			}		
	});	
	
	
	$('[id^=esasem_]').click(	function() {
		var selectedvalues=$('#selectdids').val();
		var selectedarray=[];
		var otherselectedvalues=$('#otherselectdids').val();
		var otherselectedarray=[];
		
		if(selectedvalues !=undefined && selectedvalues!=''){
			selectedarray=selectedvalues.split(",")
		}
		if(otherselectedvalues !=undefined && otherselectedvalues!=''){
			otherselectedarray=otherselectedvalues.split(",")
		}
		var batchclassid=$(this).attr('id').split("_")[1];
		if ($(this).is(':checked')) {
			$("[id^=esasection_"+batchclassid+"_]").each(function() {				
				var sectionid=$(this).attr('id').split("_")[2];
				var id=batchclassid+"_"+sectionid;
				if(otherselectedarray.indexOf(id)<0){
					this.checked = true;
					selectedarray.push(id);					
				}				
				$('#esasection_'+id).change(function(){ //".checkbox" change 
				    //uncheck "select all", if one of the listed checkbox item is unchecked
				    if(this.checked == false){ //if this item is unchecked
				        $("#esasem_"+batchclassid)[0].checked = false; //change "select all" checked status to false
				    }
					  if ($('input:checkbox[id^="esasection_'+batchclassid+'_"]:checked').length == $('input:checkbox[id^="esasection_'+batchclassid+'_"]').not(':disabled').length){
					        $("#esasem_"+batchclassid).prop('checked', true);
					    }
				});
			});
			
		}else{
			$("[id^=esasection_"+batchclassid+"_]").each(function() {
				this.checked = false;
				var sectionid=$(this).attr('id').split("_")[2];
				var id=batchclassid+"_"+sectionid;
				if(selectedarray.indexOf(id)>-1){
					selectedarray.splice(selectedarray.indexOf(id),1);
				}				
				$('#esasection_'+id).change(function(){ //".checkbox" change 
				    //uncheck "select all", if one of the listed checkbox item is unchecked
				    if(this.checked == false){ //if this item is unchecked
				        $("#esasem_"+batchclassid)[0].checked = false; //change "select all" checked status to false
				    }				
					  if ($('input:checkbox[id^="esasection_'+batchclassid+'_"]:checked').length == $('input:checkbox[id^="esasection_'+batchclassid+'_"]').not(':disabled').length){
					        $("#esasem_"+batchclassid).prop('checked', true);
					    }
				});
			});
		}	
		
		$('#selectdids').val(selectedarray.toString());	
			});
	
	
	$('[id^=esasection_]').click(	function() {
		var selectedvalues=$('#selectdids').val();
		var selectedarray=[];
		var otherselectedvalues=$('#otherselectdids').val();
		var otherselectedarray=[];
		
		if(selectedvalues !=undefined && selectedvalues!=''){
			selectedarray=selectedvalues.split(",")
		}
		if(otherselectedvalues !=undefined && otherselectedvalues!=''){
			otherselectedarray=otherselectedvalues.split(",")
		}
		if ($(this).is(':checked')) {
			
			var batchclassid=$(this).attr('id').split("_")[1];
			var sectionid=$(this).attr('id').split("_")[2];
			var id=batchclassid+"_"+sectionid;
			if(otherselectedarray.indexOf(id)<0){
				this.checked = true;
				selectedarray.push(id);
				
			}else{
				showMessage("Its already assigned to some Other Question Paper", "error");
				return false;
			}
		    if ($('input[name^="esasection_'+batchclassid+'"]:checkbox:checked').length==$('input[name^="esasection_'+batchclassid+'"]').length) {
				 $('#esasem_'+batchclassid).prop("checked", true);
		     } 
			
		}else{			
			this.checked = false;
			var batchclassid=$(this).attr('id').split("_")[1];
			var sectionid=$(this).attr('id').split("_")[2];
			var id=batchclassid+"_"+sectionid;
			if(selectedarray.indexOf(id)>-1){
				selectedarray.splice(selectedarray.indexOf(id),1);
			}
			 $('#esasem_'+batchclassid).prop("checked", false);
		}
		$('#selectdids').val(selectedarray.toString());	
	});
	
	
	$('[id^=esasem_]').each(function () {
	    var id = $(this).attr("id");
	    var idArray = id.split("_");
	    var batchClassId = idArray[1];	
	    
	    if ($('input[name^="esasection_'+batchClassId+'"]:checkbox:checked').length==$('input[name^="esasection_'+batchClassId+'"]').length) {
			 $('#esasem_'+batchClassId).prop("checked", true);
	     } 
	});
	
/*	 if ($('#esasection_'+batchClassId+':checked').size()!=0 && isAllChecked == 0) {
		 $('#esasem_'+batchClassId).prop("checked", true);
     } */
}

function saveEsaAssignQuestionPaper(controllerMode,actionType){
	var val = [];
    var dataValues = [];
    $('.sem').each(function(){
    	if($(this).is(":checked"))
    	{
    		var value = $(this).attr('id');	        	
    		dataValues = value.split("_");
    		if(dataValues[0] != "esasem")
    		val.push(dataValues[1]+"_"+dataValues[2]);
    	}
    });
    var checkedInstId=[];
    $('.instid').each(function(){
		if($(this).is(":checked"))
		{
			checkedInstId.push($(this).attr('id'));	        	
		}
	});
   
	 var formData = {
				controllerMode : controllerMode,
				actionType : actionType,
				qpid:$('#qpid').val(),
				selectedids : val.toString(),/*$('#selectdids').val(),*/
				subjecttype:$('#subjecttype').val(),
				esaqpid:$('#qpid').val(),
				checkedInstId : checkedInstId.toString(),
				menuId : this.menuId
			};
	 bgCurtain();
		doAjaxCall(this.url, "GET", formData, function(data){
			removeBgCurtain();
			var dataArray = data.split("_");
			var status = dataArray[0].toUpperCase();
			var statusResp = dataArray[1];
			if (status == "SUCCESS") {
				showMessage(statusResp,'success');
				if(modalDialog)
					modalDialog.modal('hide');
				return;
			}else{
				showMessage(statusResp,'error');
			}
			
		});
}

// /////////////////End Manage Esa Assign Student to Question
// Paper////////////////

// =========new student assign=====

function getAssignedStudentsInfo(controllerMode,actionType){
	var formData={
			controllerMode:controllerMode,
			actionType:actionType,
			batchId:$("#batch1").val(),
			programId:$("#program1").val(),
			classId:$("#class1").val(),
			branchId:$("#branch1").val(),
			menuId:this.menuId,
			instId:$('#instIdSearch').val(),
	}
	bgCurtain();
	doAjaxCall(this.url, 'POST', formData, function(data) {
		$("#approvedStudentsBasedOnSelection").html(data);
		removeBgCurtain();
	});
}

function showAllStudentsNewAssign(controllerMode,actionType, manageDataId){
	var formData={
			controllerMode:controllerMode,
			actionType:actionType,
			manageDataId:manageDataId,
			menuId:this.menuId
	}
	bgCurtain();
	doAjaxCall(this.url, 'POST', formData, function(data) {
		$("#showStudentsAssignedToStudentClass").html(data);
		removeBgCurtain();
	});	
}

function showNewStudentsCountToNewAssign(controllerMode,actionType,assignType, manageDataId){
	var formData={
			controllerMode:controllerMode,
			actionType:actionType,
			assignType:assignType,
			manageDataId:manageDataId,
			menuId:this.menuId
	};
	bgCurtain();
	doAjaxCall(this.url, 'POST', formData, function(data) {
		var buttons = [
			{
				type : "button",
				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true'></span>Assign",
				className : "btn-sm btn-default",
				callback : function(e) {
					if (!validateNewAssign())
							return false;
					return saveNewStudentsToStudentClassesNewAssign(assignType);
				}
			},
			{
				type : "cancel",
				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
				className : "btn-sm btn-default",
				callback : null
			} ];
		
		getModalDialog('large',"Assign Students",data,buttons,function() {
			getNoOfSectionsForAssigningStudents();
					
				});
		
		// $("#showStudentsAssignedToStudentClass").html(data);
		removeBgCurtain();
	});
}

function validateNewAssign(){
	if(($("#batchClass").val() && parseInt($("#batchClass").val())>0)
			&& ($("#sections").val() && $("#sections").val().length>0))
	return true;
	
	showMessage("Please select corresponding fields","error");
	
	return false;
}

function previewAssignedStudents(actionType){
	if(validateNewAssign())
		{
	var that=this;
	var formData={
			controllerMode:$("#controllerMode").val(),
			actionType:actionType,
			manageDataId:$("#manageDataId").val(),
			deptId:$("#depts").val(),
			classId:$("#class").val(),
			batchClassId:$("#batchClass").val(),
			sectionId:$("#sections").val(),
			
			totalStudents:$("#totalStudents").val(),
			assignedStudents:$("#assignedStudents").val(),
			unAssignedStudents:$("#unAssignedStudents").val(),
			
			menuId:that.menuId
	}
	// bgCurtain();
	doAjaxCall(that.url, 'POST', formData, function(data) {
		$("#showPreviewAssignStudents").html(data);
		// removeBgCurtain();
		// showMessageStatus(data);
		// getAssignedStudentsInfo(9524,6);
	});		
		}
}

function saveNewStudentsToStudentClassesNewAssign(assignType){
	
	var that=this;
	
	getConfirmDialog("Assign Confirmation", "Do you want to proceed?", function() {
		var formData={
				controllerMode:$("#controllerMode").val(),
				actionType:$("#actionType").val(),
				manageDataId:$("#manageDataId").val(),
				deptId:$("#depts").val(),
				classId:$("#class").val(),
				batchClassId:$("#batchClass").val(),
				sectionId:$("#sections").val(),
				assignType:assignType,
				
				newAssignedDeptId:$("#depts").attr("data-selected"),
				newAssignedClassId:$("#class").attr("data-selected"),
				newAssignedBatchClassId:$("#batchClass").attr("data-selected"),
				newAssignedSectionId:$("#sections").attr("data-selected"),
				
				totalStudents:$("#totalStudents").val(),
				assignedStudents:$("#assignedStudents").val(),
				unAssignedStudents:$("#unAssignedStudents").val(),
				
				menuId:that.menuId
		}
		bgCurtain();
		doAjaxCall(that.url, 'POST', formData, function(data) {
			removeBgCurtain();
			showMessageStatus(data);
			getAssignedStudentsInfo(9524,6);
		});	
		modalDialog.modal('hide');
	});
	
	return false;
}


function alreadyAssignedStudentOfStudentClassNewAssign(controllerMode,actionType, manageDataId){
	var formData={
			controllerMode:controllerMode,
			actionType:actionType,
			manageDataId:manageDataId,
			menuId:this.menuId
	}
	bgCurtain();
	doAjaxCall(this.url, 'POST', formData, function(data) {
		$("#showStudentsAssignedToStudentClass").html(data);
		removeBgCurtain();
	});	
}

function getAlReadyAssignedStudentsDetailViewNewAssign(controllerMode,actionType, manageDataId){
	var formData={
			controllerMode:controllerMode,
			actionType:actionType,
			manageDataId:manageDataId,
			menuId:this.menuId
	}
	bgCurtain();
	doAjaxCall(this.url, 'POST', formData, function(data) {
		var buttons = {};
		var buttons = [ {
			type : "cancel",
			label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Close",
			className : "btn-sm btn-default",
			callback : null
		} ];
		
		getModalDialog('large',"Assign Students",data,buttons,function() {
					
				});
		removeBgCurtain();
	});	
}
// =========new student assign=====>>>>>>>



function getManagementUsers(id){

	var emailId='null';
	var instId='null';
	var userId='null';
	var loginId='null';
	var userTypeId='null';
	var mobile='null';
	var deptId='null';
	
	
	if($("#email").val()!="" && $("#email").val()!=null){
		emailId=$("#email").val()
	}
	if($("#getInstId").val()!="" && $("#getInstId").val()!=null){
		instId=$("#getInstId").val()
	}
	if($("#userId").val()!="" && $("#userId").val()!=null){
		userId=$("#userId").val()
	}
	if($("#loginId").val()!="" && $("#loginId").val()!=null){
		loginId=$("#loginId").val()
	}
	if($("#userTypeId").val()!="" && $("#userTypeId").val()!=null){
		userTypeId=$("#userTypeId").val()
	}
	if($("#mobile").val()!="" && $("#mobile").val()!=null){
		mobile=$("#mobile").val()
	}
	if($("#deptId").val()!="" && $("#deptId").val()!=null){
		deptId=$("#deptId").val()
	}
	
	
	var formData={
			controllerMode:6700,
			actionType:8,
			email:emailId,
			inst:instId,
			userId:userId,
			loginId:loginId,
			userTypeId:userTypeId,
			mobile:mobile,
			dept:deptId,
			id:id,
			menuId:this.menuId
	}
	bgCurtain();
	doAjaxCall(this.url, 'GET', formData, function(data) {
		$("#requestedUsersMagementData").html(data);
		removeBgCurtain();
	});		
	
	
}

// Script related to qp pattern

function loadQPPreview() {    
    $('[id^=qpthumbnail_]').on('click', function(event) {
        event.preventDefault();
        var imgPath = $(this).attr('imgpath');
        var lmkTargetId = $(this).prop('id');
        var srcCurrIndex = $(this).index() + 1;
        var eleNodeCont = $('.qpthumbnail').length;
        loadESAQpImage(imgPath, srcCurrIndex, eleNodeCont);
        toggleEsaQpImage(lmkTargetId, eleNodeCont);
        markSelectedThumbnail(lmkTargetId);
    });   
}


function loadESAQpImage(imgUrl, currIndex, eleNodeCont) {
    $('#esaQPPVhere').html('<img src="' + imgUrl +'" />');
    $('#qp_page_info').html('<strong>Page ' +  currIndex + ' of '+ eleNodeCont + '</strong>')
}

function toggleEsaQpImage(lmkTargetId, eleNodeCont) {
    var currImgPath;
    var srcCurrIndex;
    $('#qp_page_prev').on('click', function() { 
        srcCurrIndex = $('#' + lmkTargetId).index() + 1;       
        if(srcCurrIndex <= 1) {
            return false;
        } else {
            lmkTargetId = $('#' + lmkTargetId).prev('a').attr('id');
            currImgPath = $('#' + lmkTargetId).attr('imgpath');
            srcCurrIndex = $('#' + lmkTargetId).index() + 1;
            loadESAQpImage(currImgPath, srcCurrIndex, eleNodeCont);
            markSelectedThumbnail(lmkTargetId);
            // $('#' + lmkTargetId).removeClass('selected');
            // $('#' + lmkTargetId).prev('a').addClass('selected');
        }
    });

    $('#qp_page_next').on('click', function() {  
        srcCurrIndex = $('#' + lmkTargetId).index() + 1;      
        if(srcCurrIndex >= eleNodeCont) {
            return false;
        } else {
            lmkTargetId = $('#' + lmkTargetId).next('a').attr('id');
            currImgPath = $('#' + lmkTargetId).attr('imgpath');
            srcCurrIndex = $('#' + lmkTargetId).index() + 1;
            loadESAQpImage(currImgPath, srcCurrIndex, eleNodeCont);
            markSelectedThumbnail(lmkTargetId);
        }
    });
}

function markSelectedThumbnail(currTargetId) {
    $('#'+currTargetId).closest('.qpthumbnail_wrapper').children('a').removeClass('selected');
    $('#'+currTargetId).addClass('selected');
}

var alphainc = ['', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'];
var rmnsmallinc = ['', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x'];
var rmnupprinc = ['', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X'];

function qp_scheme_func_init() {
    $(document).on('click', '.qp_new_question', function() {
        var qp_level = parseInt($(this).closest('ol').attr('qp-qlevel'));
        var qp_number = parseInt($(this).closest('ol').children('.qp_indvlqstn_wrapper').length) + 1;
        var qp_no_crrnt = numBasedOnLevel(qp_level, qp_number);
        var qp_info = [];
        var qp_numberlvl ="";
        if($(this).parents('.qp_indvlqstn_wrapper').length > 0 ) {
            $(this).parents('.qp_indvlqstn_wrapper').each(function(){
                qp_info.push($(this).attr('qp-caption'));
            });
            for(var i = qp_info.length; i >= 1; i--) {
                qp_numberlvl += qp_info.pop() + ' . ';
            }
            
        }
        
        var newQuestion = '<li class="qp_indvlqstn_wrapper" qp-multilevel="false" qp-lvl="' + qp_level + '" qp-qsnno="' + qp_number + '" qp-caption="' + qp_no_crrnt + '">'+
                        '<div class="qp_content">'+
                        '<span class="qp_description">Question ' + qp_numberlvl + ' ' + qp_no_crrnt + ' ) </span>'+
                        '<span class="qp_marks"><input type="text" class="marks_indvdul" value="0"></span>'+
                        '<span class="glyphicon glyphicon-remove qp_rem_question" aria-hidden="true"></span>'+
                        '</div>'+
                        '<span class="qp_new_questlevel">Add sub level question</span>'+
                        '</li>';
        $(this).before(newQuestion);
        calcMarksInputSum();
    });

    $(document).on('click', '.qp_rem_question', function() {
        var qp_level_crnt = parseInt($(this).closest('ol').attr('qp-qlevel'));
        if(($(this).closest('ol').children('.qp_indvlqstn_wrapper').length) <= 1 && qp_level_crnt > 0) {
            $(this).closest('ol').parent('li').attr('qp-multilevel', 'false');
            $(this).closest('ol').remove();
        } else {
            $(this).closest('li').remove();
        }

        reorderNodeList(qp_level_crnt);

        // $('.qp_pattrn_wrapper[qp-qlevel="'+qp_level_crnt+'"]').children();
        
        calcMarksInputSum();
    });

    $(document).on('click', '.qp_new_questlevel', function() {
        var $this = $(this);
        var qp_level_crnt = parseInt($(this).closest('ol').attr('qp-qlevel')) + 1;        
        var qp_new_addlst = '<ol class="qp_pattrn_wrapper" qp-qlevel="' + qp_level_crnt + '">'+
                        '<li class="qp_new_question">'+
                        '<div class="qp_content">'+
                        '<span class="qp_description">Add New Question</span>'+
                        '</div>'+
                        '</li>'+
                        '</ol>';

        // var prnt_cntnt_rplace ='<span class="qp_description">Multilevel
		// Question</span>'+
        // '<span class="qp_marks"><input type="text" class="marks_indvdul"
		// value="0"></span>'+
        // '<span class="glyphicon glyphicon-remove qp_rem_question"
		// aria-hidden="true"></span>';
        // $this.closest('li').find('.qp_content').html(prnt_cntnt_rplace);
        $this.closest('li').attr('qp-multilevel', 'true');        
        $this.after(qp_new_addlst);
        $this.next('.qp_pattrn_wrapper').find('.qp_new_question').trigger('click');
        calcMarksInputSum();
        
    });
    $(document).on('click', '.qp_rem_questlevel', function() {
        var $that = $(this);
        var qp_level_curr = $that.closest('ol').attr('qp-qlevel');
        var crnt_cntnt_rplace = '<span class="qp_description">Main Question - Level ' + qp_level_curr + '</span>'+
                            '<span class="qp_marks"><input type="text" class="marks_indvdul" value="0"></span>'+
                            '<span class="glyphicon glyphicon-remove qp_rem_question" aria-hidden="true"></span>';
        $that.prev('ol').remove();
        $that.closest('li').find('.qp_content').html(crnt_cntnt_rplace);
        $that.closest('li').attr('qp-multilevel', 'false');
        calcMarksInputSum();
    });
    $(document).on('change', '.marks_indvdul', function() {
        var $input = $(this);
        calcMarksInputSum();
    });
    $(document).on('keyup', '.marks_indvdul', function() {
        var $input = $(this);
        calcMarksInputSum();
    });
}

function numBasedOnLevel(qp_level, qp_number) {
    var curr_number = 0;
    switch(qp_level) {
        case 1:
            curr_number = alphainc[qp_number];
        break;
        case 2:
            curr_number = rmnsmallinc[qp_number];
        break;
        case 3:
            curr_number = rmnupprinc[qp_number];
        break;
        default:
            curr_number = qp_number;
        break;
    }
    return curr_number;
}

function reorderNodeList(qp_crntlevel) {
    for(var i=qp_crntlevel; i < 4; i++) {
        if($('.qp_pattrn_wrapper[qp-qlevel="'+i+'"]').children('.qp_indvlqstn_wrapper').length > 0) {
            $('.qp_pattrn_wrapper[qp-qlevel="'+i+'"]').children('.qp_indvlqstn_wrapper').each(function() {
                var qp_number_innr = parseInt($(this).index()) + 1;
                var qp_no_innr_crrnt = numBasedOnLevel(i, qp_number_innr);
                var qp_inr_info = [];
                var qp_inr_numberlvl ="";
                if($(this).parents('.qp_indvlqstn_wrapper').length > 0 ) {
                    $(this).parents('.qp_indvlqstn_wrapper').each(function(){
                        qp_inr_info.push($(this).attr('qp-caption'));
                    });
                    for(var k = qp_inr_info.length; k >= 1; k--) {
                        qp_inr_numberlvl += qp_inr_info.pop() + ' . ';
                    }                    
                }
                $(this).attr('qp-qsnno', qp_number_innr);
                $(this).attr('qp-caption', qp_no_innr_crrnt);
                $(this).children('.qp_content').find('.qp_description').html('Question ' + qp_inr_numberlvl + ' ' + qp_no_innr_crrnt + ' )' );
            });
        }
    }
}

function calcMarksInputSum() {
    var elmsum = 0;
    $(document).find('.marks_indvdul').each(function() {
        elmsum += parseInt($(this).val());
        $('.marks_total').val(elmsum);
    });
}

function qp_unbind_element() {
    $(document).off('click', '.qp_new_question');
    $(document).off('click', '.qp_rem_question');
    $(document).off('click', '.qp_new_questlevel');
    $(document).off('click', '.qp_rem_questlevel');
    $(document).off('click', '.marks_indvdul');
}



/*function handleEsaQPPattern(obj){
	var formData = {
			controllerMode : 370,
			actionType : 153,
			type:1,
			id : $(obj).attr('data-groupId'),
			menuId : this.menuId
		};
	
	
	var buttons = [
	
		{
			type : "cancel",
			label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
			className : "btn-sm btn-default",
			callback : null
		} ];
	doAjaxCall(this.url, 'get', formData, function(data) {
		getModalDialog('large', "Manage Question Paper", data, buttons, function() {
			// eval(this.url + "(controllerMode,actionType,id,selectedData);");

		});
});
	
}*/



// Manage Assign Evaluator

function handleEsaQPAssignEvaluator(controllerMode,actionType,esaquestionpaperid,subejctid)
{	

	if(esaquestionpaperid==0)
	{
		showMessage("Save the records first to Assign Evaluators details", "error");
	}
	
	var subjectCode = document.getElementById('subjectCode'+subejctid).textContent;	
	var qpName = document.getElementById('qpName'+esaquestionpaperid).textContent;
	var qpSchemeID =document.getElementById(+subejctid+"_qp_template_"+esaquestionpaperid); 
    var qpScheme = qpSchemeID.options[qpSchemeID.selectedIndex].textContent;


	
	var formData={
			controllerMode:controllerMode,
			actionType:actionType,
			esaquestionpaperid:esaquestionpaperid,
			subjectCode:subjectCode,
			qpName:qpName,
			qpScheme:qpScheme,
			menuId:this.menuId
	}	
	var buttons = [	
		{
			type : "button",
			label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='saveEvaluatorId'></span>Save",
			className : "btn-sm btn-default",
			callback : function(e) {		
				saveEvaluator(esaquestionpaperid);				
				return false;
			}
		},
		{
			type : "cancel",
			label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
			className : "btn-sm btn-default",
			callback : null
		} ];
	bgCurtain();

	doAjaxCall(this.url, 'POST', formData, function(data) {
		getModalDialog('large', 'Manage Assign Evaluator', data, buttons, function() {
			x();
			 selectBoxValidation();
		});
});	
}



var facultyValue="";
function x(){
	$("#assignUserId").on('input',function(){
		var thisReq=$(this);
		var enteredValue = $(thisReq).val();
	    var currentDataList=$(thisReq).attr('list');
	    
	    var respVal=showDataList(enteredValue,currentDataList,$(thisReq).attr('id'));
	    if(respVal){
	    	enteredValue=respVal;
	    }
	   $('#'+currentDataList + ' option').filter(function() {
		  			if($(this).val() === enteredValue && enteredValue){
		  				facultyValue=$(this).attr('data-value');
		  				$('#'+currentDataList).empty();
		  				return facultyValue;
		  		}
	       });	  
	    return facultyValue ; // contains value
	});

}

function takeValue(facultyInfoJson){
	 var userId ="";
	  var FirstName = "";
	  var ShortName = "";
	  var flag = "";
	  var emailId = "";

	for(var i = 0; i < facultyInfoJson.length; i++)
	{
	  if(facultyInfoJson[i].UserId == facultyValue)
	  {
		  userId = facultyInfoJson[i].UserId;
		  emailId = facultyInfoJson[i].Email;
		  FirstName = facultyInfoJson[i].FirstName;
		   ShortName = facultyInfoJson[i].ShortName;
	  }	  
	}	
	
// Checking whether faculty is already present in the List
	$('#assisnEvaluatorTable tr').each(function() {		
		console.log($(this).attr("id"));
		if(userId==$(this).attr("id"))
	    flag = true;
	  })
	
	if(ShortName==undefined)
		ShortName="N/A";
	
	if(flag==false){

         var markup = "<tr id="+userId+"><td><input type='checkbox' id="+userId+" name='faculty' onclick='checkFacultyForEvaluator(this)' checked></td><td>" + emailId + "</td><td>" + FirstName + "</td><td>" + ShortName + "</td><td><span id=esaUser_"+userId+">Assigned</span></td></tr>";
         $("#AssignEvaluator").append(markup);       
	}
	else{
		showMessage("Faculty already present in the list", "error");
	}
}

function addAssignEvaluator()
{
	if ($('#assignEvaluatorId').val() == '') {
		showMessage("Select Faculty Name", "error");
	  }
	else
	takeValue(facultyInfoJson);
}

function addOrRemoveFacultyAll(c){
	
	 if(c.checked){		
		 $("input[name^='faculty']:checkbox:not(:checked)").each(function () {
		        $(this).prop("checked", true);
		  });
	 }
	else {
		$("input[name^='faculty']:checkbox:checked").each(function () {
		        $(this).prop("checked", false);
		  });
	}		        
}


function saveEvaluator(esaquestionpaperid){
	
	var val = [];
	$("input[name='faculty']:checked").each(function(i){
    val[i] = $(this).attr("id");
	});
	console.log(val);


var formData={
		controllerMode:370,
		actionType:150,
		val:JSON.stringify(val),
		esaquestionpaperid:esaquestionpaperid,
		menuId:this.menuId
}
bgCurtain();
doAjaxCall(this.url, 'GET', formData, function(data) {
	removeBgCurtain();
	var dataArray = data.split("_");
	var status = dataArray[0].toUpperCase();
	var statusResp = dataArray[1];
	if (status == "SUCCESS") {
		showMessage(statusResp, "success");
		esaCallBack();
	}else{
		showMessage(statusResp, "error");
	}
});		
}


function selectBoxValidation()
{
    if ($("input[name^='faculty']:checkbox:checked").length == $("input[name^='faculty']:checkbox").length ){ 
        $("#checkboxes-0")[0].checked = true; // change "select all" checked
												// status to true
    }     
    $("input[name^='faculty']:checkbox:checked").click(function(){
        if (!$(this).is(':checked')) {
            $("#checkboxes-0").prop('checked', false);
        }        
    });
}

function esaCallBack(){
	   $("input[name^='faculty']:checkbox").each(function(){
	        if ($(this).is(':checked')) {
	        	 document.getElementById("esaUser_"+$(this).attr('id')).innerHTML="Assigned";
	        }else{
	        	 document.getElementById("esaUser_"+$(this).attr('id')).innerHTML="UnAssigned";

	        }        
	    });
}


function getAllBatchClassByIds(type){
/*	var batchId=$("#batchId").val();
	var programId=$("#programId").val();
	var deptId=$("#deptId").val();

	if(!batchId || !programId || !deptId)
		return false;
	getCombobox('/Academy/a/i/batchClass/'+batchId+"/"+programId+"/"+deptId+"/"+1, 'batchClassId',null,null,function(){
	  	$('#batchClassId option[value!=""]:first').prop("selected",true);

	});*/
	
	var institutionId=$("#institutionId").val();
	var batchId=$("#batchId").val();
	var programId=$("#programId").val();
	var deptId=$("#deptId").val();

	if(!institutionId || !batchId || !programId || !deptId)
		return false;
	//getCombobox('/Academy/a/i/getAllbatchClass/'+batchId+"/"+programId+"/"+deptId+"/"+1, 'batchClassId',null,null,function(){
	 getCombobox('/Academy/a/i/getBatchClass/'+batchId+"/"+programId+"/"+deptId+"/"+institutionId+"/"+1, 'batchClassId',null,null,function(){
     $('#batchClassId option[value!=""]:first').prop("selected",false);

	});
}



// ******************** Assign Evaluator End




// faculty feedback result start


function getFeedbackComboBoxValue(){
	
	$('#FacultyFeedbackResultDetails').html('');
	getCombobox('/Academy/a/i/getRestrictedInstitutesByGroup', 'institution',null,null,function(){;
		$("#institution").val($("#institution :first").val());
		if($("#institution").val()!=0){			
			getCombobox("/Academy/a/i/activeBatchesByInst/"+$("#institution").val(), "batch",null,null,function(){
				$("#batch").val($("#batch :first").val());	
				var batchId=$('#batch').val();
				getCombobox("/Academy/a/i/activeProgramsByInst/"+$("#institution").val()+"/"+$("#batch").val(), "program",null,null,function(){
					$("#program").val($("#program :first").val());
					var programId=$('#program').val();
					getCombobox("/Academy/a/i/activeDepartmentsByInst/"+$("#institution").val()+"/"+programId, "depts",null,null,function(){
						$("#depts").val($("#depts :first").val());
						$("#program").val($("#program :first").val());
						getCombobox('/Academy/a/i/getProgramClassesByInst/'+$("#institution").val()+"/"+$("#program").val(), 'semester',null,null,function(){
							$("#semester").val($("#semester :first").val());
							getSubjectsByBatchClass();
						});
					});		
				});
				
			});
			
			}
		});

}

function getActiveBatches()
{
	
	$('#program').html("");
	$('#depts').html("");
	$('#semester').html("");
	$("#BatchClassId").html("");
	$('#section').empty();
	$('#subjects').empty();
	$('#FacultyFeedbackResultDetails').html('');
	var institution=$('#institution').val();
	getCombobox("/Academy/a/i/activeBatchesByInst/"+institution, "batch",null,null,function(){
		if($('#batch').val()!=null){
			var batchId=$('#batch').val();
			getCombobox("/Academy/a/i/activeProgramsByInst/"+institution+"/"+batchId, "program",null,null,function(){
				if($('#program').val()!=null){
					var programId=$('#program').val();
					getCombobox("/Academy/a/i/activeDepartmentsByInst/"+institution+"/"+programId, "depts",null,null,function(){
						if($('#depts').val()!=null){
							/* getBatchClassesBySemester(); */
							getSemesters();
						}
					});
				}
			});
		}
	});
}


function getActivePrograms(){
	$('#FacultyFeedbackResultDetails').html('');
	var institution=$('#institution').val();
	var batchId=$('#batch').val();
	getCombobox("/Academy/a/i/activeProgramsByInst/"+institution+"/"+batchId, "program",null,null,function(){
		if($('#program').val()!=null){
			var programId=$('#program').val();
			getCombobox("/Academy/a/i/activeDepartmentsByInst/"+institution+"/"+programId, "depts",null,null,function(){
				if($('#depts').val()!=null){
					/* getBatchClassesBySemester(); */
					getSemesters();
				}
			});
		}
	});
}

function getActiveDepartments(){
	$('#FacultyFeedbackResultDetails').html('');
	var institution=$('#institution').val();
	var programId=$('#program').val();
	getCombobox("/Academy/a/i/activeDepartmentsByInst/"+institution+"/"+programId, "depts",null,null,function(){
		if($('#depts').val()!=null){
			getSemesters();
			
		}
	});
}

function getSemesters(){	
	$('#FacultyFeedbackResultDetails').html('');
	getCombobox('/Academy/a/i/getProgramClassesByInst/'+$("#institution").val()+"/"+$("#program").val(), 'semester',null,null,function(){
		$("#semester").val($("#semester :first").val());
		if($('#semester').val()!=null){
			getBatchClassesBySemester();
		}
	});
}

function getSubjectsByBatchClass(){
	$('#FacultyFeedbackResultDetails').html('');
	var batchClassId=$("#BatchClassId").val();
	var departmentId=$('#depts').val();
	
	if(batchClassId!=null && batchClassId!="")
	{
		getCombobox('/Academy/a/i/batchClassSections/'+batchClassId, 'section',null,null,function(){
			
			var formData = {
					batchClassId : batchClassId,
					departmentId : departmentId ,
					menuId:this.menuId
				};
				doAjaxCall('/Academy/a/i/getSubjectsBasedOnBatchClass', 'GET', formData, function(data) {
					$('#subjects').empty();
					 $("#subjects").append('<option value="0">Please Select</option>');
					$('#subjects').append(data);
				});
	})
	}else{
		$('#section').empty();
		$('#subjects').empty();
	}
	
}

function getFeedbackResultDetails(searchType){
	
		var formData = {
				controllerMode : 9540,
				actionType : 8,
				institution: $('#institution').val(),
				BatchClassId: $('#BatchClassId').val(),
				ClassBatchSectionId:($('#section').val()).toString(),
				SubjectId:($('#subjects').val()).toString(),
				searchType:searchType,
				menuId:this.menuId
			};
		
		bgCurtain();
		doAjaxCall(url, 'GET', formData, function(data) {
			$('#FacultyFeedbackResultDetails').html("");
			$('#FacultyFeedbackResultDetails').html(data);
			removeBgCurtain();
		});
}


function getBatchClassesBySemester()
{
	var institution=$('#institution').val();
	var batchId=$("#batch").val();
	var programId=$("#program").val();
	var deptId=$("#depts").val();
	var classId=$("#semester").val();
		getCombobox('/Academy/a/i/getBatchClassBySemesterByInst/'+institution+'/'+batchId+'/'+deptId+'/'+programId+'/'+classId,'BatchClassId',null,null,function(){
			getSubjectsByBatchClass();
		});
}

function downloadFacultyFeedback(searchType){
	
	 var rep=true;
		$(".mandatory").each(function() {
			if($(this).val()==0 || $(this).val()==''|| $(this).val()==null){
				rep=false;
				return;
			}
		});
		if(rep){	
				var institution=$('#institution').val();
				var batchClassId=$("#BatchClassId").val();
				var classbatchSectionId=$("#section").val();
				var subjectId=$("#subjects").val();
				window.open('downloadReportForFacultyFeedback/'+institution+'/'+batchClassId+'/'+classbatchSectionId+'/'+subjectId+'/'+searchType,'_blank');
		}else{
			showMessage("Please select all are required fields", "error");
		}

}


function moveFeedbackResponeToResult(){
	
	var formData = {
			controllerMode : 9540,
			actionType : 1,
			batchClassId:$("#BatchClassId").val(),
			classbatchSectionId:$("#section").val().toString(),
			subjectId:$("#subjects").val().toString(),
			menuId:this.menuId
		};
	
	bgCurtain();
	doAjaxCall(url, 'GET', formData, function(data) {
		removeBgCurtain();
		var dataArray = data.split("_");
		var status = dataArray[0].toUpperCase();
		var statusResp = dataArray[1];
		if (status == "SUCCESS") {
			showMessage(statusResp, "success");
		}else if(status == "ERROR"){
			showMessage(statusResp, "error");
		}
	});
	
}




// faculty feedback result end


// ---------------
function handleManageNotes(type,controllerMode,actionType,subjectId,selectedData){
	var formData={
			controllerMode:controllerMode,
			actionType:actionType,
			subjectId:subjectId?subjectId:$("#subjectId").val(),
			selectedData:selectedData,
			unitId:$("#courseContentId").val(),

			menuId:this.menuId,
			type:type
	}
	
	bgCurtain();
	var that=this;
	doAjaxCall(this.url, 'GET', formData, function(data) {
		if(type==1) {
			that.holdInstitutionIdForUnit=$("#institutionId").val();
			that.holdProgIdForUnit=$("#programId").val();
			that.holdBatchIdForUnit=$("#batchId").val();
			that.holdClassIdForUnit=$("#classId").val();
			$("#adminContent").html(data);
	    } else
			$("#courseNoteDetails").html(data);
			
		removeBgCurtain();
	});
}

function goToCourseContent() {

	$("#menuTab_"+this.menuId).trigger("click");
	var that = this;
	bgCurtain();
	
	setTimeout(function() {
//		Get all based on institution when coming back., - Go to session.;
		getAllBasedOnInstWhenComingBackWithSelected(that.holdInstitutionIdForUnit, that.holdProgIdForUnit, that.holdBatchIdForUnit, that.holdClassIdForUnit);
		
//		$('#institutionId option[value='+that.holdInstitutionIdForUnit+']').attr("selected","selected");
//		$('#programId option[value='+that.holdProgIdForUnit+']').attr("selected","selected");
//		$('#batchId option[value='+that.holdBatchIdForUnit+']').attr("selected","selected");
//		$('#classId option[value='+that.holdClassIdForUnit+']').attr("selected","selected");
		
//		getSeletedSyllabus();
		removeBgCurtain();
	}, 500);
}

function handleAddEditNotes(modType, controllerMode, actionType, topicId, selectedData) {
	
	if(!$('#courseContentId').val()) {
		showMessage("Please Select Unit!", "error");
		return false;
	}
	
	var formData = {
			controllerMode:controllerMode,
			actionType:actionType,
			subjectId:$("#subjectId").val(),
			menuId:this.menuId,
			unitId:$("#courseContentId").val(),
			topicId:topicId,
			modType:modType
	};
	
	if(parseInt(modType)==3) {
		getConfirmDialog("Delete: " + selectedData, "Do you want to delete this note?", function() {
			bgCurtain();
			doAjaxCall(this.url, 'GET', formData, function(data) {
				showMessageStatus(data);
				handleManageNotes(2,7550,142);
				removeBgCurtain();
			});
		});
	} else {
		bgCurtain();
		doAjaxCall(this.url, 'GET', formData, function(data) {
			var buttons = [ {
				type : "button1",
				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true'></span>Save Only",
				className : "btn-sm btn-default",
				callback : function(e) {
					if(validateSaveUnitTopic())
						return saveUnitTopic(1);
					else
						return false;
				}
			},
			{
				type : "button2",
				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true'></span>Save & Finalize",
				className : "btn-sm btn-default",
				callback : function(e) {
					if(validateSaveUnitTopic())
						return saveUnitTopic(0);
					else
						return false;
				}
			},
			{
				type : "cancel",
				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
				className : "btn-sm btn-default",
				callback : null
			} ];
			
			getModalDialog('large', selectedData, data, buttons, function() {
				if(modType == 1)
					$("#title").html('');
			});
			removeBgCurtain();
		});
	}
}

function validateSaveUnitTopic(){
	if(!($("#topicTitle").val().trim().length>0) || !($("#title").html().trim().length>0)
			||(this.formErrorList && this.formErrorList.length>0))
		{
		showMessage("Please provide proper input!", "error");
		return false;
		}
	return true;
}

function saveUnitTopic(type){
	var formData = new FormData();

	formData.append("isFinal",type);
	formData.append("controllerMode",$("#controllerMode").val());
	formData.append("actionType",$("#actionType").val());
    formData.append("subjectId",$("#subjectId").val());
	formData.append("menuId",this.menuId);
	
	formData.append("unitId",$("#courseContentId").val());
	formData.append("modType",$("#modType").val());
	formData.append("topicTitle",$("#topicTitle").val());
	formData.append("title",encodeURIComponent($("#title").html()));
	
	formData.append("content",encodeURIComponent($("#content").html()));
	formData.append("courseNoteId",$("#courseNoteId").val());
	formData.append("delFiles",$("#delFiles").val());
	formData.append("delVids",$("#delVids").val());

	formData.append("desc",$("#desc").val());
	getTopicDocs(formData);
	formData.append("vids",JSON.stringify(getTopicVids()));
	
	// bgCurtain();
	doAjaxCall(this.url, 'POST', formData, function(data) {
		showMessageStatus(data);
		handleManageNotes(2,7550,142);
	},false,false);
	return true;
}

function getTopicDocs(formData){
	$("[id^=fileName_]").each(function(){
		if($(this)[0].files[0])
		formData.append($(this).attr("id"),$(this)[0].files[0]);
	});
	

	return formData;
}

function getTopicVids(){
	
	var vids=[];
	$("[id^=newRefFileDivVid_]").each(function(){
		var id=$(this).attr("id").split("_")[1];
		var obj={};
		$(this).find("input").each(function(){
			if($(this).val().length>0)
				obj[$(this).attr("name").split("_")[0]]=$(this).val();
		});
		
		if(Object.keys(obj).length>0)
			vids.push(obj);
	});
	return vids;
}  

function generateCGPAExcel(){
	var batchId=$('#batches').val();
	var programId=$('#program1').val();
	var deptId=$('#depts').val();
	var usnList=$('#USNIds').val();
	var sectionId=$('#sections').val();
	var esaId=$('#esaId').val();
	var classId=$('#semester').val();
	var cycleId=$('#cycle').val();
	var menuId=this.menuId;

	var url="reports/Reports/generateCGPAExcel/";
	url+=batchId+"/"+programId+"/"+classId+"/"+deptId+"/"+cycleId;
	var w = window.open(url,null);
}
// ---------------


/*var chdList=[];
var selectAllIds=false;
var transcriptStdList=[];
var selectAllStudIds=false;
*/
function addOrRemoveStudentsAllForGC(objRow){
	var aryresult=[];
	 var allPages=studLists.column().nodes();
	if($('#'+objRow.id).is(':checked')){
		$('input[type="checkbox"]', allPages).prop('checked', true);
		
		$.each(allPages, function(index, currentValue)
				{
				var id=currentValue.getAttribute('data-name');
				aryresult.push(id);
			
		});

	}else{
		$('input[type="checkbox"]', allPages).prop('checked', false);
		aryresult=[];
	}
	$("#studentUsns").val(aryresult.toString());
}

/*function addOrRemoveStudentsAllForGC(c){
selectAllIds=false; 
if(c.checked){		
	 selectAllIds=true;
	 $("input[id^='student_']").each(function () {
	        $(this).prop("checked", true);
	        addOrRemoveStudentsForGC(this,false);
	  });
}
else {
	$("input[name^='student']").prop("checked", false);
		if(!individual && selectAllIds){
				chdList=[];
				$('#USNIds').val('');
		}
		if(!individual && !selectAllIds){
			chdList=[];
			$('#USNIds').val('');
		}
		
		if(individual && selectAllIds){
			chdList=[];
			$('#USNIds').val('');
		}
		
		
	}
	
}*/



function addOrRemoveStudentsForGC(objRow)
{
	if($("#studentUsns").val()!=''){
		var aryresult=$("#studentUsns").val().split(",");
	}else{
		var aryresult=[];
	}

		if($('#'+objRow.id).is(':checked')){
			var val = $('#'+objRow.id).val();
			aryresult.push(val);
			
		}else{
			var index = aryresult.indexOf($('#'+objRow.id).val());
			if (index > -1) {
				aryresult.splice(index, 1);
			}
			$('#selectedStudents tr#'+$('#'+objRow.id).val()).remove();
			$("[id^=checkboxes]").prop('checked', false );
			
		}
		$("#studentUsns").val(aryresult.toString());
}



/*function addOrRemoveStudentsAllForGC(c){
	 selectAllIds=false; 
	 if(c.checked){		
		 selectAllIds=true;
		 $("input[id^='student_']").each(function () {
		        $(this).prop("checked", true);
		        addOrRemoveStudentsForGC(this,false);
		  });
	 }
	else {
		$("input[name^='student']").prop("checked", false);
			if(!individual && selectAllIds){
					chdList=[];
					$('#USNIds').val('');
			}
			if(!individual && !selectAllIds){
				chdList=[];
				$('#USNIds').val('');
			}
			
			if(individual && selectAllIds){
				chdList=[];
				$('#USNIds').val('');
			}
			
			
		}
		
}


function addOrRemoveStudentsForGC(tRow,individualFlag){
	
	var values = "";
	if($('#USNIds').val()==''){
		chdList=[];
	}
	if(individualFlag==true){
		individual=individualFlag;
		selectAllIds=false;
	}else{
		selectAllIds=true;
	}
	if(tRow.checked){
		values =$('#'+tRow.id).attr("data-name");
		chdList.push(values);
	}else{
		$('[id^=student_]').each(function() {
			for (var i = 0; i < chdList.length; i++) {
				if ($('#'+tRow.id).attr("data-name") == chdList[i]) {
					chdList.splice(i, 1);
				}
			}
		});
	}
	var usnList=chdList.toString();
	$('#USNIds').val(usnList.replace(/,/g, '\n'));
}*/




function clearUsns(){
	
	selectAllIds=false;
	individual=false;
	var table = $(pageId).DataTable();
	table.clear().draw();
	$("input[name^='checkboxes']").prop("checked", false);
	chdList=[];
	$('#USNIds').val('');
	
}


 function restAllSearchForGC(){
	 selectAllIds=false;
	 individual=false;
	 $('#USNIds').val('');
	 calInitGradeCardComboBox();
}

function calInitGradeCardComboBox(){
	
	$("#USNIds").attr("placeholder","e.g.\nPES1201700000\n01FB15ECS000");
	$('#showDiv').hide();
	/*getCombobox('/Academy/a/i/batches', 'batches','','',function(){
		$("#batches").val($("#batches :first").val());
	});
	
	getCombobox('/Academy/a/i/getInstitutes', 'instId',null,null,function(){
		callInitComboBoxforPrograms();
	});*/
	
	getCombobox('/Academy/a/i/getInstitutes', 'instId',null,null,function(){
		if($('#instId').val()!= null){
				 getCombobox('/Academy/a/i/batches', 'batches',null,null,function(){
						getCombobox('/Academy/a/i/programByInstId/'+$('#instId').val(), 'program1',null,null,function(){
							getCombobox('/Academy/a/i/semestersBasedOnBatchAndPgm/'+$('#instId').val()+'/'+$('#program1').val()+'/'+$('#batches').val(), 'batchClassId',null,null);
								getCombobox('/Academy/a/i/getBranchOfProgramFull/'+$("#program1").val(), 'BranchId',null,null,function(){
								});
						
						});
				 });
		}
		});
	
	
}

function callGradeCardComboBoxforPrograms(){
	
	if($('#instId').val()!= null){
	getCombobox('/Academy/a/i/programByInstId/'+$('#instId').val(), 'program1',null,null,function(){
		getCombobox('/Academy/a/i/semestersBasedOnBatchAndPgm/'+$('#instId').val()+'/'+$('#program1').val()+'/'+$('#batches').val(), 'batchClassId',null,null);
			getCombobox('/Academy/a/i/getBranchOfProgramFull/'+$("#program1").val(), 'BranchId',null,null,function(){
			});
	
		});
		
	}
}

function getGradeCardComboBoxForSemester(){
	
	if($('#instId').val()!= null && $('#program1').val()!=null && $('#batches').val()!=null ){
		getCombobox('/Academy/a/i/semestersBasedOnBatchAndPgm/'+$('#instId').val()+'/'+$('#program1').val()+'/'+$('#batches').val(), 'batchClassId',null,null,function(){
			
			getCombobox('/Academy/a/i/getBranchOfProgramFull/'+$("#program1").val(), 'BranchId',null,null,function(){
			});
			
		});
			
	
	}
}



/*function callInitComboBoxforPrograms(){
	
	if($('#instId').val()!= null){
		
		getCombobox('/Academy/a/i/programByInstId/'+$('#instId').val(), 'program1',null,null,function(){
		getCombobox('/Academy/a/i/programForBatchClass', 'program1','','',function(){
			$("#program1").val($("#program1 :first").val());
			getCombobox('/Academy/a/i/getProgramClasses/'+$("#program1").val(), 'semester','','',function(){
				$("#semester").val($("#semester :first").val());
				getCombobox('/Academy/a/i/getBranchOfProgramFull/'+$("#program1").val(), 'BranchId',null,null,function(){
					
						getCombobox('/Academy/a/i/cycle', 'cycle','','',function(){
							$("#cycle").val($("#cycle :first").val());
						});
						
					
					getStudentsDetailsForGradeCardsDetails();
				});
	
			});
		});
		
		getCombobox('/Academy/a/i/getDepartmentBasedOnInstitutes/'+$('#instId').val(), 'depts',null,null,function(){
			getCombobox('/Academy/a/i/depts', 'depts','','',function(){
				$("#depts").val($("#depts :first").val());
			});
			
	}
	
}*/

function validateAnnouncemnet(){
	var fl=true;
	if(parseInt($('#instID').val())==-1){
		showMessage("Please select Institute!", "error");
		fl= false;
	}
	
	if(parseInt($('#announcementFor').val())==-1){
		showMessage("Please select Announcement For!", "error");
		fl= false;
	}
	
	if(parseInt($('#announcementFor').val())==2){
		if(parseInt($('#annDepts').val())==-1){
			showMessage("Please select Department!", "error");
			fl= false;
		}
	}
	
	if($("#text").is(':checked')){
		var iconPathInBase64=$('#IconPathInBase64').val();
		
		if(iconPathInBase64=="" || iconPathInBase64==null  || iconPathInBase64=="null"){
			showMessage("Please upload Icon image !", "error");
			fl= false;
		}
	}
	
	if($("#picture").is(':checked')){  
		var picFlag=false;
		var picturePathInBase64=$('#PicturePathInBase64').val();
		var pictureIconPathInBase64=$('#PictureIconPathInBase64').val();
		
		if(picturePathInBase64=="" || picturePathInBase64==null || picturePathInBase64=="null"){
			showMessage("Please upload Picture image!", "error");
			fl= false;
		}
		if(pictureIconPathInBase64=="" || pictureIconPathInBase64==null || pictureIconPathInBase64=="null"){
			showMessage("Please upload Picture icon!", "error");
			fl= false;
		}
		 var image = new Image();
    	image.src=picturePathInBase64;
    	
		if(image.width > 512 || image.height > 256){
			picFlag=true;
	        }
		
		if(picFlag){
			showMessage("Please upload Picture 512X256  pixel only Or Erid image", "error");
			fl= false;
		}else{
			$("#showErrorMessage").hide();
		}
		
		
		 var image = new Image();
	    	image.src=PictureIconPathInBase64;
	    	
			if(image.width > 52 || image.height > 52){
				picFlag=true;
		        }
			
			if(picFlag){
				showMessage("Please upload Picture icon 52X52 pixel only Or Edit Image", "error");
				fl= false;
			}else{
				$("#showErrorMessage").hide();
			}
		
		
	}
	
	var startDate = document.getElementById("sDate").value;
    var endDate = document.getElementById("eDate").value;

    if ((Date.parse(startDate) > Date.parse(endDate))) {
    	showMessage("End Date should be greater than Start Date",'error');
    	fl= false;
    }
	
return fl;
	
}



function previewForAnnouncement(formData,obj,value,formId)
{
	if(modalDialog){
		tempModel=modalDialog;
	}
	
	var buttons = [{
		type : "button",
		label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='saveAnnNotificationId'></span>Save And Send Notification",
		className : "btn-sm btn-default",
		callback : function(e) {		
			
			obj.callBack=true;
			handleGenericSave(formData,obj,value,formId);
			
			tempModel.modal('hide');
					
			//$("#menuTab_" + menuId).trigger("click");
		}
	},{
	   				type : "cancel",
	   				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
	   				className : "btn-sm btn-default",
	   				callback : null
	   			} ];
	
	var title=$('#announcementName').val();
	var description=$('#description').val();
	var numOfRecords=$('#totalDevices').val();
	var noOfDevices="";
	var userLoginIds="";
	if($('#sendType').val()==1){
		if(numOfRecords.includes("#####")){
			noOfDevices=numOfRecords.split("#####")[0];
			userLoginIds=numOfRecords.split("#####")[1];
		}else{
			noOfDevices=numOfRecords; // records empty
		}
	}else{
		noOfDevices=numOfRecords;
	}
	
	var imageForPreview;
	var pictureIconForPreview;
	if($("#text").is(':checked')){
		imageForPreview=$('#IconPathInBase64').val();
	}else{
		imageForPreview=$('#PicturePathInBase64').val();
		pictureIconForPreview=$('#PictureIconPathInBase64').val();
	}
	
	if(title && description)
	{
		
	var data='<div class="wrapper-modal-content-area-pad">   <form class="form-horizontal">  <div class="col-md-12">  <fieldset class="grp_frmfld" style="padding-top: 15px; margin-top: 10px;">'
            +'<div class="form-group"><label class="col-md-2 control-label" for=""><strong>Title: </strong></label> <label class="col-md-7 control-label text-left" for="" id="msgPreviewTitle">'+title+'</label>'
            +'</div><div class="form-group"><label class="col-md-2 control-label" for=""><strong>Description: </strong></label>'
            +'<label class="col-md-7 control-label text-left" for="">'+description+'</label>'
            
            if($("#text").is(':checked')){
            	 data+='<div class="form-group"></div><div class="form-group"><label class="col-md-2 control-label" for=""><strong>Uploaded Icon: </strong></label><div class="col-md-10" style="padding-top: 8px;"><img src='+imageForPreview+' id="uploadedImagePreview" alt="Uploaded Icon" width="52px" height="52px"/></div>';
        	}else{
        		data+='<div class="form-group"></div><div class="form-group"><label class="col-md-2 control-label" for=""><strong>Uploaded Image: </strong></label><div class="col-md-10" style="padding-top: 8px;"><img src='+imageForPreview+' id="uploadedImagePreview" alt="Uploaded Image" width="512px" height="256px"/></div>';
        		data+='<div class="form-group"></div><div class="form-group"><label class="col-md-2 control-label" for=""><strong>Uploaded Icon: </strong></label><div class="col-md-10"><img src='+pictureIconForPreview+' id="uploadedIconPreview" alt="Uploaded Icon" width="52px" height="52px"/></div>';
        	}
            
	var actionType=$('#actionType').val();
	data+='</div></div> </fieldset>'
		if(actionType==1){
			data+='<div class="form-group"><label class="col-md-2 control-label" style="color:red" for=""> <strong>NOTE :  </strong>  </label> <label class="col-md-7 control-label text-left" style="color:red" for=""> <strong>Sending Notification to '+noOfDevices+' recipients </strong></label></div>';
			
			if($('#sendType').val()==1){
				data+='<div class="form-group"><label class="col-md-2 control-label" style="color:red" for=""> <strong>Test User Login Ids: </strong>  </label> <label class="col-md-7 control-label text-left" style="color:red" for=""><strong> '+userLoginIds+' </strong></label> </div>';
			}
		}
	data+='</div></form></div>';
		
		getModalDialog('large', 'Notification Preview', data, buttons, function(){

	});
	}
	else
	{
	showMessage('Please enter title and description.','error');
	}
}


function uploadedImageDiemention(file){
	
	 var image1 = new Image();
	image1.onload = function() {
  	  console.log(this.width + 'x' + this.height);
  }
	
	image1.src = file
}

function replaceButtonName(formData){
	if(formData.menuId==380){
		$("#generic-save-id").text('Preview');
		$("#genericSave").off();
	}
}



function pictureCropIcon(val){
	if(!tempModel){
		tempModel=modalDialog;
		}
	
	firstDialogBox =$.extend(true,{},tempModel);

	var idValues=0;
	
	var img;
	if($("#picture").is(':checked')){  
		 img = "<div class='clearfix'><div class='col-md-12' id='cropImage' style='display:block;margin-top: 15px;'>" +
		"</div><input type='hidden' id='clickedCroppingId' name='clickedCroppingId' value='"+idValues+"'>" +
				"<div class='col-md-12 text-center' style='margin-bottom:10px;'>" +
				"<input type='button' onclick='croppedIcon();' value='Crop Image'> " +
				"<input type='button' onclick='saveCroppedPictureIcon();' value='Save Image' style='display:none' id='saveCroppedIcon'>" +
				" </div>"+
		
				"<img id='cropedImg' style='display: block; width: 52px; height:52px; margin: auto; margin-bottom: 10px;'/></div>";
		
	}
	
	
		getModalDialog('medium', "Image",img, null,function(){
			if($("#picture").is(':checked')){  
				croppingPictureIcon(idValues);
			}
			
		});
	
}


function saveCroppedPictureIcon(){
	

	selectedPath=croppedSelectedPath;
	
	if($("#picture").is(':checked')){
		$("#PictureIconPathInBase64").val(selectedPath);
		$("#announcementPictureIcon").attr('src', selectedPath);
		 $("#showErrorMessageForIcon").hide();
	}
	
	 modalDialog.modal('hide');
	 modalDialog =$.extend(true,{},firstDialogBox);
	 removeBgCurtain();
	 
}



function croppingPictureIcon(idValues) {
	 $('#cropImage').croppie('destroy');
	        $('#cropImage').croppie({
	            // viewport options
	            viewport: {
	                width: 52,
	                height: 52,
	                type: 'square' // or 'circle'
	            },

	            // boundary options
	            boundary: {
	                width: 100,
	                height: 100,
	            },
	            // addiontal CSS class
	            customClass: '',
	        });

	        var urlBase= selectedOriginalIconPath;
	        $('#cropImage').croppie('bind',{
	          url:urlBase,
	          points: [10,200,10,200],
	        });
	      
	       
};

function chkForOpenModal() {
	// $('.bootbox').on('hidden.bs.modal', function (e) {
	if ($('.modal.in').css('display') == 'block') {
	$('body').addClass('modal-open');
	}else{
		$('body').removeClass('modal-open');
	}
	// });
	}

function dateCheckerProgress()
{

	$("#eDate").on('change',function ()  {
	    var startDate = document.getElementById("sDate").value;
	    var endDate = document.getElementById("eDate").value;

	    if ((Date.parse(startDate) > Date.parse(endDate))) {
	    	showMessage("Attendance To Date should be greater than Attendance From Date",'error');
	        
	    }
	});	
}

// ////////////Change Institute/////////////
function changeInstitute(controllerMode,actionType){
	var that=this;
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			id : $('#institutionId').val(),
			menuId : this.menuId
		};
		doAjaxCall(this.url, 'GET', formData, function(data) {
			var dataArray = data.split("_");
			var status = dataArray[0].toUpperCase();
			var statusResp = dataArray[1];
			if (status == "SUCCESS") {
				showMessage(statusResp, "success");
				$("#menuTab_" +that.menuId).trigger("click");
			}else{
				showMessage(statusResp, "error");
			}
			
		});
	
}
// //////////End Change Institute////////////




//coe attendance start

function getDetailsBasedOnInst()
{
	$('#batch').html("");
	$('#program').html("");
	$('#dept').html("");
	$('#class').html("");
	$('#batchclass').html("");
	var institute = $("#institute").val();
	getCombobox('/Academy/a/i/batchesByInstIdOrParent/'+institute, 'batch',null,null,function(){
		$("#batch").val($("#batch :first").val());
			getCombobox('/Academy/a/g/programshortByInst/'+institute, 'program',null,null,function(){
				$("#program").val($("#program :first").val());
					getCombobox('/Academy/a/i/getDeptBasedOnInstId/'+institute, 'dept',null,null,function(){
						$("#dept").val($("#dept :first").val());
/*							getCombobox('/Academy/a/i/branchFullByInstIdOrParent/'+institute, 'branch',null,null,function(){
								$("#branch").val($("#branch :first").val());*/
									getCombobox('/Academy/a/i/classessbyinst1/'+institute, 'class');
									
							//});
					});
			});
	});
	getbatchclassForCoe();
}

function getbatchclassForCoe(){
	getCombobox('/Academy/a/i/getBatchClassReport/'+$('#batch').val()+'/'+$('#program').val()+'/'+$('#dept').val()+'/'+$('#class').val(), 'batchclass');
}


function downloadStudentOrCOEAttendance(){
	var type=1;
	var batch=$('#batch').val();
	var program=$('#dept').val();
	var dept=$('#batch').val();
	var classId=$('#class').val();
	var batchclass=$('#batchclass').val();
	var institute = $('#institute').val();
	
	if(batchclass!=null && batchclass!=undefined && batchclass!='' &&
			classId!=null && classId!=undefined && classId!='' ){
		var url="reports/Reports/StudentCOEAttendance/"+type+"/"+batch+"/"+program+"/"+dept+"/"+classId+"/"+batchclass+"/"+institute;
		var w=window.open(url,null);
	}else{
		showMessage("Please select all are required fields", "error");
	}
	
	
}

function getCOEStudentDetails(){
	var batchclass=$('#batchclass').val();
	var classId=$('#class').val();
	if(batchclass!=null && batchclass!=undefined && batchclass!='' &&
			classId!=null && classId!=undefined && classId!=''){
	
	var selectedType=1;
	if ($(getAttendanceListCOE).is(':checked')) {
		selectedType=2;
	}
	var formData = {
			controllerMode : 9550,
			actionType : 3,
			institute:$('#institute').val(),
			batchId:$('#batch').val(),
			programId:$('#dept').val(),
			deptId:$('#batch').val(),
			classId:$('#class').val(),
			batchclassId:$('#batchclass').val(),
			selectedType:selectedType,
			menuId:this.menuId,
			
		};
	bgCurtain();
	
		doAjaxCall('instituteApp', 'GET', formData, function(data) {
			removeBgCurtain();
			$("#AttendnaceCEODetails").html(data);
			});
		
	}else{
		showMessage("Please select all are required fields", "error");
	}
	
}


//coe attendance end


function getStudentsForScaledMarks(controllerMode,actionType){
	if(!($('#batchClassId').val()!=null && $('#batchClassId').val().length>0 &&
			$('#batchClassSecId').val()!=null && $('#batchClassSecId').val().length>0 && 
			$('#batchClassSubId').val()!=null && $('#batchClassSubId').val().length>0 && 
			$('#isaMasterId').val()!=null && $('#isaMasterId').val().length>0  )){
		showMessage("Please select corresponding fields","warn");
		return;
	}
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			batchclassId:$('#batchClassId').val(),
			batchclassSecId:$('#batchClassSecId').val(),
			subjectId:$('#batchClassSubId').val().toString(),
			isaId:$('#isaMasterId').val(),
			insId:$('#institutionId').val(),
			menuId:this.menuId,
			type:1
			
		};
	bgCurtain();
	
		doAjaxCall('instituteApp', 'GET', formData, function(data) {
			removeBgCurtain();
			$("#studentDetails").html(data);
			});
}

function applyScaledMarks(){
	var max=parseFloat($("#maxMarks").val());
	var scaled=parseFloat($("#scaledMarks").val());
	var scl;
	var obt;
	$("[id^=isascaledmarks_] tr").each(function(i){
		i++;
		obt=parseFloat($("#isascalemarks1_"+i).val());
		if(isNaN(obt))
			scl="";
		else{
			if(obt==-1){
				scl=obt;	
			}else{
				scl=((obt/max)*scaled).toFixed(4);

			}
		}
			

		$("#isascalemarks2_"+i).val(scl);
	});
}

function saveScaledMarks(controllerMode,actionType){
	
	applyScaledMarks();
	getConfirmDialog("Scale ISA Marks", "Do you want to scale ISA marks?", function() {
		
	
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			menuId:this.menuId,
			marks:JSON.stringify(getScaledData()),
			max:parseFloat($("#maxMarks").val()),
			scaled:parseFloat($("#scaledMarks").val())
			
		};
	bgCurtain();
	
		doAjaxCall('instituteApp', 'POST', formData, function(data) {
			removeBgCurtain();
			showMessageStatus(data);
		});
		
	});
	function getScaledData(){
		var ret=[];
		$("[id^=isascaledmarks_] tr").each(function(i){
			i++;
			ret.push({id:$("#isascalemarks1_"+i).attr("data-id"),marks:$("#isascalemarks1_"+i).val(),scMarks:$("#isascalemarks2_"+i).val()});
		});
		return ret;
	}
}

function sendTestDevicesNotification(){
	
	
	if (!$("#genericSave").valid() || formErrorList.length>0){
		return false;
		
	}
	$('#sendType').val(1);
	var formData = {
			id:0,
			sendType:1,
			menuId : this.menuId
		};

	var obj = getDialogMessage(380, $('#actionType').val(), id, selectedData);
	if(beforeGenericSave(formData,obj,0,"#genericSave")){
	 handleGenericSave(formData,obj,0);
	}/*else{
		modalDialog.modal('show');
	}*/
}




function announcementPreview(){
	
	
	if (!$("#genericSave").valid() || formErrorList.length>0){
		return false;
		
	}
	
	$('#sendType').val(0);
	
	var formData = {
			controllerMode : 380,
			actionType : $('#actionType').val(),
			id:0,
			sendType:0,
			menuId : this.menuId
		};

	var obj = getDialogMessage(380, $('#actionType').val(), id, selectedData);
	if(beforeGenericSave(formData,obj,"#genericSave")){
		return handleGenericSave(formData,obj,value);
		}else{
			/*modalDialog.modal('show');*/
			/*return false;*/
		}
}

function getNumberOfDevice(sendType,formData1,obj,value,formId){
	
	var formData = {
			controllerMode : 380,
			actionType : 147,
			annDepts:$('#annDepts').val(),
			program:$('#program').val(),
			instID:$('#instID').val(),
			sendType:formData1.sendType,
			menuId:this.menuId
		};
	
	doAjaxCall('instituteApp', 'GET', formData, function(data) {
		$('#totalDevices').val(data);
		previewForAnnouncement(formData,obj,value,formId);
	});
}


function announcementCombobox(){
	
	
	var instId=$('#instID').val();
	var pId=parseInt($("#announcementId").val());
	getCombobox('/Academy/a/i/getInstitutes', 'instID',null,null,function(){
		if(parseInt(pId)==0){
			$('#instID option:first-child').attr("selected", "selected");
		}
		announcementPrograms();
	});
	
	getCombobox('/Academy/a/i/configValue/1/'+Constants.ControllerMode.Announcements, 'announcementFor',null,null,function(){
		
		if($('#announcementFor > option').length!=1)
			$("#announcementFor").prepend('<option value=-1>select announcementFor</option>');	
		if(parseInt($("#announcementFor").attr('data-selected'))==0)
		$('#announcementFor option:first-child').attr("selected", "selected");
			
	});

}


function announcementPrograms(){
	
	if($('#instID').val()!= null){
		getCombobox('/Academy/a/i/getDepartmentBasedOnInstitutes/'+$('#instID').val(), 'annDepts',null,null,function(){
			getCombobox('/Academy/a/i/programByInstId/'+$('#instID').val(), 'program',null,null,function(){
	
			/*if($('#instID > option').length!=1)
			$("#instID").prepend('<option value=-1>select Institute</option>');	
			
			if(parseInt($("#instID").attr('data-selected'))==0)
			$('#instID option:first-child').attr("selected", "selected");*/

			if($('#program > option').length>=0)
			$("#program").prepend('<option value=-1>select program</option>');
				
			if(parseInt($("#program").attr('data-selected'))==0)
			$('#program option:first-child').attr("selected", "selected");
				
			if($('#annDepts > option').length>=0)
			$("#annDepts").prepend('<option value=-1>select department</option>');


			if(parseInt($("#annDepts").attr('data-selected'))==0)
			$('#annDepts option:first-child').attr("selected", "selected");
			getCombobox('/Academy/a/i/batchClass/'+$("#program").val()+'/'+$("#annDepts").val(), 'classes',null,null,function(){
				
			});

				
			})
	
		});
		}
}





function validateAnnouncementTestUsers(){
	
	
	if (!$("#genericSave").valid() || formErrorList.length>0){
		return false;
	}
	
	
	var formData = {
			controllerMode : 7580,
			actionType :149, 
			type:1,
			loginId:$('#loginId').val(),
			id : id,
			menuId:this.menuId
		};
	
	doAjaxCall('appAdmin', 'GET', formData, function(data) {
		
		if(data=="NOTVALID"){
			showMessage("This User Not Registered.","error");
		}
		if(data=="EXISTS"){
			showMessage("Already User Exists.","error");
		}
		if(data=="SUCCESS"){
			addAnnouncementTestUsers(); 
		}
		if(data=="ERROR"){
			showMessage("User Not Saved.","error");
		}
		
		
	});
}



function addAnnouncementTestUsers(){
	
	var formData = {
			controllerMode : 7580,
			actionType :150, 
			type:1,
			loginId:$('#loginId').val(),
			id : id,
			menuId:this.menuId
		};
	
	doAjaxCall('appAdmin', 'GET', formData, function(data) {
		if(data=="ERROR"){
			showMessage("User Not Saved.","error");
		}else{
			showMessage("Successfully User Saved.","success");
			$("#menuTab_" + this.menuId).trigger("click");
			
		}
		
		
		
	});
}


function removeTestUsers(controllerMode,actionMode,manageDataId,selectedData){
	
	var formData = {
			controllerMode : controllerMode,
			actionType :actionMode, 
			testUsersId:manageDataId,
			loginId:selectedData,
			menuId:this.menuId
		};
	
	doAjaxCall('appAdmin', 'GET', formData, function(data) {
		if(data=="ERROR"){
			showMessage("User Not Deleted.","error");
		}else{
			showMessage("User Removed successfully.","success");
			$("#menuTab_" + this.menuId).trigger("click");
			
		}
	});
}

function sendEmailsToStudents(){
	
	
	var startDate = document.getElementById("sDate").value;
    var endDate = document.getElementById("eDate").value;
    
	if (!$("#genericSave").valid() || formErrorList.length>0){
		return false;
		
	}
	
	$('#sDate').val($('#sDate').val()+' '+$('#sTime').val());
	$('#eDate').val($('#eDate').val()+' '+$('#eTime').val());
	
	var sDate = $('#sDate').val();
	var eDate = $('#eDate').val();
	sDate = sDate.slice(0, -5);
	eDate = eDate.slice(0, -5);
	if(sDate == eDate){
		if(!validateStartAndEndTimes($('#sTime').val(), $('#eTime').val())){
			document.getElementById("sDate").value=startDate;
	    	document.getElementById("eDate").value=startDate;
			return false;
			}
		
	}
	if(!validateStartAndEnddates(new Date(sDate), new Date(eDate))){
		document.getElementById("sDate").value=startDate;
    	document.getElementById("eDate").value=startDate;
		return false;
	}
	
	if ((Date.parse(startDate) > Date.parse(endDate))) {
		document.getElementById("sDate").value=startDate;
    	document.getElementById("eDate").value=startDate;
    	showMessage("End Date should be greater than Start Date",'error');
    	return false;
    }
	

	
	getConfirmDialog("Send Assignment", "Are you sure you want to send Assignment to selected students ?", function() {
		
		var formData = {
			controllerMode : 7509,
			actionType : 3,
			id:0,
			menuId : this.menuId
		};

	var obj = getDialogMessage(7509, 3, id, selectedData);
	$('#sectionId').removeAttr('disabled');
	if(beforeGenericSave(formData,obj,0,"#genericSave")){
		
	 handleGenericSave(formData,obj,0);
	
	}
	});
}
function downloadQPBarcode(qpId,id) {
	var type = 4;
	var idArray=[];
	idArray = id.split("_");
	var date = idArray[1];
	var url="reports/Reports/generateQPReport/"+qpId+"/"+type+"/"+date;
	var w=window.open(url,null);
}

function previewMessageForEmailType () {
	
	$('#dt_btnContainer a:eq(0)').blur();
	var buttonName = $("a:focus").text();
	
	var title = $('#emailTitle').val();
	var message = $('#emailMessage_1').val();
	
	if(title && message) {
		
		var formData = {
				id : this.id,
				url : 'appAdmin',
				actionType : 152,
				emailTitle : title,
				emailMessage : message,
				menuId : this.menuId,
				controllerMode : 7000,
//				selectedData : this.selectedData
		};
		
		var buttons = [{
			type : "cancel",
			label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Close",
			className : "btn-sm btn-default",
			callback : null
		}];
		
		doAjaxCall('appAdmin', 'get', formData, function(data) {
			getModalDialog('large', "Email Preview", data, buttons, null, null, null, function() {
				
			});
		});
	} else {
		showMessage('Please enter title and message.', 'error');
	}
}
function handleSupportRequest(type, controllerMode, actionType, id, selectedData) {
	var status=$("#status"+id).val();
	if(status=="NEW")
		{
   var buttons = [{
		type : "button",
		label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='saveAnnNotificationId'></span>Resolve& Save",
		className : "btn-sm btn-default",
		callback : function(e) {
			var email=$("#email").val();
			updateSupportRequestStatus(id,email);
			$("#menuTab_" + menuId).trigger("click");
		}
	},{
	   				type : "cancel",
	   				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
	   				className : "btn-sm btn-default closebutton",
	   				callback : null
	   			} ];
		}
	
   var formData = {
			controllerMode :806,
			actionType :155,
			requestId:id,
			menuId:this.menuId
		};
	 doAjaxCall('appAdmin', 'get', formData, function(data) {
		getModalDialog('large', "Support Request", data, buttons, null, null, null, function() {
			
		});
	});
	
	
}

function updateSupportRequestStatus(requestid,email){
	var refnumber=$("#refnumber").val();
	var issuetype=$("#issuetype").val();
	var formData = {
			controllerMode :806,
			actionType :156,
			status:"Resolved",
			issuetype:issuetype,
			email:email,
			refnumber:refnumber,
			id:requestid,
			description:$("#comment").val(),
			menuId:this.menuId
		};
	
	doAjaxCall('appAdmin', 'GET', formData, function(data) {
		if(data=="ERROR"){
			showMessage("Error .","error");
		}else{
			showMessage(data,"success");
			$(".closebutton").click();
			$("#menuTab_" + this.menuId).trigger("click");
			
		}
	});
}
  
  
function searchsupportrequest()
		{
	var usertype=$("#usertype").val();
	var status=$("#status").val();
	var fromdate=$("#fromdate").val();
	var todate=$("#todate").val();
	var date = Date.parse(fromdate);
	if(fromdate!="" && todate!="")
		{
		
		if(Date.parse(fromdate) > Date.parse(todate)){
			   showMessage("Invalid Date Range","error");
			   return false;
			}
			
		}
	var formData = {
			controllerMode :806,
			actionType :155,
			usertype:usertype,
			status:status,
			fromdate:fromdate,
			todate:todate,
			menuId:this.menuId
		};
	
	doAjaxCall('appAdmin', 'GET', formData, function(data) {
		$("#adminContent").html(data);
		$("#usertype").val(usertype);
		$("#status").val(status);
		$("#fromdate").val(fromdate);
		$("#todate").val(todate);
		});
	}

function setCkEditorDataForEmailMessage(json) {
	if(json.pushNotificationId != 0) {
		var allInstances = CKEDITOR.instances;
		if(allInstances.length != 0) {
			allInstances.emailMessage.setData(json.pushNotificationMessage);
			$("#emailMessage_1").val(json.pushNotificationMessage);
		}
	}
}

function getEvaluateDailog(type, controllerMode, actionType, id, selectedData){
	
	var formData = {
			controllerMode : parseInt(controllerMode),
			actionType : 154,
			id : id,
			selectedData : selectedData,
			menuId : this.menuId
		};
	
	
	

	var buttons = {};
	var buttons = [ {
		type : "cancel",
		label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Close",
		className : "btn-sm btn-default",
		callback : null
	} ];
	
	var title = handleCommonViewTitle(controllerMode, actionType, id, selectedData);
	bgCurtain();
	doAjaxCall(this.url, 'get', formData, function(data) {
		getModalDialog('large', title, data, buttons, function() {
			removeBgCurtain();
			getStudentRecordsValue(controllerMode,actionType,id,selectedData);
		
	});
		
		
		
	});
	
		}



function getStudentRecordsValue(controllerMode,actionType,id,selectedData){
	
	var formData1 = {
			controllerMode : parseInt(controllerMode),
			actionType : parseInt(actionType),
			id : id,
			selectedData : selectedData,
			menuId : this.menuId
		};
	bgCurtain();
	doAjaxCall(this.url, 'get', formData1, function(data) {
		removeBgCurtain();
		$("#showAlltudents").html(data);
});
}

function dateCheckerForAssignment()
{

	$("#eDate").on('change',function ()  {
	    var startDate = document.getElementById("sDate").value;
	    var endDate = document.getElementById("eDate").value;

	    if ((Date.parse(startDate) > Date.parse(endDate))) {
	    	document.getElementById("eDate").value=startDate;
	    	showMessage("End Date should be greater than Start Date",'error');
	        
	    }
	});	
}

//******************Config Value********************//
function handleConfigValue(controllerMode,actionType,id,selectedId)
{
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			id : id,
			selectedId : selectedId,
			menuId : this.menuId
	};
	var title='';
	if(parseInt(id)===0)
		title="Add Config Value";
	else
		title="Edit Config Value, Name : "+selectedId;
	bgCurtain();
	var buttons = [	
		{
			type : "button",
			label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id=''></span>Save",
			className : "btn-sm btn-default",
			callback : function(e) {	
				var cname = document.getElementById('cname').value;
				var cvalue = document.getElementById('cvalue').value;
				var featureId = document.getElementById('featureId').value;
				var orderBy = document.getElementById('orderBy').value;
				actionType = document.getElementById('actionType').value;
				var configValueId = document.getElementById('configValueId').value;
				saveConfigValue(cname,cvalue,featureId,orderBy,actionType,configValueId);
				return false;
			}
		},
		{
			type : "cancel",
			label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
			className : "btn-sm btn-default",
			callback : null
		} ];
	
	bgCurtain();

	doAjaxCall(this.url, 'GET', formData, function(data) {
		getModalDialog('large', title, data, buttons, function() {
		});
	});
}
function saveConfigValue(cname,cvalue,featureId,orderBy,actionType,configValueId)
{
	if (!$("#genericSave").valid())
		return false;
	bgCurtain();
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			menuId : this.menuId,
			cname : cname,
			cvalue : cvalue,
			featureId : featureId,
			orderBy : orderBy,
			configValueId : configValueId
	};	
doAjaxCall(this.url, 'GET', formData, function(data) {
	removeBgCurtain();
	var dataArray = data.split("_");
	var status = dataArray[0].toUpperCase();
	var statusResp = dataArray[1];
	if (status == "SUCCESS") {
		modalDialog.modal('hide');
		$("#menuTab_" + this.menuId).trigger("click");
		showMessage(statusResp, "success");
			
	}else{
		showMessage(statusResp, "error");
	}
});		
	
}

//******************End Config Value********************//


function saveStudentRecords(){
	
	var startDate = document.getElementById("sDate").value;
    var endDate = document.getElementById("eDate").value;
    
	if (!$("#genericSave").valid() || formErrorList.length>0){
		return false;
		
	}
	
	$('#sDate').val($('#sDate').val()+' '+$('#sTime').val());
	$('#eDate').val($('#eDate').val()+' '+$('#eTime').val());
	
	var sDate = $('#sDate').val();
	var eDate = $('#eDate').val();
	sDate = sDate.slice(0, -5);
	eDate = eDate.slice(0, -5);
	if(sDate == eDate){
		if(!validateStartAndEndTimes($('#sTime').val(), $('#eTime').val())){
			document.getElementById("sDate").value=startDate;
	    	document.getElementById("eDate").value=startDate;
			return false;
			}
		
	}
	if(!validateStartAndEnddates(new Date(sDate), new Date(eDate))){
		document.getElementById("sDate").value=startDate;
    	document.getElementById("eDate").value=startDate;
		return false;
	}
	
	if ((Date.parse(startDate) > Date.parse(endDate))) {
		document.getElementById("sDate").value=startDate;
    	document.getElementById("eDate").value=startDate;
    	showMessage("End Date should be greater than Start Date",'error');
    	return false;
    }
	

	
	getConfirmDialog("Send Assignment", "Are you sure you want to save Assignment to selected students ?", function() {
		
		$('#sectionId').removeAttr('disabled');
	$('#actionType').val(157);
	var formContext = $("#genericSave");
	var formURL = formContext.attr("action");
	var formData = new FormData(formContext[0]);
	formData.append("menuId",this.menuId);
	
	doAjaxCall(formURL, 'POST', formData, function(data) {
		if(data!=null && data!=undefined){
			var dataArray = data.split("_");
			var status = dataArray[0].toUpperCase();
			
			if (status == "SUCCESS") {
				modalDialog.modal('hide');
				$("#menuTab_" + this.menuId).trigger("click");
				showMessage(data, "success");
					
			}else{
				showMessage(data, "error");
			}
		}
	}, false, false);
	});
}


//hostel Management start

function manageHostelAllocation(controllerMode, actionType, id, selectedData) {
	var formData = {
			controllerMode : parseInt(controllerMode),
			actionType : parseInt(actionType),
			id : id,
			selectedData : selectedData,
			menuId : this.menuId
		};
	doAjaxCall('instituteApp', 'POST', formData, function(data) {
		/*removeBgCurtain();*/
		$("#hostelPage").html(data);
	});
}



function hostelAllocation(controllerMode,actionType,id, selectedData)
{	

	
	var formData = {
			controllerMode : parseInt(controllerMode),
			actionType : parseInt(actionType),
			hostelAllocationId : parseInt(id),
			menuId : this.menuId
		};
	var buttons = [	
		{
			type : "button",
			label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='saveHostelAllocateId'></span>Save",
			className : "btn-sm btn-default",
			callback : function(e) {	
				 
				if (!$("#genericSave").valid()){
					return false;
					
				}else{
					saveHostelRoomsAllocation();
				}
					
				return false;
			}
		},
		{
			type : "cancel",
			label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
			className : "btn-sm btn-default",
			callback : null
		} ];
	bgCurtain();

	doAjaxCall(this.url, 'POST', formData, function(data) {
		getModalDialog('large', 'Manage Hostel Allocation', data, buttons, function() {
			getHostelRooms(9600,161,1);
			setHostelbuildings();
		});
});	
}

function getHostelRooms(controllerMode,actionType,type){
	var buildingids="";
	if(type==1 && $('#hostelallocationId').val()==0){
		$("[id^=buildIng_]").each(function(){
	
				buildingids+=$(this).attr('id').split("_")[1]+",";
		});
		
	}else{
		$("[id^=buildIng_]").each(function(){
			/*if($(this).attr('data-priority')!="0"){*/
				buildingids+=$(this).attr('id').split("_")[1]+",";
			/*}*/
		});
	}
	
	
		var formData = {
				controllerMode : parseInt(controllerMode),
				actionType : parseInt(actionType),
				buildingId : buildingids,
				menuId : this.menuId
			};
		
		doAjaxCall('instituteApp', 'POST', formData, function(data) {
			$("#hostelRooms").html(data);
			setSelectedHostelRooms();
		});	
}

function saveHostelRoomsAllocation(){

	var formData = {
			controllerMode : 9600,
			actionType : 162,
			year : $('#year').val(),
			hostelallocationId:$('#hostelallocationId').val(),
			allocationName : $('#allocationNameId').val(),
			description : $('#description').val(),
			programId : $('#programId').val().toString(),
			buildingId : $('#buildingIds').val(),
			roomId : $('#roomIds').val(),
			status : $('#status').val(),
			createdby:$('#createdby').val(),
			createddate:$('#createddate').val(),
			menuId : this.menuId
		};
	
	getConfirmDialog("Save Hostel Room Allocation", "Are you sure you want to Save Hostel Room Allocation ?", function() {
		
		
		doAjaxCall('instituteApp', 'POST', formData, function(data) {
			if(data!=null && data!=undefined){
				var dataArray = data.split("_");
				var status = dataArray[0].toUpperCase();
				
				if (status == "SUCCESS") {
					showMessage(data, "success");
					modalDialog.modal('hide');
					manageHostelAllocation(9600,159,0,"");
				}else{
					showMessage(data, "error");
				}
			}
		});
	});
	
}



function getCheckedRooms(){
	
	$("[id^=getRooms_").on("change",function(){
			var getdata=[];
			if($('#roomIds').val()!=''){
				getdata=JSON.parse($('#roomIds').val());
			}
			
		var id=$(this).attr("id").split("_")[2];
		if($(this).is(":checked")){
			var checkeddata={};
			checkeddata.id=id;
			checkeddata.priority=$('#getRoomPriority_'+$(this).attr("id").split("_")[1]+"_"+$(this).attr("id").split("_")[2]).val();
			getdata.push(checkeddata);
		}else{
			removeByAttr(getdata,'id',id);
		}
		$('#roomIds').val(JSON.stringify(getdata));
	});
	
	$("#parent_getRooms").on("change",function(){
		var getdata=[];
		if($('#roomIds').val()!=''){
			getdata=JSON.parse($('#roomIds').val());
		}
		if($(this).is(":checked")){
			selectOrUnselectHostelRooms(1);
			
		}else{
			selectOrUnselectHostelRooms(2);
			
		}
	});

	$("[id^=getRoomPriority_").on("change",function(){
		var id=$(this).attr("id").split("_")[2];
		if($('#getRooms_'+$(this).attr("id").split("_")[1]+"_"+$(this).attr("id").split("_")[2]).is(":checked")){
			var getdata=[];
			if($('#roomIds').val()!=''){
				getdata=JSON.parse($('#roomIds').val());
			}
		var id=$(this).attr("id").split("_")[2];
		removeByAttr(getdata,'id',id);
		var checkeddata={};
		checkeddata.id=id;
		checkeddata.priority=$(this).val();
		getdata.push(checkeddata);
	
		$('#roomIds').val(JSON.stringify(getdata));
		}
	});
	
}
function setHostelbuildings(){
	var buildingdata=[];
	$("[id^=buildIng_]").each(function(){
		var id=$(this).attr("id").split("_")[1];
		var checkeddata={};
		checkeddata.id=id;
		checkeddata.priority=$(this).attr('data-priority');
		buildingdata.push(checkeddata);
		$(this).val(checkeddata.priority);
	});
	$('#buildingIds').val(JSON.stringify(buildingdata));
}
function removeByAttr(arr, attr, value){
    var i = arr.length;
    while(i--){
       if( arr[i] 
           && arr[i].hasOwnProperty(attr) 
           && (arguments.length > 2 && parseInt(arr[i][attr]) === parseInt(value)) ){ 

           arr.splice(i,1);

       }
    }
    
}
function checkHostelBuildingPriority(thisReq){
	var selectedId=$(thisReq).attr('id');
	var selectedPriority= parseInt($(thisReq).attr('data-priority'));
	var selectedVal= parseInt($(thisReq).val());
	var resp=true;
if(selectedId.startsWith("buildIng")){
		$("#buildingInfo > tbody > tr").each(function(){
			var currentDrpDown=$(this).children().find('select');
			var roomCount=parseInt($(currentDrpDown).attr('data-roomCount'));
			var id=$(currentDrpDown).attr('id');
			var val=parseInt($(currentDrpDown).val());
			if((val!=0 && roomCount!=0) && (val==selectedVal && selectedId!=id)){
				resp=false;
				return false;
			}
		 });
	}
	
	if(!resp){
		$('#'+selectedId).val(selectedPriority);
		showIdMessage('Selected Priority already in use', 'error', selectedId, 'top');
	}else if(resp){
		
		$('#'+selectedId).attr('data-priority',selectedVal);
		var buildingdata=JSON.parse($('#buildingIds').val());
			var id=selectedId.split("_")[1];
			removeByAttr(buildingdata,'id',id);
			var checkeddata={};
			checkeddata.id=id;
			checkeddata.priority=selectedVal;
			buildingdata.push(checkeddata);
	
		$('#buildingIds').val(JSON.stringify(buildingdata));
	}
	}



function setSelectedHostelRooms(){
	
var data=JSON.parse($('#selectedrooms').val());
var sindex=Object.keys(data)
var getdata=[];
var allPages=hostelroomsallocation.column().nodes();
var priority=hostelroomsallocation.column(4).nodes();
$.each(allPages, function(index, currentValue)
		{
	var id=currentValue.getAttribute('data-value').split("_")[1];
	for(i in sindex){
		
		var room=data[i];
		if(id==room.RoomId){
			$('#getRooms_'+room.BuildingId+"_"+room.RoomId,allPages).prop('checked', true );
			//$('#getRooms_'+room.BuildingId+"_"+room.RoomId).prop('checked', true);
			//$('#getRoomPriority_'+room.BuildingId+"_"+room.RoomId).val(room.Priority);
			var checkeddata={};
			checkeddata.id=room.RoomId;
			checkeddata.priority=room.Priority;
			getdata.push(checkeddata);
		}
		

	}
		});
$.each(priority, function(index, currentValue)
		{
	var id=currentValue.getAttribute('data-value').split("_")[1];
	for(i in sindex){
		
		var room=data[i];
		if(id==room.RoomId){
			$('#getRoomPriority_'+room.BuildingId+"_"+room.RoomId,priority).val(room.Priority);
			//$('#getRooms_'+room.BuildingId+"_"+room.RoomId).prop('checked', true);
			//$('#getRoomPriority_'+room.BuildingId+"_"+room.RoomId).val(room.Priority);
			
		}
		

	}
		});

$('#roomIds').val(JSON.stringify(getdata));

}
function selectOrUnselectHostelRooms(type){
	var getdata=[];
	
	var allPages=hostelroomsallocation.column().nodes();
	var prioritypage=hostelroomsallocation.column(4).nodes();
	if(type==1){
		
	$.each(allPages, function(index, currentValue)
			{
		var buildingId=currentValue.getAttribute('data-value').split("_")[0];
		var roomid=currentValue.getAttribute('data-value').split("_")[1];
				$('#getRooms_'+buildingId+"_"+roomid,allPages).prop('checked', true );
			});
	$.each(prioritypage, function(index, currentValue)
			{
		var buildingId=currentValue.getAttribute('data-value').split("_")[0];
		var roomid=currentValue.getAttribute('data-value').split("_")[1];
				var priority=$('#getRoomPriority_'+buildingId+"_"+roomid,prioritypage).val();
				var checkeddata={};
				checkeddata.id=roomid;
				checkeddata.priority=priority;
				getdata.push(checkeddata);
			});
	
	$('#roomIds').val(JSON.stringify(getdata));
	}else{
		$.each(allPages, function(index, currentValue)
				{
			var buildingId=currentValue.getAttribute('data-value').split("_")[0];
			var roomid=currentValue.getAttribute('data-value').split("_")[1];
					$('#getRooms_'+buildingId+"_"+roomid,allPages).prop('checked', false );
				});
		$('#roomIds').val(JSON.stringify(getdata));
	}
}

function handleHostelOpenLine(type, controllerMode, actionType, id, selectedData) {
 	
	var message='';
if(type==3){
	message="Manage Registration Open Line:"+selectedData;
}else if(type==4){
	message="Manage Confirmation Open Line:"+selectedData;
}
	var formData = {
			type : type,
			controllerMode : parseInt(controllerMode),
			actionType : parseInt(actionType),
			menuId : this.menuId,
			manageDataId : id,
			selectedData : selectedData
		};
	
	var buttons = [
		{
			type : "button",
			label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='saveHostelAllocateId'></span>Save",
			className : "btn-sm btn-default",
			callback : function(e) {	
				saveOrUpdateHostelAllocationOpenLines();
				return false;
			}
		},
		{
			type : "cancel",
			label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
			className : "btn-sm btn-default",
			callback : null
		} ];
	
	bgCurtain();
	doAjaxCall(this.url, 'POST', formData, function(data) {
		getModalDialog('large', message, data, buttons, function() {
		});
	});	
}

function saveOrUpdateHostelAllocationOpenLines() {
 	
	var formData = {
			controllerMode : 9600,
			actionType : 164,
			openLinesId : $('#openLinesId').val(),
			description : $('#description').val(),
			startDate : $('#sDate').val(),
			endDate : $('#eDate').val(),
			status : $('#checkStatus').val(),
			yearId : $('#yearId').val(),
			type : $('#type').val(),
			menuId : this.menuId
		};
	 	
	getConfirmDialog("Save Or Update Hostel Allocation Open Lines", "Are you sure you want to Save Or Update Hostel Allocation Open Lines?", function() {
		
		doAjaxCall('instituteApp', 'POST', formData, function(data) {
			if(data != null && data != undefined) {
				var dataArray = data.split("_");
				var status = dataArray[0].toUpperCase();
				if (status == "SUCCESS") {
					showMessage(data, "success");
					modalDialog.modal('hide');
				} else {
					showMessage(data, "error");
				}
			}
		});
	});
}

function viewISAResultAnalyticsTemletes(controllerMode, actionType){
	
	 var rep=true;
	$(".mandatory").each(function() {
		if($(this).val()==0 || $(this).val()==''|| $(this).val()==null){
			rep=false;
			return;
		}
	});
	
	if(rep){
		
		var formData = {
				controllerMode : controllerMode,
				actionType : actionType,
				batchId : $("#batchId").val(),
				batchClassId : $("#getFacultyBatchClassId").val(),
				sectionId : $("#getFacultySectionId").val(),
				sectionName : $("#getFacultySectionId :selected").text(),
				subjectId:$("#SubjectId ").val(),
				subjectName:$("#SubjectId :selected").text(),
				menuId:this.menuId
			};
		bgCurtain();
		doAjaxCall(url, 'GET', formData, function(data) {
			$('#ISAResultAnalyticsTempletes').html("");
			$('#showISAStudents').html("");
			$('#ISAResultAnalyticsTempletes').html(data);
		});
	}
	else{
		showMessage("Please select all are required fields", "error");
	}
	
}

function viewISAResultAnalyticsStudentMarks(controllerMode,actionType,isaMasterId1,isaMasterId2){
	
	var isaType=1;
	var that=this;
	var formData={
			controllerMode:controllerMode,
			actionType:actionType,
			subjectId:$("#subjectId").val(),
			entityId:$("#entityId").val(),
			subjectCode:$("#subjectCode").val(),
			subjectBatchId:$("#subjectBatchId").val(),
			subType:$("#subType").val(),
			fsId:$("#fsId").val(),
			menuId:this.menuId,
			isaType:isaType,
			isaMasterId:isaMasterId1
	}

	bgCurtain();
	doAjaxCall(this.url,'POST',formData,function(data){
		removeBgCurtain();
		$("#showISAStudents").html(data);
		$("#isamaster_"+isaMasterId2).css("")
		$("#showMarksFor").html($("#isamaster_"+isaMasterId2).attr("name"));
		$("#getStudentISATempId").val(isaMasterId1);
		$("#currentISATempId").val(isaMasterId2);

		
	});
}

function handleISAResulthidepanel(){
	
	var x=$('#hideshow').attr('show-status');
	if(x==1){
       $('#isaresultform').css("display", "none");
       $('#hideshow').attr('show-status','0');
       $('#hideshow').html('<span class="fa fa-angle-double-right fa-2x" aria-hidden="true"></span> show filter');
     }else{
       $('#isaresultform').css("display", "block");
       $('#hideshow').attr('show-status','1');
       $('#hideshow').html('<span class="fa fa-angle-double-left fa-2x" aria-hidden="true"></span> hide filter');
     }
}

function generateGradeCardByExcelSheet(){

window.open('reports/Reports/downloadGradeCardByExcelSheet','_blank');

}

//bootstrap code start

function getBootstrapStudentsInfo(controllerMode,actionType){

	
	if (!$("#genericSave").valid())
		return false;
	
	var formData={
			controllerMode:controllerMode,
			actionType:actionType,
			batchId:$("#batch1").val(),
			programId:$("#program1").val().toString(),
			classId:$("#class1").val(),
			menuId:this.menuId

				
	}
	bgCurtain();
	doAjaxCall(this.url, 'POST', formData, function(data) {
		$("#showStudentsBasedOnSelection").html(data);
		removeBgCurtain();
	});
}


function showBootStrapStudentsCountToMakeGroup(controlleMode, actionType, assignType,manageDataId) {
		

		var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			manageDataId : manageDataId,
			assignType : assignType,
			menuId:this.menuId
		}
		
	var buttons = [
		{
			type : "button",
			label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='saveBootstarpId'></span>OK",
			className : "btn-sm btn-default",
			callback :null
		},
		{
			type : "cancel",
			label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
			className : "btn-sm btn-default",
			callback : null
		} ];
	
	bgCurtain();
	doAjaxCall('appAdmin', 'POST', formData, function(data) {
		getModalDialog('large', 'Bootstrap students', data, buttons, function() {
			
			$('#actionType').val(1);
			$('#manageDataId').val(manageDataId);
			$('#assignType').val(assignType);
			$('#menuId').val(this.menuId);
			showBootstrapStudents(controllerMode,actionType,manageDataId,assignType,menuId);
		});
	});	
	
	}


function manageStudentGroups(controllerMode, actionType, program, batch){
	
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			batch:batch,
			program:program,
			menuId:this.menuId
		}

	bgCurtain();
	doAjaxCall('appAdmin', 'post', formData,function(data) {
		removeBgCurtain();
		$('#showStudentsAssignedToStudentClass').html(data);
	});
}


function saveBootstarpStudentEachGroups(){
	
	if (!$("#genericSave1").valid())
		return false;
	
	var controllerMode =  $('#controllerMode').val();
	var actionType = $('#actionType').val();
	var manageDataId = $('#manageDataId').val();
	var assignType =$('#assignType').val();
	var menuId=$('#menuId').val();

	var getGroupOfData=[];
	var noOfGroups=getInteger($('#noOfGroups').val(),0);
	
	if(assignType==1){
		for (var i = 0; i < noOfGroups; i++)
		{
			var groupData={};
			groupData.id=(i+1);
			groupData.groupName=$('#groupName_'+i).val();
			groupData.dataValue=$('#groupName_'+i).attr('data-value');
			getGroupOfData.push(groupData);
		}
	}else{
		for (var i = 0; i < noOfGroups; i++)
		{
			var groupData={};
			groupData.id=(i+1);
			groupData.groupStrength=$('#noOfStudsEachGroup_'+i).val();
			groupData.groupName=$('#groupName_'+i).attr('data-value');
			getGroupOfData.push(groupData);
		
		}
	}
	
	$('#GroupOfData').val(JSON.stringify(getGroupOfData));
	$('#assignType').val(assignType);
	var messageTitle="Save Or Update Bootstrap Groups";
	var messageBody="Are you sure you want to Save Or Update bootstrap groups?";
	if(assignType==2){
		messageTitle="Save Or Update Bootstrap students for each groups";
		messageBody="Are you sure you want to Save Or Update Bootstrap students for each groups?";
	}
	var formData2 = new FormData($('#genericSave1')[0]);
	
	getConfirmDialog(messageTitle, messageBody, function() {
		bgCurtain();
		doAjaxCall('appAdmin', 'POST', formData2,
			function(data) {
					removeBgCurtain();
					var dataArray = data.split("_");
					var status = dataArray[0].toUpperCase();
					if (status == "SUCCESS") {
						showMessage(data, "success");
						if(assignType==2){
							showBootstrapStudents(controllerMode,actionType,manageDataId,assignType,this.menuId);
							showCreatedGroups();
						}
					} else {
						showMessage(data, "error");
					}
			}, false, false);
	});
}

function showCreatedGroups(){
	var formData ={
			controllerMode : 7600,
			actionType : 165,
			manageDataId:$('#manageDataId').val(),
			menuId:this.menuId
	}
	
	doAjaxCall('appAdmin', 'POST', formData,
			function(data) {
		$('#showCreatedGroups').html(data);
	});
}

function showEachGroupStudentsDetails(bootstrapId,bootstrapGroupsId){
	var formData = {
			controllerMode : 7600,
			actionType : 166,
			bootstrapId : bootstrapId,
			bootstrapGroupsId :bootstrapGroupsId,
			menuId:this.menuId
		}
	
	var buttons = [
		{
			type : "button",
			label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='assignedStdsBootstarpId'></span>OK",
			className : "btn-sm btn-default",
			callback : function(e) {
				modalDialog.modal('hide');
				return false;
			}
		},
		{
			type : "cancel",
			label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
			className : "btn-sm btn-default",
			callback : null
		} ];
	
	bgCurtain();
	doAjaxCall('appAdmin', 'POST', formData, function(data) {
		getModalDialog('large', 'Assigned Bootstrap students', data, buttons, function() {
			
		});
	});	
}

function callBootstarpGroups(){
	
	$("#makeBootstarpGroups")
	.on(
			"click",
			function() {
				
				$("#addBootstarpGroups")
						.append(
								"<div id='groupDiv_"+fileId1+"' class='form-group'>" +
										" <div class='col-md-3'><input type='text' name='groupName_"+fileId1+"' id='groupName_"+fileId1+"' placeholder='Group Name' required></div>"+
									    " <div class='col-md-2'><a class='btn btn-default btn-xs pull-right' id='groupRemove1_"+fileId1+"'>"
										+ "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span> Remove</a></div>"
										+ "</div>");

				fileId1++;
				$('#noOfGroups').val(fileId1);
			});
	
	$("#addBootstarpGroups").on("click",
			"[id^=groupRemove1_]", function() {
				$(this).parents("[id^=groupDiv_]").remove();
				fileId1--;
				$('#noOfGroups').val(fileId1);
			});
}

function showDivededGroups(){
	
	if(getInteger($('#createdGroupSize').val(),0)==0){
		
		showMessage("Please create bootstrap groups before assign students.", "error")
		return false;
	}
	
	var noOfGroups=getInteger($('#noOfGroups').val(),0);
	
	var unAssignedStudents=getInteger($('#unAssignedStudents').val(),0);
	var assignedStudents=getInteger($('#assignedStudents').val(),0);
	var totalStudents=assignedStudents+unAssignedStudents;
	
	if(totalStudents < noOfGroups){
		showMessage("Number of  groups should not more than number of total students.", "error")
		return false;
	}
	
	var studentspergroup=totalStudents/noOfGroups;
	
	var srNo=0;
	var groupName="GroupName";
	var batchClass=0;
	
	var remainStudents = totalStudents % noOfGroups;
	var toAssignStudents = totalStudents / noOfGroups;
	var previousEnd=0;
	
	for (var i = 0; i < noOfGroups; i++)
	{
		var start = previousEnd;
		var noRows = getInteger(toAssignStudents);
		if (i < remainStudents)
			noRows = getInteger(toAssignStudents + 1);
		
		previousEnd=start+noRows;
		$('#noOfStudsEachGroup_'+i).val(noRows);
		
	}
	
}



function manageBootStrapStudentsToMakeGroup(controlleMode, actionType, assignType,manageDataId) {

	var formData = {
		controllerMode : controllerMode,
		actionType : actionType,
		manageDataId : manageDataId,
		assignType :assignType,
		menuId:this.menuId
	}
	
	
var buttons = [
	{
		type : "button",
		label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='saveBootstarpId'></span>OK",
		className : "btn-sm btn-default",
		callback : function(e) {
			modalDialog=firstDialogBox1;
			modalDialog.modal('hide');
			getBootstrapStudentsInfo(7600,6);
			return false;
		}
	},
	{
		type : "cancel",
		label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
		className : "btn-sm btn-default",
		callback : null
	} ];

bgCurtain();
doAjaxCall('appAdmin', 'POST', formData, function(data) {
	getModalDialog('large', 'Bootstrap students', data, buttons, function() {
	
		tempModel1=modalDialog;
			
		
		firstDialogBox1 =$.extend(true,{},tempModel1);
		$('#actionType').val(1);
		$('#manageDataId').val(manageDataId);
		$('#assignType').val(assignType);
		$('#menuId').val(this.menuId);
		showBootstrapStudents(controllerMode,actionType,manageDataId,assignType,this.menuId);
		showCreatedGroups();
	});
});	

}
function showBootstrapStudents(controllerMode,actionType,manageDataId,assignType,menuId){
	
	var formData = {
			controllerMode : controllerMode,
			actionType : 27,
			manageDataId : manageDataId,
			assignType :assignType,
			menuId:this.menuId
		}
	bgCurtain();
	doAjaxCall('appAdmin', 'POST', formData, function(data) {
		removeBgCurtain();
			$('#showCoutOfStds').html(data);
		
	});	
}



function manageBootstrapActivity(activityType,bootstrapId,bootstrapGroupsId){
	var formData = {
			controllerMode : 7600,
			actionType : 167,
			activityType : activityType,
			bootstrapId : bootstrapId,
			bootstrapGroupsId :bootstrapGroupsId,
			menuId:this.menuId
		}
	
	var buttons = [
		{
			type : "button",
			label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='assignedStdsBootstarpId'></span>OK",
			className : "btn-sm btn-default",
			callback :null
		},
		{
			type : "cancel",
			label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
			className : "btn-sm btn-default",
			callback : null
		} ];
	
	bgCurtain();
	doAjaxCall('appAdmin', 'POST', formData, function(data) {
		getModalDialog('large', 'Manage Bootstrap Activity', data, buttons, function() {
			
		});
	});	
}

function getBootstrapData(id){
	getCombobox('/Academy/a/i/getBootstrapActivity', 'activityName_'+id,null,null,function(){
			if($('#activityName_'+id).val()!=null && $('#activityName_'+id).val()!="") {
				getBootstrapValue(id);
		}
		
		
	});
	
}

function getBootstrapValue(id){
	var formData = {
			controllerMode : 7600,
			actionType : 168,
			bootstrpActivityId : $('#activityName_'+id).val(),
			menuId:501
		}
	
	doAjaxCall('appAdmin', 'POST', formData, function(data) {
		$('#noOfBatches_'+id).val(data);
	});
}


function addBootstrapActivitydays(){

	$("#makeBootstarpActivityDay")
	.on(
			"click",
			function() {
				activityGroups=activityGroups+1;
				$("#addBootstarpActivityGroups")
						.append( 
								"<div id='activityGroup_"+activityGroups+"' class='form-group'> <div class='col-md-5'> "+
											"<div class='input-group date form_date' data-date='' data-date-format='dd MM yyyy' data-link-field='activityDate_"+activityGroups+"' " +
												"data-link-format='yyyy-mm-dd'><input class='form-control' type='text' name='aDate_"+activityGroups+"'" +
												"id='aDate_"+activityGroups+"' value='' readonly data-parent='6' data-link-field='activityDate_"+activityGroups+"'>"+
												"<span class='input-group-addon'><span class='glyphicon glyphicon-remove'></span></span> " +
												"<span class='input-group-addon'><span class='glyphicon glyphicon-calendar'></span></span>" +
												" <input type='hidden' id='aDate_"+activityGroups+"' name='aDate_"+activityGroups+"' value=''/>" +
												"</div></div>" +
												"<div class='col-md-3'>" +
												"<select id='activityName_"+activityGroups+"' name='activityName_"+activityGroups+"' class='form-control'" +
												"data-selected='' required='required' onchange='getBootstrapValue("+activityGroups+")'>" +
												"</select></div>" +
												"<div class='col-md-3'><input type='text' name='noOfBatches_"+activityGroups+"' id='noOfBatches_"+activityGroups+"' placeholder='' ></div>" +
												"<div class='col-md-1'><a class='btn btn-default btn-xs pull-right' id='activityGroupRemove1_"+activityGroups+"'>" +
												"<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span> Remove</a></div>" +
												"</div>");

				setDateTimePicker();
				getBootstrapData(activityGroups);
			
			});
	
	$("#addBootstarpActivityGroups").on("click",
			"[id^=activityGroupRemove1_]", function() {
				$(this).parents("[id^=activityGroup_]").remove();
				activityGroups--;
			});
	
	
}



function saveBsStudentActivities(){
	
	
	
	var setBootstrapActivityData=[];
var fl=false;
		for(var i=0;i<=activityGroups;i++) {
			var activityGroupData={};
			activityGroupData.bootstrapId=$('#bootstrapId').val();
			activityGroupData.bootstrapGroupsId=$('#bootstrapGroupsId').val();
			if($('#aDate_'+i).val()!="" && $('#aDate_'+i).val()!=null && $('#aDate_'+i).val()!=undefined)
				{activityGroupData.bootstrapActivityDate=$('#aDate_'+i).val();}else{fl=true}
			
			$('#activityName_'+i).prop('disabled',false);
			activityGroupData.bootstrapActivityId=$('#activityName_'+i).val();
			$('#activityName_'+i).prop('disabled',true);
			activityGroupData.bootstrapActivityBatches=$('#noOfBatches_'+i).val();
			setBootstrapActivityData.push(activityGroupData);
}
	 
		if(fl){
		 showMessage("Activity date Shoud not empty!", "error");
		 return false;
	 }
	 
	 var bootstrapActivityData=JSON.stringify(setBootstrapActivityData);
	 
	 var formData = {
				controllerMode : 7600,
				actionType : 169,
				bootstrapId:$('#bootstrapId').val(),
				bootstrapGroupsId:$('#bootstrapGroupsId').val(),
				bootstrapActivityData : bootstrapActivityData,
				menuId:501
			}
	 bgCurtain();
		doAjaxCall('appAdmin', 'POST', formData, function(data) {
			removeBgCurtain();
			var dataArray = data.split("_");
			var status = dataArray[0].toUpperCase();
			if (status == "SUCCESS") {
				showMessage(dataArray[1], "success");
			} else {
				showMessage(dataArray[1], "error");
			}
		});
}



function manageBootstrapActivityGroup(bootstrapId,bootstrapGroupsId){
	var formData = {
			controllerMode : 7600,
			actionType : 167,
			activityType : 2,
			bootstrapId : bootstrapId,
			bootstrapGroupsId :bootstrapGroupsId,
			menuId:this.menuId
		}
	
	var buttons = [
		{
			type : "button",
			label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='assignedStdsBootstarpId'></span>OK",
			className : "btn-sm btn-default",
			callback :null
		},
		{
			type : "cancel",
			label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
			className : "btn-sm btn-default",
			callback : null
		} ];
	
	bgCurtain();
	doAjaxCall('appAdmin', 'POST', formData, function(data) {
		getModalDialog('large', 'Manage Bootstrap Activity', data, buttons, function() {
			
		});
	});	
}

function divideStudentsToSubGroups(bootstrapId,bootstrapGroupsId,bootstrapGroupActivityId,id){
	
	var formData = {
			controllerMode : 7600,
			actionType : 170,
			activityType : 2,
			bootstrapId : bootstrapId,
			bootstrapGroupsId :bootstrapGroupsId,
			bootstrapGroupActivityId:bootstrapGroupActivityId,
			noBatches:$('#noOfBatches_'+id).val(),
			menuId:this.menuId
		}
	
	bgCurtain();
	doAjaxCall('appAdmin', 'POST', formData, function(data) {
			$('#showCreatedSubGroups').html('');
			$('#showCreatedSubGroups').html(data);
	});	
	
}



function viewSubGroupBSStudents(type,manageDataId,selectedData){
	
	
	var formData = {
			controllerMode : 7600,
			actionType : 171,
			type : 1,
			bootstrapId : manageDataId,
			selectedData :selectedData,
			menuId:this.menuId
		}
	
	var buttons = [
		{
			type : "button",
			label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='subGroupStdsBootstarpId'></span>OK",
			className : "btn-sm btn-default",
			callback : function(e) {
				modalDialog.modal('hide');
				return false;
			}
		},
		{
			type : "cancel",
			label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
			className : "btn-sm btn-default",
			callback : null
		} ];
	
	bgCurtain();
	doAjaxCall('appAdmin', 'POST', formData, function(data) {
		getModalDialog('large', ' Sub Group Students ', data, buttons, function() {
			
		});
	});	
}

function sendMailForSubGroupBSStudents(type,manageDataId,selectedData){
	
	
	var formData = {
			controllerMode : 7600,
			actionType : 172,
			type : type,
			bootstrapId : manageDataId,
			selectedData :selectedData,
			menuId:this.menuId
		}
	
	bgCurtain();
	doAjaxCall('appAdmin', 'POST', formData, function(data) {
		removeBgCurtain();
		var dataArray = data.split("_");
		var status = dataArray[0].toUpperCase();
		if (status == "SUCCESS") {
			showMessage(dataArray[1], "success");
		} else {
			showMessage(dataArray[1], "error");
		}
	});	
}



function sendSmsForSubGroupBSStudents(type,manageDataId,selectedData){
	
	var formData = new FormData($('#genericSave')[0]);
	formData.append("type", type);
	formData.append("bootstrapId", manageDataId);
	formData.append("selectedData", selectedData);
	formData.append("menuId", this.menuId);
	
	
	getConfirmDialog("Send Messages", "Are you sure you want to send ?", function(data) {
		bgCurtain();
		doAjaxCall('sendBootstrapMessages/sendMessagesToBootstrapScheduler', 'POST', formData, function(data) {
			if (data.indexOf("SUCCESS") > -1) {
				removeBgCurtain();
				showMessage("Messages sent successfully","success");
				removeBgCurtain();
				
			} else {
				showMessage("Not sent! Try again", "error");
			}
		}, false, false);
	}, false);	
}


function viewStudentsToSubGroups(bootstrapId,bootstrapGroupsId,bootstrapGroupActivityId,id){
	
	var formData = {
			controllerMode : 7600,
			actionType : 175,
			activityType : 2,
			bootstrapId : bootstrapId,
			bootstrapGroupsId :bootstrapGroupsId,
			bootstrapGroupActivityId:bootstrapGroupActivityId,
			noBatches:$('#noOfBatches_'+id).val(),
			menuId:this.menuId
		}
	
	bgCurtain();
	doAjaxCall('appAdmin', 'POST', formData, function(data) {
			$('#showCreatedSubGroups').html('');
			$('#showCreatedSubGroups').html(data);
	});	
	
}
//bootstrap code end


//send messages start


function handleNewMessage(type, controllerMode, actionType,id, selectedData) 
{
	bgCurtain();
	var formData = {
		controllerMode : controllerMode,
		actionType : actionType,
		menuId : this.menuId,
		id : id,
		messageType:selectedData
	};

	var title = getDialogMessage(controllerMode, actionType, id, selectedData);
	doAjaxCall(this.url, 'GET', formData, function(data) {
		$('#replaceMessage').html(data);
		removeBgCurtain();
	});
}


function getDetailsBasedOnsendMessageType(url, mode, methodType, selectedData, divIdToReplace, selectedValue, anyText,divReplaceCallBack) 
{
	if (selectedValue && selectedValue!=0)
		handleDivReplaceWithData(url, mode, methodType, selectedData, divIdToReplace, selectedValue, anyText,divReplaceCallBack);
};



function getMessageRecipientsBasedOnSelection(formData, title, typeOfSend, callBack) {
	$('#notification_title').attr('required',false);
	$('#notification_message').attr('required',false);
	
	/*if (!$("#genericSave").valid())
		return false;*/
	var pgm=$('#program').val();
	var sem=$('#semester').val();
	var sec=$('#section').val();
	var inst=$('#instId').val();
		if(!$('#sendToAll').is(':checked') &&  !$('#sendToAll_TargetNumbersOrMails').is(':checked') && ((pgm==null || pgm=="" || pgm==undefined)
				|| (sem==null || sem=="" || sem==undefined)  || (inst==null || inst=="" || inst==undefined) )){
			showMessage("Please select Institution,Program and Semester/class!", "error");
			//showMessage("Please select Program and Semester/class!", "error");
			return false;
		}else{
			
			
			if($('#sendToAll_TargetNumbersOrMails').is(':checked')){
			
			if($('#targetNumbersOrMails').val()==null || $('#targetNumbersOrMails').val()=='' || $('#targetNumbersOrMails').val()==undefined)
				{
				showMessage("Please enter target number!", "error");
				return false;
				}
		}
		}
	
		if($('#selectAll_instId').is(':checked') && $('#selectAll_program').is(':checked') && $('#selectAll_semester').is(':checked') && $('#selectAll_section').is(':checked')){
			$('#sendToAll').prop('required', true);
			if (!$("#genericSave").valid())
				return false;
		}else{
			$('label#sendToAll-error').html('');
			$('#sendToAll').attr('required',false);
			$('#sendToAll').attr('aria-invalid', false);
		}
		
	var formData = new FormData($('#genericSave')[0]);
	formData.append("notificationType", 0);
	
	var instIdText = [];
	$("#instId :selected").each(function(i, sel) {
		instIdText.push($(sel).text());
	});
	formData.append("selectedInst", $('#instId').val());
	formData.append("selectedInstText", instIdText);
	

	var programText = [];
	$("#program :selected").each(function(i, sel) {
		programText.push($(sel).text());
	});
	formData.append("selectedProgram", $('#program').val());
	formData.append("selectedProgramText", programText);
	
	
	var semesterText = [];
	$("#semester :selected").each(function(i, sel) {
		semesterText.push($(sel).text());
	});
	formData.append("selectedSemester", $('#semester').val());
	formData.append("selectedSemesterText", semesterText);
	var sectionText = [];
	$("#section :selected").each(function(i, sel) {
		sectionText.push($(sel).text());
	});
	formData.append("selectedSection", $('#section').val());
	formData.append("selectedSectionText", sectionText);


	formData.append("controllerMode", 7620);
	formData.append("actionType", 96);
	formData.append("menuId",this.menuId);
	
	var that = this;
	bgCurtain();

	doAjaxCall('appAdmin', 'POST', formData,
			function(data) {
					removeBgCurtain();
					$('#messageRecipientsDiv').show();
					$('#messageRecipients').html(data);
					$('#notification_title').attr('required',true);
					$('#notification_message').attr('required',true);
					if(typeof callBack==='function')
						{
						callBack();
						}

			}, false, false);
	
	
	
}


function handleSendMessages(formData, title, typeOfSend) {
	
	
	var pgm=$('#program').val();
	var sem=$('#semester').val();
	var sec=$('#section').val();
	var inst=$('#instId').val();
	
	if(!$('#sendToAll').is(':checked') &&  !$('#sendToAll_TargetNumbersOrMails').is(':checked') && ((pgm==null || pgm=="" || pgm==undefined)
			|| (sem==null || sem=="" || sem==undefined) || (inst==null || inst=="" || inst==undefined))){
		
		showMessage("Please select Institution,Program and Semester/class!", "error");
			return false;
		}else{
			
			
			if($('#sendToAll_TargetNumbersOrMails').is(':checked')){
			
			if($('#targetNumbersOrMails').val()==null || $('#targetNumbersOrMails').val()=='' || $('#targetNumbersOrMails').val()==undefined)
				{
				showMessage("Please enter target number!", "error");
				return false;
				}
		}
		}
	
	if($('#selectAll_instId').is(':checked') && $('#selectAll_program').is(':checked') && $('#selectAll_semester').is(':checked') && $('#selectAll_section').is(':checked')){
		$('#sendToAll').prop('required', true);
	}
	
	/*$('#selectAll_program').prop('checked',false);
	$('#selectAll_semester').prop('checked',false);
	$('#selectAll_section').prop('checked',false);*/
	
	if (!$("#genericSave").valid())
		return false;
	
	
	
	
	var formData = new FormData($('#genericSave')[0]);
	formData.append("notificationType", 0);
	
	var instIdText = [];
	$("#instId :selected").each(function(i, sel) {
		instIdText.push($(sel).text());
	});
	formData.append("selectedInst", $('#instId').val());
	formData.append("selectedInstText", instIdText);
	
	
	var programText = [];
	$("#program :selected").each(function(i, sel) {
		programText.push($(sel).text());
	});
	formData.append("selectedProgram", $('#program').val());
	formData.append("selectedProgramText", programText);
	
	var semesterText = [];
	$("#semester :selected").each(function(i, sel) {
		semesterText.push($(sel).text());
	});
	formData.append("selectedSemester", $('#semester').val());
	formData.append("selectedSemesterText", semesterText);
	
	var sectionText = [];
	$("#section :selected").each(function(i, sel) {
		sectionText.push($(sel).text());
	});
	formData.append("selectedSection", $('#section').val());
	formData.append("selectedSectionText", sectionText);
	
	
	formData.append("controllerMode", 7620);
	formData.append("actionType", 1);
	formData.append("menuId", this.menuId);
	
	if($('#messageRecipientsDataTable').length > 0) {
		if(selectedSendMessagesUsers && selectedSendMessagesUsers.length <= 0) {
			 showMessage('Please select the users to send message.', 'error');
			 return false;
		}
		formData.append("selectedNotificationUsers", JSON.stringify(selectedSendMessagesUsers));
		formData.append("IsDataBaseFetch", "0");
	} else {
		formData.append("IsDataBaseFetch", "1");
	}
	
	getConfirmDialog("Send Messages", "Are you sure you want to send ?", function(data) {
		bgCurtain();
		doAjaxCall('sendMessages/sendMessagesScheduler', 'POST', formData, function(data) {
			if (data.indexOf("SUCCESS") > -1) {
				removeBgCurtain();
				showMessage("Messages sent successfully","success");
				removeBgCurtain();
				
			} else {
				showMessage("Not sent! Try again", "error");
			}
		}, false, false);
	}, false);
	
	return false;
}



function resetSendMessageSearch(){
	
	$("#program").prop('disabled', false);
	$("#semester").prop('disabled', false);
	$("#section").prop('disabled', false);
	$("#instId").prop('disabled', false);
	$('#program').val('');
	$('#semester').val('');
	$('#section').val('');
	$('#instId').val('');
	$('#sendToAll').prop('checked',false);
	$('#sendToAll_TargetNumbersOrMails').prop('checked',false);
	
	$('#selectAll_program').prop('checked',false);
	$('#selectAll_semester').prop('checked',false);
	$('#selectAll_section').prop('checked',false);
	$('#selectAll_instId').prop('checked',false);
	$('#messageRecipients').html('');
}


function clearSendMessageSearch(){
	
	$('#notification_title').val('');
	$('#notification_message').val('');
	$('#targetNumbersOrMails').val('');
	
}

function handleManageRoomUsers(controllerMode, actionType, id, selectedData) {
	
	var buttons = [
		
		{
			type : "cancel",
			label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
			className : "btn-sm btn-default",
			callback : null
		} ];
	
	
	var formData = {
			controllerMode : parseInt(controllerMode),
			actionType : parseInt(actionType),
			id : id,
			selectedData : selectedData,
			menuId : this.menuId
		};
	doAjaxCall('instituteApp', 'POST', formData, function(data) {

		/*removeBgCurtain();*/
		//$("#adminContent").html(data);
        getModalDialog('large', 'Manage Users', data, buttons, function(){
    		getFacultyData();
    		$("#buildingid").val(id);


       });

	});
}
		
	
	function addBuildingUserMapping() {
		var buildingId=$("#buildingid").val();
		var assignUserId=$("#assignUserId").val();
		if(assignUserId=="")
			{
			showMessage("Please Select Users", "error");
			return false;

			}
		var userid=takeValue(facultyInfoJson);
		var formData = {
				controllerMode :383,
				actionType :174,
				userId:userid,
				menuId : this.menuId,
				buildingId:buildingId
				
			};
		doAjaxCall('instituteApp', 'POST', formData, function(data) {

			/*removeBgCurtain();*/
			var dataArray = data.split("_");
			var status = dataArray[0].toUpperCase();
			var statusResp = dataArray[1];
			if (status == "SUCCESS") {
				showMessage(statusResp, "success");
				$(".close").click();
				$("#assignUserId").val("");
              handleManageRoomUsers(383,173,buildingId,"");
			}else{
				showMessage(statusResp, "error");
			}
			
		});
	}
			

function showDataList(value,dataListId,inuptId)
{
	$('#'+dataListId).empty();
	var rep="";
	if(value){
	var name=value.trim().toUpperCase();
	var count=0;
		for(var f in facultyJson){
			if(f.indexOf(name)>=0){
				rep+=facultyJson[f];
				count++;
				if(count==10)break;
			}
	}
	}
			$('#'+dataListId).append(rep);
		  if(name && name.indexOf("@")>=0){
			  var selectedVal=$('#'+dataListId+" option").val();
			   if(selectedVal){
				   $("#"+inuptId).val(selectedVal);
				   return $("#"+inuptId).val();  
			   }
				
		  }
	  
}


var facultyValue="";
var dt="";
function getFacultyData(){
	$("#assignUserId").on('input',function(){
	
		var thisReq=$(this);
		var enteredValue = $(thisReq).val();
	    var currentDataList=$(thisReq).attr('list');
	    
	    var respVal=showDataList(enteredValue,currentDataList,$(thisReq).attr('id'));
	    if(respVal){
	    	enteredValue=respVal;
	    }
	   $('#'+currentDataList + ' option').filter(function() {
		  			if($(this).val() === enteredValue && enteredValue){
		  				facultyValue=$(this).attr('data-value');
		  				$('#'+currentDataList).empty();
		  				return facultyValue;
		  		}
	       });	  
	    return facultyValue ; // contains value
	});
	
}



function takeValue(facultyInfoJson){
	 var userId ="";
	  var FirstName = "";
	  var ShortName = "";
	  var flag = "";
	  var emailId = "";
	  var FacultyDeptName = "";

	for(var i = 0; i < facultyInfoJson.length; i++)
	{
	  if(facultyInfoJson[i].UserId == facultyValue)
	  {
		  userId = facultyInfoJson[i].UserId;
		  emailId = facultyInfoJson[i].Email;
		  FirstName = facultyInfoJson[i].FirstName;
		   ShortName = facultyInfoJson[i].ShortName;
		   FacultyDeptName = facultyInfoJson[i].FacultyDeptName.trim().toUpperCase();
	  }	  
	}
	return userId;
}
function getSelectedSendMessagesUsers(pushSendMessagesDetailsJson)
{
	selectedSendMessagesUsers=[];
	
	var messageType=$('#messageType').val();
	
	var sendMessagesDetails=$.parseJSON(pushSendMessagesDetailsJson);
	$.each(sendMessagesDetails, function(index, value){
		var selectedUsers={};
		if(value && messageType==1)
			{
			 selectedUsers.deviceRegistrationId=value.DeviceRegistrationId;
			 selectedUsers.deviceType=value.DeviceType;
			 selectedSendMessagesUsers.push(selectedUsers);
			}
		else if(value && (messageType == 3)) {
			 selectedUsers.email=value.Email;
			 selectedUsers.mobile=value.Mobile;
			 selectedSendMessagesUsers.push(selectedUsers);
		}
	});
	
	
}

function handleAvailableCheckedUsers()
{
	$("#checkAllRegisteredUsers").off('click');
	$("#checkAllRegisteredUsers").on('click',function(){
		
		
		var allPages = messageRecipientsDataTable.column().nodes();
		if($(this).prop('checked')==true)
			{
			selectedSendMessagesUsers=[];
			$('input[type="checkbox"]', allPages).prop('checked', true);
			var messageType=$('#messageType').val();
			
			
			$.each(allPages, function(index, currentValue)
					{
				var selectedUsers={};
				if(selectedUsers && messageType==1)
				{
					if(currentValue.hasAttribute('data-value') && currentValue.hasAttribute('data-devicetype'))
					{
						var clickedDeviceRegistrationId= currentValue.getAttribute('data-value');
						var clickedDeviceType= currentValue.getAttribute('data-devicetype');
						
						selectedUsers.deviceRegistrationId=clickedDeviceRegistrationId;
						 selectedUsers.deviceType=clickedDeviceType;
						 selectedSendMessagesUsers.push(selectedUsers);
					}
				 
				}
				else if(selectedUsers && (messageType==2 || messageType==3 || messageType==6))
				{
					if(currentValue.hasAttribute('data-email') ||currentValue.hasAttribute('data-mobile'))
					{
						var clickedEmail=currentValue.getAttribute('data-email');
						var clickedMobile=currentValue.getAttribute('data-mobile');
						
						 selectedUsers.email=clickedEmail;
						 selectedUsers.mobile=clickedMobile;
						 selectedSendMessagesUsers.push(selectedUsers);
					}
				}
			});
			}
		else
			{
				$('input[type="checkbox"]', allPages).prop('checked', false);
				selectedSendMessagesUsers=[];
			}
	});
	$('input[id^=registeredUsers]').off('click');
	$('input[id^=registeredUsers]').on('click', function()
			{
				var messageType=$('#messageType').val();
		
				var clickedDeviceRegistrationId= $(this).attr('data-value');
				var clickedDeviceType=$(this).attr('data-devicetype');
				var clickedEmail=$(this).attr('data-email');
				var clickedMobile=$(this).attr('data-mobile');
				
				if($(this).prop('checked')==true)
						{
					var selectedUsers={};
						if(selectedUsers && messageType==1)
						{
						 selectedUsers.deviceRegistrationId=clickedDeviceRegistrationId;
						 selectedUsers.deviceType=clickedDeviceType;
						 selectedSendMessagesUsers.push(selectedUsers);
						}
						else if(selectedUsers && (messageType==2 || messageType==3 || messageType==6 ))
						{
							 selectedUsers.email=clickedEmail;
							 selectedUsers.mobile=clickedMobile;
							 selectedSendMessagesUsers.push(selectedUsers);
						}
				
					$(this).prop('checked',true);
				}
				else
				{
					selectedSendMessagesUsers=$.each(selectedSendMessagesUsers, function(index, selectedUsers){
						if(selectedUsers && messageType==1)
							{
							if(selectedUsers.deviceRegistrationId===clickedDeviceRegistrationId && clickedDeviceType==selectedUsers.deviceType)
								{
								selectedSendMessagesUsers.splice(index,1);
								$("#checkAllRegisteredUsers").prop('checked', false);
								return false;
								}
							
							}
						else if(selectedUsers && (messageType==2 || messageType==3 || messageType==6))
							{
							if(selectedUsers.email=clickedEmail || clickedMobile==selectedUsers.mobile)
								{
								selectedSendMessagesUsers.splice(index,1);
								$("#checkAllRegisteredUsers").prop('checked', false);
								return false;
								}
							}
					});
					
				}
			});
}

function multiSelectBoxesOfSendMessages() {
	$('[id^=selectAll]').off('click');
	$('[id^=selectAll]').on('click',function() {
		var idArray = this.id.split("_");
		var selectedVal = idArray[1];
		$('label#sendToAll-error').html('');
		$('#sendToAll').attr('required',false);
		$('#sendToAll').attr('aria-invalid', false);
		if ($(this).is(":checked")) {
			$('#' + selectedVal + ' option').prop('selected', true);
			
		} else
			$('#' + selectedVal + ' option').prop('selected', false);
	});
	
	$('[id^=sendToAll]').off('click');
	$('[id^=sendToAll]').on('click',function(e) 
		{
		
		 if(this.id==='sendToAll')
			{
			 if( $('#sendToAll_TargetNumbersOrMails').is(':checked'))
				{
				showMessage('You can not select two check boxes','error');
				e.preventDefault();
				return false;
				}
				
				$("#semester option").prop('selected', false);
				$("#section option").prop('selected', false);
				$("#program option").prop('selected', false);
				$("#instId option").prop('selected', false);
				$('#targetNumbersOrMails').attr('required',false);
				$('#selectAll_program').prop('checked',false);
				$('#selectAll_semester').prop('checked',false);
				$('#selectAll_section').prop('checked',false);
				$('#selectAll_instId').prop('checked',false);
			}
		else if(this.id==='sendToAll_TargetNumbersOrMails')
			{
				if($('#sendToAll').is(':checked') )
				{
					showMessage('You can not check two check boxes','error');
					e.preventDefault();
					return false;
				}
				$('#targetNumbersOrMails').attr('required',true);
			
				$('#selectAll_program').prop('checked',false);
				$('#selectAll_semester').prop('checked',false);
				$('#selectAll_section').prop('checked',false);
				$('#selectAll_instId').prop('checked',false);
			}
		if ($(this).is(":checked")) 
		{
			$('[id^=selectAll]').prop('disabled', true);
			$("#instId").prop('disabled', true);
			$("#semester").prop('disabled', true);
			$("#section").prop('disabled', true);
			$("#program").prop('disabled', true);
			
			$('label#sendToAll-error').html('');
			$('#sendToAll').attr('required',false);
			$('#sendToAll').attr('aria-invalid', false);
			
		} 
		else 
		{
			$('[id^=selectAll]').prop('disabled', false);
			$("#instId").prop('disabled', false);
			$("#semester").prop('disabled', false);
			$("#section").prop('disabled', false);
			
			$("#program").prop('disabled', false);
			
			$('#sendToAll').prop('required', true);
		}
	});
}
//send messages end

function saveStudentFutureDetails() {
	
	var formData = {};
	
//	Form Validation.
	var srn = $('#srn').val();
	var whatNextProgramId = $('#whatNextProgramId').val();

	if(srn && srn.length > 5) {
		$('#srnError').html('');
		formData.srn = srn;
	}
	else {
		$('#srnError').html('Please Enter Valid SRN');
		setTimeout(function() { $("#srn").focus(); }, 500);
		return false;
	}
	
	if(whatNextProgramId) {
		$('#whatNextProgramError').html('');
		formData.whatNextProgramId = whatNextProgramId;
	}
	else {
		$('#whatNextProgramError').html('Please Select What Next Program');
		return false;
	}
	
	switch (parseInt(whatNextProgramId)) {
	case 1:
		if($('#companyName').val()) {
			$('#companyNameError').html('');
			formData.companyName = $('#companyName').val();
		}
		else {
			$('#companyNameError').html('Please Enter Company Name');
			return false;
		}
		
		if($('#jobDomain').val()) {
			$('#jobDomainError').html('');
			formData.jobDomain = $('#jobDomain').val();
		}
		else {
			$('#jobDomainError').html('Please Enter Job Domain');
			return false;
		}
		
		if($('#jobSkillSet').val()) {
			$('#jobSkillSetError').html('');
			formData.jobSkillSet = $('#jobSkillSet').val();
		}
		else {
			$('#jobSkillSetError').html('Please Enter Job Skill Set');
			return false;
		}
		
		if($('#doj').val()) {
			$('#dojError').html('');
			formData.doj = $('#doj').val();
		}
		else {
			$('#dojError').html('Please Enter Date Of Joining');
			return false;
		}
		
		if($('#salOrPackage').val()) {
			$('#salOrPackageError').html('');
			formData.salOrPackage = $('#salOrPackage').val();
		}
		else {
			$('#salOrPackageError').html('Please Enter Salary / Package');
			return false;
		}
		
//		Not Validated / Mandatory Values Are Setting Here.
		if($('#isFullTime1').is(':checked')) {
			formData.isFullTime = $('#isFullTime1').val();
		} else {
			formData.isFullTime = $('#isFullTime0').val();
		}
		
		if($('#isCompanyProvidingInternship1').is(':checked')) {
			formData.isCompanyProvidingInternship = $('#isCompanyProvidingInternship1').val();
		} else {
			formData.isCompanyProvidingInternship = $('#isCompanyProvidingInternship0').val();
		}
		
		if($('#isPermanent1').is(':checked')) {
			formData.isPermanent = $('#isPermanent1').val();
		} else {
			formData.isPermanent = $('#isPermanent0').val();
		}
		
		formData.desigOrRole = $('#desigOrRole').val();
		
		break;

	case 2:
		if($('#masterDegree').val()) {
			$('#masterDegreeError').html('');
			formData.masterDegree = $('#masterDegree').val();
		}
		else {
			$('#masterDegreeError').html('Please Enter Going For What');
			return false;
		}
		
		if($('#university').val()) {
			$('#universityError').html('');
			formData.university = $('#university').val();
		}
		else {
			$('#universityError').html('Please Enter University Name');
			return false;
		}
		
		if($('#collageName').val()) {
			$('#collageNameError').html('');
			formData.collageName = $('#collageName').val();
		}
		else {
			$('#collageNameError').html('Please Enter College Name');
			return false;
		}
		
//		Not Validated / Mandatory Values Are Setting Here.
		formData.branchOrCourse = $('#branchOrCourse').val();
		
		if($('#isThereAnyScholarships1').is(':checked')) {
			formData.isThereAnyScholarships = $('#isThereAnyScholarships1').val();
		} else {
			formData.isThereAnyScholarships = $('#isThereAnyScholarships0').val();
		}
		
		formData.state = $('#state').val();
		formData.country = $('#country').val();
		break;

	case 3:
		if($('#typeOfBusiness').val()) {
			$('#typeOfBusinessError').html('');
			formData.typeOfBusiness = $('#typeOfBusiness').val();
		}
		else {
			$('#typeOfBusinessError').html('Please Enter Type Of Business');
			return false;
		}
		
		if($('#whereIsBusiness').val()) {
			$('#whereIsBusinessError').html('');
			formData.whereIsBusiness = $('#whereIsBusiness').val();
		}
		else {
			$('#whereIsBusinessError').html('Please Enter Where Business Is Locating Or Running');
			return false;
		}
		
		if($('#whoIsRunning').val()) {
			$('#whoIsRunningError').html('');
			formData.whoIsRunning = $('#whoIsRunning').val();
		}
		else {
			$('#whoIsRunningError').html('Please Enter Who Is Running Business');
			return false;
		}
		
		if($('#yourRole').val()) {
			$('#yourRoleError').html('');
			formData.yourRole = $('#yourRole').val();
		}
		else {
			$('#yourRoleError').html('Please Enter Your Role / What You Going to Do?');
			return false;
		}
		
//		Not Validated / Mandatory Values Are Setting Here.
		formData.yourEarnings = $('#yourEarnings').val();
		break;

	case 4:
		if($('#domain').val()) {
			$('#domainError').html('');
			formData.domain = $('#domain').val();
		}
		else {
			$('#domainError').html('Please Enter Domain');
			return false;
		}
		
		if($('#entrepreneurSkillSet').val()) {
			$('#entrepreneurSkillSetError').html('');
			formData.entrepreneurSkillSet = $('#entrepreneurSkillSet').val();
		}
		else {
			$('#entrepreneurSkillSetError').html('Please Enter Skill Set');
			return false;
		}
		
		if($('#howManyPeople').val()) {
			$('#howManyPeopleError').html('');
			formData.howManyPeople = $('#howManyPeople').val();
		}
		else {
			$('#howManyPeopleError').html('Please Enter Number of Employees');
			return false;
		}
		
//		Not Validated / Mandatory Values Are Setting Here.
		if($('#investmentFromVC1').is(':checked')) {
			formData.investmentFromVC = $('#investmentFromVC1').val();
			if($('#vcName').val()) {
				$('#vcNameError').html('');
				formData.vcName = $('#vcName').val();
			} else {
				$('#vcNameError').html('Please Enter VC Name');
				return false;
			}
		} else {
			formData.investmentFromVC = $('#investmentFromVC0').val();
		}
		formData.entrepreneurWhere = $('#entrepreneurWhere').val();
		break;

	case 5:
		if($('#reason').val()) {
			$('#reasonError').html('');
			formData.reason = $('#reason').val();
		}
		else {
			$('#reasonError').html('Please Enter Reason');
			return false;
		}
	}
	
	doAjaxCall('saveStudentFutureDetlsForm', 'POST', formData, function(data) {
		var dataArray = data.split("_");
		var status = dataArray[0].toUpperCase();
		var statusResp = dataArray[1];
		if (status == "SUCCESS") {
			showMessage(statusResp, 'success');
			setTimeout(function() { window.location = $('a#surveyExit').attr('href'); }, 5000);
			return false;
		} else if(status == "ERROR") {
			showMessage(statusResp, 'error');
		}
	});
}

function saveLateralEntryRegistrationForm() {
	
	var formData = {};
	
//	Form Validation.
	if (!$("#genericSaveLaterEntryRegForm").valid()) {
		showMessage("Select valid inputs", "error");
		return false;
	}
	
//	Date Validation.
	if($('#dobc').val()) {
		$('#dobError').html('');
	} else {
		$('#dobError').html('Please Enter Date Of Birth');
		return false;
	}
	
	if($('#setSlotDate').val()) {
		$('#dateError').html('');
	} else {
		$('#dateError').html('Please Enter Date');
		return false;
	}
	
//	Image Validation.
	if($('#tempImage').val()) {
		$('#imageError').html('');
	} else {
		$('#imageError').html('Please Upload Image');
		$('#imageError').fadeIn().delay(3000).fadeOut();
		return false;
	}
	
//	Inserting All Values Into FormData.
	formData.courseId = $('#courseId').val();
	formData.applicantName = $('#applicantName').val();
	formData.dob = $('#dobc').val();
	formData.bloodGroupId = $('#bloodGroupId').val();
	
	if($('#gender-Male').is(':checked')) {
		formData.gender = $('#gender-Male').val();
	} else {
		formData.gender= $('#gender-Female').val();
	}
	
	formData.religion = $('#religion').val();
	formData.categoryId = $('#categoryId').val();
	formData.caste = $('#caste').val();
	formData.motherTongueId = $('#motherTongueId').val();
	formData.familySize = $('#familySize').val();
	
	if($('#nationality-1').is(':checked')) {
		formData.nationality = $('#nationality-1').val();
	} else {
		formData.nationality = $('#nationality-2').val();
	}
	
	formData.citizenship = $('#citizenship').val();
	formData.placeOfBirth = $('#placeOfBirth').val();
	
	if($('#handicapped-1').is(':checked')) {
		formData.handicapped = $('#handicapped-1').val();
	} else {
		formData.handicapped = $('#handicapped-2').val();
	}
	
	formData.telephoneNo = $('#telephoneNo').val();
	formData.mobilePhone = $('#mobilePhone').val();
	formData.email = $('#email').val();
	formData.diplomaBranchId = $('#diplomaBranchId').val();
	formData.universityOrBoard = $('#universityOrBoard').val();
	formData.registerNo = $('#registerNo').val();
	formData.yearOfPassing = $('#yearOfPassing').val();
	
	if($('#marksType-1').is(':checked')) {
		formData.marksType = $('#marksType-1').val();
	} else {
		formData.marksType = $('#marksType-2').val();
	}
	
	if($('#marksTypeDegree-1').is(':checked')) {
		formData.marksTypeDegree = $('#marksTypeDegree-1').val();
	} else {
		formData.marksTypeDegree = $('#marksTypeDegree-2').val();
	}
	
	formData.engBranchId = $('#engBranchId').val();
	
	formData.engBranchIdForBoschBTech = $('#engBranchIdForBoschBTech').val();
	
	formData.collegeName = $('#collegeName').val();
	formData.collegeLocation = $('#collegeLocation').val();
	formData.aggregatePercentage = $('#aggregatePercentage').val();
	formData.degreeName = $('#degreeName').val();
	
	formData.degreeCollegeName = $('#degreeCollegeName').val();
	formData.degreeCollegeLocation = $('#degreeCollegeLocation').val();
	formData.degreeUniversityOrBoard = $('#degreeUniversityOrBoard').val();
	formData.degreeYearOfPassing = $('#degreeYearOfPassing').val();
	formData.degreeAggregatePercentage = $('#degreeAggregatePercentage').val();
	formData.degreeCgpa = $('#degreeCgpa').val();
	
	formData.maxMarks = $('#maxMarks').val();
	formData.obtainedMarks = $('#obtainedMarks').val();
	formData.percentage = $('#percentage').val();
	formData.cgpa = $('#cgpa').val();
	formData.state = $('#state').val();
	formData.country = $('#country').val();
	formData.testDate = $('#setSlotDate').val();
	
	formData.testTimeSlotForLateralEntry = $('#testTimeSlotForLateralEntry').val();
	formData.testTimeSlotForEmbaAndBoschBTech = $('#testTimeSlotForEmbaAndBoschBTech').val();
	
	formData.imgUpload = $('#tempImage').val();
//	formData.profilePic = $('#profilePic').val();
		
	doAjaxCall('/Academy/pessat/savePessatLateralRegistrationForm', 'POST', formData, function(data) {
		var dataArray = data.split("_");
		var status = dataArray[0].toUpperCase();
		var statusResp = dataArray[1];
		if (status == "SUCCESS") {
			showMessage(statusResp, 'success');
			//setTimeout(function() { window.location = $('a#surveyExit').attr('href'); }, 5000);
			document.getElementById("lateralPk").value = dataArray[2];
			$('#genericSaveLaterEntryRegForm, #normalPESSATHeader, #oasclk_RegisterSuccess').hide();
            $('#registerConfirmation, #confirmPESSATHeader').show();
            $('#genericSaveLaterEntryRegForm').trigger('reset');
			return false;
		} else if(status == "ERROR") {
			showMessage(statusResp, 'error');
		}
	});
}

function getDeptForInst(instId) {
	if(instId > 0) {
		getCombobox('/Academy/a/i/getDepartmentBasedOnInstitutes/' + instId, 'deptId', null, null, function() {
			$("#deptId option[value='0']").remove();
		});
	}
}

//*****************************Lateral Registration*********************************//
function viewLateralRegistration(controllerMode,actionType)
{
	var referenceNo = $('#referenceNo').val() ? $('#referenceNo').val() : '';
	var name = $('#name').val() ? $('#name').val() : '';
	var date = $('#date').val() ? $('#date').val() : '';
	var timeSlot = $('#timeSlot').val() ? $('#timeSlot').val() : '';
	bgCurtain();
	var formData = 
		{
			controllerMode : controllerMode,
			actionType : actionType,
			referenceNo : referenceNo,
			name : name,
			date : date,
			timeSlot : timeSlot,
			menuId : this.menuId
		};

doAjaxCall(this.url, 'get', formData, function(data) {	
	$('#requestedData').html(data);
		removeBgCurtain();
});	
}
function resetViewLateralRegistration()
{
	$('.testAssessments').val("");
	$('#requestedData').html("");
}

function getStudentLateralRegistrationDetails(refNo,name,lateralEntryRegistrationId,appForTest)
{
	bgCurtain();
	var formData = {
			controllerMode : 7630,
			actionType : 155,
			referenceNo : refNo,
			menuId : this.menuId
		};
	var buttons = [		
		{
			type : "button1",
			label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='submit'></span>Submit",
			className : "btn-sm btn-default",
			callback : function(e) {	
				updateStudentLateralRegistrationDetails(refNo,lateralEntryRegistrationId);
				return false;
			}
		},
		{
			type : "button2",
			label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='approve'></span>Approve For Exam",
			className : "btn-sm btn-default",
			callback : function(e) {	
				ApproveForLateralExam(refNo,name,appForTest);
				return false;
			}
		},
		{
			type : "button3",
			label : "<span class='glyphicon glyphicon-print' aria-hidden='true' id='admitCard'></span>Re Print Admit Card",
			className : "btn-sm btn-default",
			callback : function(e) {	
				rePrintLateralAdminCard(lateralEntryRegistrationId);
				return false;
			}
		},
			{
				type : "cancel",
				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Close",
				className : "btn-sm btn-default",
				callback : null								
			} ];
		doAjaxCall(this.url, 'POST', formData, function(data) {
			getModalDialog('large', ' Reference No : <b>'+refNo+'</b>, Student Name : <b>'+name+'</b>', data,buttons, function() {
				$("#adminData").html(data);
			});
			removeBgCurtain();
		});
}
function checkedLateralStudentDetails(obj)
{
	var course = obj['course'];
	var engBranchId = obj['engBranchId'];
	var bloodGroup = obj['bloodGroup'];
	var gender = obj['gender'];
	var motherTongue = obj['motherTongue'];
	var nationality = obj['nationality'];
	var dipSpecialization = obj['dipSpecialization'];
	var marksOrCGPA = obj['marksOrCGPA'];
	var testTimeSlot = obj['testTimeSlot'];
	var categoryId = obj['categoryId'];
	$('#courseId option').eq(course).prop('selected', true);
	$('#engBranchId').val(engBranchId);
	$('#bloodGroupId option').eq(bloodGroup).prop('selected', true);
	$("input[name=gender][value=" + gender + "]").prop('checked', true);
	$('#motherTongueId').val(motherTongue);
	$("input[name=nationality][value=" + nationality + "]").prop('checked', true);
	$('#diplomaBranchId').val(dipSpecialization);
	$("input[name=marksType][value=" + marksOrCGPA + "]").prop('checked', true);
	$("input[name=marksTypeDegree][value=" + marksOrCGPA + "]").prop('checked', true);
	$('#testTimeSlotForLateralEntry option').eq(testTimeSlot).prop('selected', true);
	$('#testTimeSlotForEmbaAndBoschBTech option').eq(testTimeSlot).prop('selected', true);
	$('#categoryId').val(categoryId);
	$('#engBranchIdForBoschBTech').val(engBranchId);
	if($('#marksType-1').is(':checked')) {
		$('#showMarks').show();
		$('#showCGPA').hide();
		document.getElementById("cgpa").value = "0";
	} else {
		$('#showMarks').hide();
		$('#showCGPA').show();
		document.getElementById("aggregatePercentage").value = "0";
	}
	if($('#marksTypeDegree-1').is(':checked')) {
		$('#showMarksDegree').show();
		$('#showCGPADegree').hide();
		document.getElementById("degreeCgpa").value = "0";
	} else {
		$('#showMarksDegree').hide();
		$('#showCGPADegree').show();
		document.getElementById("degreeAggregatePercentage").value = "0";
	}
	if($('#courseId').val() == 1) {
		document.getElementById("degreeName").value = "NA";
		document.getElementById("degreeUniversityOrBoard").value = "NA";
		document.getElementById("degreeCollegeName").value = "NA";
		document.getElementById("degreeCollegeLocation").value = "NA";
		document.getElementById("degreeYearOfPassing").value = "0";
		$('#showOnlyForBTechLateral').show();
		$('#showDiplomaRel').show();
		$('#showEngBranch').show();
		$('#showDiplomaRel').show();
		$('#showForBTechLateralEntry').show();
		$('#importantNoteForBTechLateral').show();
		$('#showDegreeRel').hide();
		$('#showEngBranchForBoschBTech').hide();
		$('#showForEmbaAndBoschBTech').hide();
		$('#importantNoteForBTechAndEMBA').hide();
	} else if($('#courseId').val() == 2)  {
		document.getElementById("engBranchId").value = "0";
		document.getElementById("diplomaBranchId").value = "0";
		document.getElementById("collegeName").value = "NA";
		document.getElementById("collegeLocation").value = "NA";
		document.getElementById("universityOrBoard").value = "NA";
		document.getElementById("yearOfPassing").value = "0";
		$('#showEngBranchForBoschBTech').show();
		$('#showDegreeRel').show();
		
		$('#showForEmbaAndBoschBTech').show();
		$('#importantNoteForBTechAndEMBA').show();
		
		$('#showEngBranch').hide();
		$('#showDiplomaRel').hide();
		$('#showOnlyForBTechLateral').hide();
		$('#showDiplomaRel').hide();
		$('#showForBTechLateralEntry').hide();
		$('#importantNoteForBTechLateral').hide();
	}else if($('#courseId').val() == 3) {
		$('#showDegreeRel').show();
		$('#showForEmbaAndBoschBTech').show();
		$('#importantNoteForBTechAndEMBA').show();
		
		$('#showEngBranch').hide();
		$('#showOnlyForBTechLateral').hide();
		$('#showDiplomaRel').hide();
		$('#showForBTechLateralEntry').hide();
		$('#importantNoteForBTechLateral').hide();
		$('#showEngBranchForBoschBTech').hide();
		document.getElementById("diplomaBranchId").value = "0";
		document.getElementById("collegeName").value = "NA";
		document.getElementById("collegeLocation").value = "NA";
		document.getElementById("registerNo").value = "NA";
		document.getElementById("universityOrBoard").value = "NA";
		document.getElementById("yearOfPassing").value = "0";
	}
	else {
		$('#showDegreeRel').hide();
		$('#showForEmbaAndBoschBTech').hide();
		$('#importantNoteForBTechAndEMBA').hide();
		$('#showEngBranch').hide();
		$('#showOnlyForBTechLateral').hide();
		$('#showDiplomaRel').hide();
		$('#showForBTechLateralEntry').hide();
		$('#importantNoteForBTechLateral').hide();
	}
}
function ApproveForLateralExam(refNo,name,appForTest)
{
	if("Y"==appForTest)
		{
			showMessage("Student already approved for test", "error");
			return false;
		}
	var formData = {
			controllerMode : 7630,
			actionType : 156,
			referenceNo : refNo,
			menuId : this.menuId
		}	
	getConfirmDialog("Approve Test for Student", 'Are you sure you want to approve for Reference No : <b>'+refNo+'</b>, Student Name : <b>'+name+'</b>', function() {
		 bgCurtain();
			doAjaxCall(this.url, 'get', formData, function(data) {	
				var dataArray = data.split("_");
				var status = dataArray[0].toUpperCase();
				var statusResp = dataArray[1];
				if (status == "SUCCESS") {
					viewLateralRegistration(7630,154);
					showMessage("Saved Successfully", "success");
				} else if (status == "ERROR") {
					showMessage(statusResp, "error");
				} 
					removeBgCurtain();
			});
});
}
function updateStudentLateralRegistrationDetails(refNo,lateralEntryRegistrationId)
{
	
	var formData = {};
		var mobilePhone=$("#mobilePhone").val();
		var substringvalue=mobilePhone.charAt(0);
		if(mobilePhone.length!=10 || substringvalue==0)
		{
			showMessage('Please provide a valid mobile no','error');
			$("#mobilePhone").val("");
			return false;
		}
		
			
//	Form Validation.
	if (!$("#genericSaveLaterEntryRegForm").valid()) {
		showMessage("Select valid inputs", "error");
		return false;
	}
	
	
			
	formData.controllerMode = 7630;
	formData.actionType = 157;
	formData.referenceNo = refNo;
	formData.menuId = this.menuId;
	formData.lateralEntryRegistrationId = lateralEntryRegistrationId;
//	Inserting All Values IntocatryId FormData.
	formData.courseId = $('#courseId').val();
	formData.applicantName = $('#applicantName').val();
	formData.dob = $('#dobc').val();
	formData.bloodGroupId = $('#bloodGroupId').val();
	
	if($('#gender-Male').is(':checked')) {
		formData.gender = $('#gender-Male').val();
	} else {
		formData.gender= $('#gender-Female').val();
	}
	
	formData.religion = $('#religion').val();
	formData.categoryId = $('#categoryId').val();
	formData.caste = $('#caste').val();
	formData.motherTongueId = $('#motherTongueId').val();
	formData.familySize = $('#familySize').val();
	
	if($('#nationality-1').is(':checked')) {
		formData.nationality = $('#nationality-1').val();
	} else {
		formData.nationality = $('#nationality-2').val();
	}
	
	formData.citizenship = $('#citizenship').val();
	formData.placeOfBirth = $('#placeOfBirth').val();
	
	if($('#handicapped-1').is(':checked')) {
		formData.handicapped = $('#handicapped-1').val();
	} else {
		formData.handicapped = $('#handicapped-2').val();
	}
	
	formData.telephoneNo = $('#telephoneNo').val();
	formData.mobilePhone = $('#mobilePhone').val();
	formData.email = $('#email').val();
	formData.diplomaBranchId = $('#diplomaBranchId').val();
	formData.universityOrBoard = $('#universityOrBoard').val();
	formData.registerNo = $('#registerNo').val();
	formData.yearOfPassing = $('#yearOfPassing').val();
	
	if($('#marksType-1').is(':checked')) {
		formData.marksType = $('#marksType-1').val();
	} else {
		formData.marksType = $('#marksType-2').val();
	}
	if($('#marksTypeDegree-1').is(':checked')) {
		formData.marksTypeDegree = $('#marksTypeDegree-1').val();
	} else {
		formData.marksTypeDegree = $('#marksTypeDegree-2').val();
	}
	
	formData.engBranchId = $('#engBranchId').val();
	formData.engBranchIdForBoschBTech = $('#engBranchIdForBoschBTech').val();
	formData.collegeName = $('#collegeName').val();
	formData.collegeLocation = $('#collegeLocation').val();
	formData.aggregatePercentage = $('#aggregatePercentage').val();
	formData.degreeName = $('#degreeName').val();
	
	formData.degreeCollegeName = $('#degreeCollegeName').val();
	formData.degreeCollegeLocation = $('#degreeCollegeLocation').val();
	formData.degreeUniversityOrBoard = $('#degreeUniversityOrBoard').val();
	formData.degreeYearOfPassing = $('#degreeYearOfPassing').val();
	formData.degreeAggregatePercentage = $('#degreeAggregatePercentage').val();
	formData.degreeCgpa = $('#degreeCgpa').val();
	
	
	formData.maxMarks = $('#maxMarks').val();
	formData.obtainedMarks = $('#obtainedMarks').val();
	formData.percentage = $('#percentage').val();
	formData.cgpa = $('#cgpa').val();
	formData.state = $('#state').val();
	formData.country = $('#country').val();
	formData.testDate = $('#testDate').val();
	formData.testTimeSlotForLateralEntry = $('#testTimeSlotForLateralEntry').val();
	formData.testTimeSlotForEmbaAndBoschBTech = $('#testTimeSlotForEmbaAndBoschBTech').val();
	doAjaxCall(this.url, 'POST', formData, function(data) {
		var dataArray = data.split("_");
		var status = dataArray[0].toUpperCase();
		var statusResp = dataArray[1];
		if (status == "SUCCESS") {
			viewLateralRegistration(7630,154);
			showMessage(statusResp, 'success');
		} else if(status == "ERROR") {
			showMessage(statusResp, 'error');
		}
	});

}
function rePrintLateralAdminCard(lateralEntryRegistrationId)
{
	var url="/Academy/a/reports/Reports/lateralEntryAdmitCard/"+lateralEntryRegistrationId;
	var w=window.open(url,null);
	w.window.print();
}

function printLateralAdminCard() {
	var lateralEntryRegistrationId = $('#lateralPk').val();
	var url="/Academy/lateralEntryStudentAdmitCard/" + lateralEntryRegistrationId;
	var w=window.open(url,null);
	w.window.print();
}

//*****************************Lateral Registration*********************************//

function uploadLateralStudentImage(){
	$("#stdimgUpload").trigger("click");	
}

function uploadLateralStudentImageInit(){
	$("#stdimgUpload").on("change", function() {
		lateralStudentimgViaUpload(this);
	});	
}

function lateralStudentimgViaUpload(that) {
	var id = $(that).attr("id");
	var reader = new FileReader();
	var errorMsg = "";
	$(that).closest('div').parent().find('#validationError').remove();
	reader.onload = function(e) {
		var imgSrc= e.target.result;
		if (imgSrc.indexOf("data:image/jpeg") > -1
				|| imgSrc.indexOf("data:image/png") > -1
				|| imgSrc.indexOf("data:image/gif") > -1
				|| imgSrc.indexOf("data:image/bmp") > -1) {
		} else {
			errorMsg=_MESSAGES.errorMessages.errorMsg.replace(/#0/g,
					_MESSAGES.errorMessages.imageFormat)
			$(that).closest('div').prepend(errorMsg);
			$("#"+id).val('');
			return;
		}
		if (e.total > 1000141) { // Below 1Mb Allowed
			errorMsg=_MESSAGES.errorMessages.errorMsg.replace(/#0/g,
					_MESSAGES.errorMessages.imageSize);
			$(that).closest('div').prepend(errorMsg);
			$("#"+id).val('');
			return;
		}
		if(imgSrc) {
			document.getElementById("tempImage").value = imgSrc;
			$('#prevImg').attr('src', imgSrc);
//			previewStudentImage(imgSrc);
		}
	};
	reader.readAsDataURL(that.files[0]);
}

// start for summer hall ticket




function handleSummerHallTicket(type, controllerMode, actionType,id, selectedData) 
{
	
	var formData = {
		controllerMode : controllerMode,
		actionType : actionType,
		menuId : this.menuId,
		id : id,
		messageType:selectedData
	};

	
	var buttons = [	
		{
			type : "button1",
			label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='downloadSummerHallTicketId'></span>Download",
			className : "btn-sm btn-default",
			callback : function(e) {	
				downloadSummerTermStudentHallTicket();
				return false;
			}
		},
		{
			type : "button",
			label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='saveSummerHallTicketId'></span>Send To All",
			className : "btn-sm btn-default",
			callback : function(e) {	
				sendSummerTermStudentHallTicket();
				return false;
			}
		},
		{
			type : "cancel",
			label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
			className : "btn-sm btn-default",
			callback : null
		} ];
	bgCurtain();

	doAjaxCall(this.url, 'POST', formData, function(data) {
		getModalDialog('large', 'Manage Summer Hall Ticket', data, buttons, function() {
			showSummerStudentdetails(type, controllerMode, actionType,id, selectedData);
		});
});	
}


function showSummerStudentdetails(type, controllerMode, actionType,id, selectedData){
	$('#getStudentDetails').html('');
	var formData = {
			controllerMode : controllerMode,
			actionType : 6,
			menuId : this.menuId,
			id : id,
			messageType:selectedData
		};
	
	bgCurtain();
	doAjaxCall(this.url, 'get', formData, function(data) {	
			removeBgCurtain();
			$('#getStudentDetails').html(data);
	});
}


function handleCheckedUsers()
{
	$("#checkAllAligibleUsers").off('click');
	$("#checkAllAligibleUsers").on('click',function(){
		
		
		var allPages = messageRecipientsDataTable.column().nodes();
		if($(this).prop('checked')==true)
			{
			selectedSummerUsers=[];
			$('input[type="checkbox"]', allPages).prop('checked', true);
			var messageType=$('#messageType').val();
			
			
			$.each(allPages, function(index, currentValue)
					{
				var selectedUsers={};
			
					if(currentValue.hasAttribute('data-email') ||currentValue.hasAttribute('data-usn'))
					{
						var clickedEmail=currentValue.getAttribute('data-email');
						var clickedUsn=currentValue.getAttribute('data-usn');
						var clickedUserId=$(this).attr('data-userId');
						var clickedStdName=$(this).attr('data-name');
						
						 selectedUsers.email=clickedEmail;
						 selectedUsers.srn=clickedUsn;
						 selectedUsers.userId=clickedUserId;
						 selectedUsers.studentName=clickedStdName;
						 selectedSummerUsers.push(selectedUsers);
					}
				
			});
			}
		else
			{
				$('input[type="checkbox"]', allPages).prop('checked', false);
				selectedSummerUsers=[];
			}
	});
	$('input[id^=eligibleUsers]').off('click');
	$('input[id^=eligibleUsers]').on('click', function()
			{
				var messageType=$('#messageType').val();
				var clickedEmail=$(this).attr('data-email');
				var clickedUsn=$(this).attr('data-usn');
				var clickedUserId=$(this).attr('data-userId');
				var clickedStdName=$(this).attr('data-name');
				
				
				
				if($(this).prop('checked')==true)
						{
					var selectedUsers={};
						selectedUsers.email=clickedEmail;
						selectedUsers.srn=clickedUsn;
						selectedUsers.userId=clickedUserId;
						selectedUsers.studentName=clickedStdName;
						selectedSummerUsers.push(selectedUsers);
						
					$(this).prop('checked',true);
				}
				else
				{
					selectedSummerUsers=$.each(selectedSummerUsers, function(index, selectedUsers){
						
							if(selectedUsers.email=clickedEmail || clickedUsn==selectedUsers.usn)
								{
								selectedSummerUsers.splice(index,1);
								$("#checkAllAligibleUsers").prop('checked', false);
								return false;
								}
							
					});
					
				}
			});
}



function getSelectedSummerStudents(detailsJson)
{
	selectedSummerUsers=[];
		
	var sendDetails=$.parseJSON(detailsJson);
	$.each(sendDetails, function(index, value){
		var selectedUsers={};
			selectedUsers.email=value.Email;
			selectedUsers.srn=value.SRN;
			selectedUsers.userId=value.UserId;
			selectedUsers.studentName=value.FirstName;
		 selectedSummerUsers.push(selectedUsers);
	});
}


//function handleSendMessages(formData, title, typeOfSend)
function sendSummerTermStudentHallTicket(){
	
	var formData = new FormData($('#genericSave')[0]);
	formData.append("controllerMode", 7640);
	formData.append("actionType", 122);
	formData.append("menuId", this.menuId);
	
	if($('#messageRecipientsDataTable').length > 0) {
		if(selectedSummerUsers && selectedSummerUsers.length <= 0) {
			 showMessage('Please select the studennts to send hall ticket.', 'error');
			 return false;
		}
		formData.append("selectedSummerTermStudents", JSON.stringify(selectedSummerUsers));
		formData.append("IsDataBaseFetch", "0");
	} else {
		formData.append("IsDataBaseFetch", "1");
	}
	
	getConfirmDialog("Send Messages", "Are you sure you want to send hall ticket?", function(data) {
		bgCurtain();
		doAjaxCall(this.url, 'POST', formData, function(data) {
			if (data.indexOf("SUCCESS") > -1) {
				removeBgCurtain();
				showMessage("Messages sent successfully","success");
				removeBgCurtain();
				
			} else {
				showMessage("Not sent! Try again", "error");
			}
		}, false, false);
	}, false);
	
	
}



function downloadSummerTermStudentHallTicket(){
	
	var formData = new FormData($('#genericSave')[0]);
	formData.append("controllerMode", 7640);
	formData.append("actionType", 176);
	formData.append("menuId", this.menuId);
	
	if($('#messageRecipientsDataTable').length > 0) {
		if(selectedSummerUsers && selectedSummerUsers.length <= 0) {
			 showMessage('Please select the studennts to download hall ticket.', 'error');
			 return false;
		}
		formData.append("selectedSummerTermStudents", JSON.stringify(selectedSummerUsers));
		formData.append("IsDataBaseFetch", "0");
	} else {
		formData.append("IsDataBaseFetch", "1");
	}
	
	getConfirmDialog("Download", "Are you sure you want to download hall ticket?", function(data) {
		bgCurtain();
		doAjaxCall(this.url, 'POST', formData, function(data) {
			var dataArray = data.split("_");
			var status = dataArray[0].toUpperCase();
			var statusResp = dataArray[1];
			if (status == "SUCCESS") {
				var response=encodeURIComponent(statusResp);
				var url="downloadSummerHallTicket/Reports/"+response;
				var w=window.open(url,null);
				w.window.print(); 
			}
			
		}, false, false);
	}, false);
	
	
}



 function callSummerComboboxFn(instId){
	 
	 getCombobox('/Academy/a/i/getInstitutes', 'institutionId',null,null,function(){
			if($('#institutionId').val()!= null){
				getCombobox('/Academy/a/i/programByInstId/'+$('#institutionId').val(), 'programId',null,null,function(){
					
					$("#programId").val($("#programId :first").val());
				});
				
				getCombobox('/Academy/a/i/getDepartmentBasedOnInstitutes/'+$('#institutionId').val(), 'deptId',null,null,function(){
						$("#deptId").val($("#deptId :first").val());
					});
			}
			});
	 
	 
 }

// end for summer hall ticket
function checkPercentage()
{
	 $('input#degreeAggregatePercentage,input#cgpa,input#aggregatePercentage,input#degreeCgpa').on('input', function() {
		    match = (/(\d{0,2})[^.]*((?:\.\d{0,2})?)/g).exec(this.value.replace(/[^\d.]/g, ''));
		    this.value = match[1] + match[2];
		  });
}

function checkMarks() {
	 $('input#maxMarks,input#obtainedMarks').on('input', function() {
		 match = (/(\d{0,4})[^.]*((?:\.\d{0,2})?)/g).exec(this.value.replace(/[^\d.]/g, ''));
		 this.value = match[1];
	 });
}

///////////////////////////////////////////////////////////////////// Batch Class - Start ////////////////////////////////////////////////////////////
function getBatchClassDetails() {
	var selectValue = $('#batches').val() + "_" + $('#program1').val()+ "_" + $('#depts').val()+"_"+$('#searchInstId').val()+"_"+$('#searchclassId').val();
	getDetailsBasedOnSelected('instituteApp', 8030, 5, 8030, 'batchClassesDetails', selectValue, 'Batch Classes');
}
///////////////////////////////////////////////////////////////////// Batch Class - End //////////////////////////////////////////////////////////////

function getAllBasedOnInstWhenComingBackWithSelected(instId, progmId, batchId, classId) {
	
	$("#institutionId option[value='0']").remove();
	getCombobox('/Academy/a/i/getRestrictedInstitutesByGroup','institutionId', null, null, function() {
		$("#institutionId option[value='0']").remove();
		$('#institutionId option[value='+instId+']').attr("selected","selected");
		
		if(instId > 0) {
			$("#programId option[value='0']").remove();
			getCombobox('/Academy/a/i/programByInstId/' + instId, 'programId', null, null, function() {
				$("#programId option[value='0']").remove();
				$('#programId option[value='+progmId+']').attr("selected","selected");
				
				$("#batchId option[value='0']").remove();
				getCombobox('/Academy/a/i/batchesByInstId/' + $('#institutionId').val(), 'batchId', null, null, function() {
					$("#batchId option[value='0']").remove();
					$('#batchId option[value='+batchId+']').attr("selected","selected");
					
					$("#classId option[value='0']").remove();
					getCombobox('/Academy/a/i/getClassesByInstId/' + $('#institutionId').val(), 'classId', null, null, function() {
						$("#classId option[value='0']").remove();
						$('#classId option[value='+classId+']').attr("selected","selected");
						
						getSeletedSyllabus();
					});
				});
			});
		}
	});
}


function getattendanceCombox(){	 
	 getCombobox('/Academy/a/i/getRestrictedInstitutesByGroup', 'instId',null,null,function(){
			if($('#instId').val()!= null){
				getCombobox('/Academy/a/i/getDepartmentBasedOnInstitutes/'+$('#instId').val(), 'deptId',null,null,function(){
					getCombobox('/Academy/a/i/programByInstId/'+$('#instId').val(), 'programId',null,null,function(){
						getCombobox('/Academy/a/i/batchesByInstIdOrParent/'+$('#instId').val(), 'batchId',null,null,function(){
						getCombobox('/Academy/a/i/classessbyinst/'+$('#instId').val(), 'batchClassId',null,null,function(){
						
						});
					});
				});
			});
		}
		});
	 }


	function getAttendancePrograms(){
		if($('#instId').val()!= null){
			getCombobox('/Academy/a/i/getDepartmentBasedOnInstitutes/'+$('#instId').val(), 'deptId',null,null,function(){
				getCombobox('/Academy/a/i/programByInstId/'+$('#instId').val(), 'programId',null,null,function(){
					getCombobox('/Academy/a/i/batchesByInstIdOrParent/'+$('#instId').val(), 'batchId',null,null,function(){
						getCombobox('/Academy/a/i/classessbyinst/'+$('#instId').val(), 'batchClassId',null,null,function(){
						
						});
					});
				})
			});
		}
	}
	
	function resetStudentAttendance()
	{
		$("#instId").html("");
		$("#programId").html("");
		$("#deptId").html("");
		$("#batchId").html("");
		$("#batchClassId").html("");
		$("#sDate").val("");
		$("#eDate").val("");
		$("#showSectionWiseDiv").html("");
		getattendanceCombox();
	}

	
	function getsendMessagesCombobox(){
		getCombobox('/Academy/a/i/programForSendMessages/'+$('#instId').val().toString(), 'program',null,null,function(){
			if($('#program').val()!= null){
				getPrograms();
			}
		});
}

function getPrograms(){
	getCombobox('/Academy/a/i/getSemesterBasedOnFacultyDept/'+$('#instId').val().toString()+'/'+$('#program').val().toString(), 'semester');
}


// ---------------------------------Start - Download Admission Report Based On Search------------------------------

function downloadAdmissionReport(menuId)
{
	var instIdsearch = $("#instIdsearch").val();
	var searchType = $("#searchType").val();
	var email = ($("#email").val()=="")? null : $("#email").val().trim();
	var fDate = ($("#fDate").val()=="")? null : $("#fDate").val();
	var tDate = ($("#tDate").val()=="")? null : $("#tDate").val();
	var mobile = ($("#mobile").val()=="")? null : $("#mobile").val().trim();
	var referenceNo = ($("#referenceNo").val()=="")? null : $("#referenceNo").val().trim();
	var quota = ($("#quota").val()==undefined)? null : $("#quota").val().toString();
	var programId = ($("#programId").val()==undefined)? null : $("#programId").val();
	var branchId = ($("#branchId").val()==undefined)? null : $("#branchId").val();
	var batchId = ($("#batchId").val()==undefined)? null : $("#batchId").val();
	var status = ($("#stateNamesId").val()=="")? null : $("#stateNamesId").val().trim();
	
	var formData = {
			controllerMode : 5110,
			actionType : 23,
			instIdsearch : instIdsearch,
			searchType : searchType,
			email : email,
			fDate : fDate,
			tDate : tDate,
			mobile : mobile,
			referenceNo : referenceNo,
			quota : quota,
			programId : programId,
			branchId : branchId,
			batchId : batchId,
			status : status,				
			menuId:this.menuId			
			}
	
	bgCurtain();
	doAjaxCall(this.url, 'GET', formData, function(data) {			
		var dataArray = data.split("_");
		var admissionstatus = dataArray[0].toUpperCase();			
		var statusResp = dataArray[1];				
		if (admissionstatus == "SUCCESS") {				
			var url='reports/Reports/getReportForAdmissions/'+menuId+'/'+ email +'/'+mobile+'/'+referenceNo+'/'+status+'/'+quota+'/'+fDate+'/'+tDate
			+'/'+programId+'/'+branchId+'/'+batchId+'/'+searchType+'/'+instIdsearch;
			var w=window.open(url,'_self');				
		} else if(admissionstatus == "ERROR") {
			showMessage(statusResp, 'error');
		}
		removeBgCurtain();
	});		

	
	
}

//----------------------------END - Download Admission Report Based On Search-------------------------


//------------------------------ Start Send mail In Admissions----------------------------------------
function admissionSendMail()
{
	
	var instIdsearch = $("#instIdsearch").val();
	var searchType = $("#searchType").val();
	var email = ($("#email").val()=="")? null : $("#email").val().trim();
	var fDate = ($("#fDate").val()=="")? null : $("#fDate").val();
	var tDate = ($("#tDate").val()=="")? null : $("#tDate").val();
	var mobile = ($("#mobile").val()=="")? null : $("#mobile").val().trim();
	var referenceNo = ($("#referenceNo").val()=="")? null : $("#referenceNo").val().trim();
	var quota = ($("#quota").val()==undefined)? null : $("#quota").val().toString();
	var programId = ($("#programId").val()==undefined)? null : $("#programId").val();
	var branchId = ($("#branchId").val()==undefined)? null : $("#branchId").val();
	var batchId = ($("#batchId").val()==undefined)? null : $("#batchId").val();
	var status = ($("#stateNamesId").val()=="")? null : $("#stateNamesId").val().trim();
	
	
	
	var formData = {
			controllerMode:5110,
			actionType:21,
			instIdsearch : instIdsearch,
			searchType : searchType,
			email : email,
			fDate : fDate,
			tDate : tDate,
			mobile : mobile,
			referenceNo : referenceNo,
			quota : quota,
			programId : programId,
			branchId : branchId,
			batchId : batchId,
			status : status,		
			menuId:this.menuId
			}
	
	var buttons = [	
		{
			type : "button",
			label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='sendMail'></span>Send Mail",
			className : "btn-sm btn-default",
			callback : function(e) {		
				sendAdmissionMail(instIdsearch,searchType,email,fDate,tDate,mobile,referenceNo,quota,programId,branchId,batchId,status);				
				return false;
			}
		},
		{
			type : "cancel",
			label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
			className : "btn-sm btn-default",
			callback : null
		} ];
	
	bgCurtain();
	doAjaxCall(this.url, 'GET', formData, function(data) {			
	if(data=="ERROR")
		{
			showMessage("Data Not Found", 'error');
		}
	else
		{
			getModalDialog('large', 'Admission - Send Mail to Candidates', data, buttons, function() {
			removeBgCurtain();			
			});	
		}
	});
	}


function sendAdmissionMail(instIdsearch,searchType,email,fDate,tDate,mobile,referenceNo,quota,programId,branchId,batchId,status)
{

	if($("#notification_title").val()=="")
		{
		showMessage("Title required", "error");
		return false;
		}
	
	if($("#notification_message").val()=="")
		{
		showMessage("Message required", "error");
		return false;
		}
	
	mailTitle = $("#notification_title").val();
	mailMessage = $("#notification_message").val();
	
	var formData = {
			controllerMode : 5110,
			actionType : 22,
			instIdsearch : instIdsearch,
			searchType : searchType,
			email : email,
			fDate : fDate,
			tDate : tDate,
			mobile : mobile,
			referenceNo : referenceNo,
			quota : quota,
			programId : programId,
			branchId : branchId,
			batchId : batchId,
			status : status,
			mailTitle : mailTitle,
			mailMessage : mailMessage,
			menuId:this.menuId			
			}
	
	getConfirmDialog("Admission Notification", "Are you sure you want to send Admission Notification", function() {
		 bgCurtain();
			doAjaxCall(this.url, 'get', formData, function(data) {	
				if (data == "SUCCESS") {
					showMessage("Admission Notifications sent successfully", "success");
				} else if (status == "ERROR") {
					showMessage("Error Occured", "error");
				} 
					removeBgCurtain();
			});
	});
	
}

//------------------------------ END Send mail In Admissions----------------------------------------


function isaPasteAllForAdmin(type, adminFacultyType) {
	
//	if(masterId != parseInt($("#currentISATempId").val())) {
//		showMessage("Select proper assessment type to paste all","error");
//		return;
//	}
	
	var that = this;
	this.isIsaPasteAll = false;
	
	var pasteDialog = '<div class="wrapper-modal-content-area-pad">' + '<form class="form-horizontal">' +
		'<div class="col-md-12">' + '<fieldset class="grp_frmfld" style="padding-top: 15px;">' + 
		'<div class="form-group pastinblk">' + '<label class="col-md-12 control-label" for="">Please paste the SRN and Marks here</label>'+ 
		'<p class="error"><strong>Quick Help:</strong> Please paste the values separated with comma(,) <br>ex:- <br>PES12017XXXXX, 20.3<br>01FB14ECSXXX, 20</p>'+
        '<div class="col-md-12">' + '<textarea class="form-control" autofocus id="pastedIsaMarks"></textarea>' +
        '</div>' + '</div>' +
        '</fieldset>' + '</div>' +' </form>' + '</div>';
	
	var buttons = [ {
		type : "button",
		label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Paste",
		className : "btn btn-sm btn-default",
		callback : function(e){
			isaPasteValue(type, adminFacultyType);
			that.isIsaPasteAll=true;
		}
	} ];
	
	getModalDialog('medium','Paste All',pasteDialog,buttons,function() { });
}
	
// //////////////////////////////////////////////////////////// Manage Batches - Start //////////////////////////////////////////////////////////////
function getManageBatchesDetails(controllerMode, actionType, id, selectedData) {
	$('#dt_btnContainer a:eq(0)').blur();
	getCurrentDataTable();
	$(".outside-action-btn").addClass("disabled");
	bgCurtain();
	var formData = {
		controllerMode : controllerMode,
		actionType : actionType,
		id : id,
		selectedData : selectedData,
		menuId : this.menuId
	};
	doAjaxCall(this.url, 'GET', formData, function(data) {
		handleManageBatchesShowSuccess(formData, data);
	});
}

function handleManageBatchesShowSuccess(formData, data) {

	var that = this;
	this.formErrorList = [];
	var buttons = [
		{ 
			type : "cancel",
			label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
			className : "btn-sm btn-default",
			callback : null
		} ];
	
	getModalDialog('large', 'Manage Batches', data, buttons, function() {
		removeBgCurtain();
	});
}

function getManageBatchesCombobox(batchClassId) {
	$.ajax({
		url : '/Academy/a/i/batchClassSubjectsforLab/' + batchClassId,
		success : function(result) {
			$('#subjects').empty();
			result = JSON.parse(result);
			if(result.getSubjects) {
				$('#subjects').append(result.getSubjects);
				getElectiveSubjects = result.getElectiveSubjects;
			}
			getCombobox('/Academy/a/i/batchClassSections/' + batchClassId, 'section', null, null, function() {
				$('#section').append("<option value=0>Elective</option>");
				getManageBatchStudentcountbysection();
			})
		}
	});
}

function getManageBatchStudentcountbysection() {

	var idType = 1;
	var subjectId = parseInt($('#subjects').val());
	
	if(getElectiveSubjects.hasOwnProperty(subjectId)) {
		idType = 2;
		$('#section').val(0);
	}
	
	$('#noOfBatches').val("");
	$('#noOfStudentAllocated').val("");
	var sectionId = $('#section').val();
	var batchClassId = $('#batchClassId').val();
	
	var formData = {
			controllerMode : 9910,
			actionType : 23,
			sectionId : sectionId,
			menuId : this.menuId,
			idType : idType,
			subjectId : subjectId,
			batchClassId : batchClassId
	};
	
	bgCurtain();
	doAjaxCall(this.url, "GET", formData, function(data) {
		var dataArray = data.split("&&");
//		$("#allocationType").prop("checked", false);
//		document.getElementById("allocationType").disabled = false;
		
		document.getElementById('noStudents').value = getInteger(dataArray[0],0);
		$('#subjectBatchId').val(dataArray[1]);
		$('#displayListOfExistedSections').html('');
		$('#studentsbybatchsubjects').html('');
		$('#showBatchSections').empty();
		$('#noOfBatches').attr("disabled", false);
		
		var noOfBatches = $('#subjectBatchTable').children('tbody').children('tr').length-1;
		if(parseInt(noOfBatches) < 1) {		// If Batch Does Not Exist Will Start From Initial. For First Batch Request Set 1. Setting Val.
			$('#addBatchesRequest').val(1);
		} else {
			$('#addBatchesRequest').val(2);	// Else Part.
		}
		
//		Enabling And Dissabling Add Batch Button.
		if(parseInt(dataArray[0]) <= 0) {
			$('#addBatch').addClass('disabled');
		} else {
			$('#addBatch').removeClass('disabled')
		}
		
		$('#saveBatches').addClass('disabled');
		
		if(parseInt($('#subjectBatchId').val()) > 0) {
			getBatchesListOfSectionBasedonBatchclassId(idType);
			document.getElementById("noOfBatches").disabled = true;
		}	
		removeBgCurtain();
	});
}

function getBatchesListOfSectionBasedonBatchclassId(idType) {
	
	var sectionName = $('select[name=section] option:selected').text();
	var selectValue = $('#batchClassId').val() + "_" + $('#subjects').val() + "_" + $('#section').val() + "_" + idType+ "_" + sectionName + "_" + $('#subjectBatchId').val();
	
	bgCurtain();
	getDetailsBasedOnSelected('instituteApp', 9910, 42, 9910,'ListOfSections', selectValue, 'BATCHCLASSES', function(selectValue, data) {
		$('#displayListOfExistedSections').html(data);
//		var allocationType = 0;
//		if($('#allocationType').is(':checked')) {
//			allocationType = 1;
//		}
		
//		if(parseInt(allocationType) == 0 && parseInt($('#unAllocateStudents').val()) > 0) {
//		if(parseInt($('#unAllocateStudents').val()) > 0) {
//			document.getElementById("unAllocateStudentsCheckBox").disabled = true;
//		} 
//		else if(parseInt(allocationType)==1) {
//			$('.pasteusn').on("click", function (e) {
//				e.preventDefault();
//			});
//		}
		generateSectionBatchesByEditMode();
		removeBgCurtain();
	});
}

function saveManageBatchesSectionDetails() {
	
	var allocationText = "";

	$("#noOfBatches").val($('#subjectBatchTable').children('tbody').children('tr').length-1);
	var subjectsName = $('select[name=subjects] option:selected').text();
	var secName = $('select[name=section] option:selected').text();
	var noOfBatches = $('#subjectBatchTable').children('tbody').children('tr').length-1;
	
	if(parseInt(noOfBatches) < 1) {
		showMessage("No batches to allocate", "error");
		return false;
	}
	
	var upDateArr = [];
	var subjectBatchId = parseInt($('#subjectBatchId').val());
	
	allocationText = "Allocate";
	if(subjectBatchId > 0) {
		upDateArr = getListOfUnAllocatedStudents();
		text = "Re-Allocate";
	}
	
	var unallocatedStd = $('#unAllocateStudents').val();
	if(parseInt(unallocatedStd) < 1) {
		showMessage("No students to re-allocate", "error");
		return false;
	}
	
	var subjectId = parseInt($('#subjects').val());
	var idType = 1;
	if(getElectiveSubjects.hasOwnProperty(subjectId)) {
		idType = 2;
	}
	
	var allocationType = 2;
	if($('#allocationType').is(':checked')) {
		allocationType = 1;
	}
	
	var formContext = $("#genericSave");
	var formData = formContext.serializeArray();
//	var menu = {name : "menuId",value : this.menuId};
	var idType = {name : "idType",value : idType};
	var subjectBatchId = { name:subjectBatchId,value:$("#subjectBatchId").val() ? $("#subjectBatchId").val():0};
	var upDateArr = {name : "upDateArr",value : JSON.stringify(upDateArr)};
	var allocType = {name : "allocType",value : allocationType};
	
//	formData.push(menu);
	formData.push(idType);
	formData.push(subjectBatchId);
	formData.push(upDateArr);
	formData.push(allocType);
	
	var confirmDailogMessage = "Do you want to " + allocationText + " " + secName + "-" + subjectsName + ". Are you sure ?" + "<br><br><b>Note: </b>It will " + allocationText + " Unallocated Students only.";
	var conforDailogTitleitle = allocationText + " " + secName + "-" + subjectsName;
	
	getConfirmDialog(conforDailogTitleitle, confirmDailogMessage, function() {
		$('#saveBatches').addClass('disabled');
		bgCurtain();
		doAjaxCall(this.url, "GET", formData, function(data) {
			var dataArray = data.split("_");
			var status = dataArray[0].toUpperCase();
			var statusResp = dataArray[1];
			if (status == "SUCCESS") {
				showMessage(statusResp, "success");
				getManageBatchStudentcountbysection();
			} else if (status == "ERROR") {
				showMessage(statusResp, "error");
				$('#saveBatches').removeClass('disabled')
			}
			removeBgCurtain();
		});
	});
}
////////////////////////////////////////////////////////////// Manage Batches - End ////////////////////////////////////////////////////////////////

function assignFacultyForManageBatches(batchsubsecidtype,subBatchDetailsId,batchName,noOfStd)
{
	var instId = $('#searchInstId').val();
	bgCurtain();
	var formData = {
		controllerMode : 9910,
		actionType : 158,
		instId : instId,
		batchsubsecidtype :batchsubsecidtype,
		subBatchDetailsId : subBatchDetailsId,
		menuId : this.menuId
	};
	doAjaxCall(this.url, 'GET', formData, function(data) {
		handleAssignFacultyForManageBatches(formData, data,batchsubsecidtype,subBatchDetailsId,batchName,noOfStd);
		selectBoxValidation();
		removeBgCurtain();
	});
}
var assignedfacultyIdarray=[];
function handleAssignFacultyForManageBatches(formData, data,batchsubsecidtype,subBatchDetailsId,batchName,noOfStd)
{
	 assignedfacultyIdarray=[];
	var unassignedfacultyIdarray = [];
	var subjectName=$('select[name=subjects] option:selected').text();
	var that=this;
	this.formErrorList=[];
	var buttons = [
			{
				type : "button",
				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id='save-span-1'></span>Assign",
				className : "btn-sm btn-default",
				callback : function(e) {
					$('.facultyclass').each(function(){
						if($(this).is(":checked")){
							assignedfacultyIdarray.push($(this).attr('id'));
						}else{
							unassignedfacultyIdarray.push($(this).attr('id'));
						}
						
					});
					 if(assignedfacultyIdarray.length==0)
					{
						showMessage("Please Assign at least one Faculty", "error");
						return false
					}else
					saveFacultyForManageBatches(batchsubsecidtype,subBatchDetailsId,assignedfacultyIdarray,unassignedfacultyIdarray);
				}
			},
			{
				type : "cancel",
				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
				className : "btn-sm btn-default",
				callback : null
			} ];
	
	
	getModalDialog(
			'medium',
			'Subject : '+subjectName+', Batch : '+batchName,
			data,
			buttons,
			function() {
				
			});
}
function addFacultyForManageBatches()
{
	if(facultyValue=='')
		{
		showMessage("Please add faculty", "error");
		return false;
		}
	addFacultyForManageBatchesLab(facultyInfoJson);
}

function addFacultyForManageBatchesLab(facultyInfoJson){
    var FirstName="";
    var UserId="";
    var flag=false;
    for(var i = 0; i < facultyInfoJson.length; i++)
    {
        if(facultyInfoJson[i].UserId == facultyValue)
        {
            FirstName = facultyInfoJson[i].FacultyDeptName;
            UserId = facultyInfoJson[i].UserId;
        }
    }
    dt = $('#assignFaculty').DataTable();
    $('#assignFaculty').DataTable().rows().every( function ( rowIdx, tableLoop, rowLoop )
             {
                 var row_id = dt.row( [rowIdx] ).id();
                 if(UserId==row_id)
                 flag = true;     
                 $('[data-subjectBathes="sb"]').each(function(i){
                     if(UserId==$('[data-subjectBathes="sb"]')[i].id)
                          flag=true;
                 })
              })
      if(flag==false){         
         var rowIndex = $('#assignFaculty').dataTable().fnAddData( [
            '<label class="checkbox-inline" for="'+UserId+'"> <input type="checkbox" id="'+UserId+'" data-subjectBathes="sb" class="facultyclass" name="faculty_'+UserId+'" value="'+UserId+'" checked onclick=checkFacultyForManageBatches(this)>',
            FirstName,
            "Unassigned"
            ]);
         facultyValue="";
          }    
         else{
             showMessage("Faculty already present in the list", "error");
         }    
}


function saveFacultyForManageBatches(batchsubsecidtype,subBatchDetailsId,assignedfacultyIdarray,unassignedfacultyIdarray)
{
	bgCurtain();
	assignedfacultyIdarray=$.unique(assignedfacultyIdarray);
	unassignedfacultyIdarray=$.unique(unassignedfacultyIdarray);
	var allocationType = 2;
	if($('#allocationType').is(':checked')) {
		allocationType = 1;
	} 
	var formData = {
		controllerMode : 9910,
		actionType : 159,
		batchsubsecidtype: batchsubsecidtype,
		subBatchDetailsId : subBatchDetailsId,
		assignedfacultyIdarray : JSON.stringify(assignedfacultyIdarray),
		unassignedfacultyIdarray : JSON.stringify(unassignedfacultyIdarray),
		allocationType : allocationType,
		menuId : this.menuId
	};
	doAjaxCall(this.url, 'GET', formData, function(data) {
		var dataArray = data.split("_");
		var status = dataArray[0].toUpperCase();
		var statusResp = dataArray[1];
		if (status == "SUCCESS") {
			showMessage(statusResp, "success");
		} else if (status == "ERROR") {
			showMessage(statusResp, "error");
		}
		removeBgCurtain();
		assignedfacultyIdarray=[];
		unassignedfacultyIdarray = [];
		facultyValue="";
	});
}

function generateSectionBatchesByEditMode() {
	if(Object.keys(generateSectionBatchesInfo).length > 0) {
		
		var htmlText = "";
		
		htmlText += "<table id='subjectBatchTable' class='table compact table-striped table-bordered' style='width: 100%;'>" +
				"<tr>" +
				"<th class='text-center'>Batch Name</th>" +
				"<th class='text-center'>No. Of Students</th>" +
				"<th class='text-center'>Action</th>" +
				"</tr>";
		
		var j = 1;
		for(i = 0; i < generateSectionBatchesInfo.length; i++) {
			htmlText += "<tr>" +
			"<td class='text-center'><label' for='noOfSections'>" + generateSectionBatchesInfo[i].BatchName + "</label>" +
				"<input type='hidden' name='batchName' id='batchName_" + j + "' value='" + generateSectionBatchesInfo[i].BatchName + "' >" +
			"</td>" +
					
			"<td class='text-center'>" +
			"<label' for='noOfSections'>" + generateSectionBatchesInfo[i].noStudents + "</label>" +
			"<input type='hidden' class='form-control text-center' data-validate='only-numeric' name='noOfStdsEachSection_"+j+"' id='noOfStdsEachSection_"+j+"' value='"+generateSectionBatchesInfo[i].noStudents+"' placeholder='No of students' autocomplete='off' required readonly style='max-width: 60px; margin: auto;'>" +
			"</td>";
			
			if(generateSectionBatchesInfo[i].noStudents == 0) {
				htmlText += "<td class='text-center' style='vertical-align: middle;'>" +
				"<a href='javascript:removeSavedBatch(\""+generateSectionBatchesInfo[i].BatchName+"\", \""+generateSectionBatchesInfo[i].SubjectBatchDetailId+"\", \""+generateSectionBatchesInfo[i].SubjectBatchId+"\")' id='removeId_" + j + "' class='btn btn-default btn-xs outside-action-btn'><span class='glyphicon glyphicon-minus' aria-hidden='true'></span>Remove</a>" +
				"</td>" +
				"</tr>";
			} else {
				htmlText += "<td class='text-center' style='vertical-align: middle;'>" +
				"<a id='removeId_" + j + "' class='btn btn-default btn-xs outside-action-btn disabled removeBatch'><span class='glyphicon glyphicon-minus' aria-hidden='true'></span>Remove</a>" +
				"</td>" +
				"</tr>";
			}

			j++;	
		}
		
		htmlText += "</table>";
		
		$('#noOfBatches').val(generateSectionBatchesInfo.length);
		$('#showBatchSections').empty();
		$('#showBatchSections').append(htmlText);
		
		if(parseInt($('#unAllocateStudents').val()) == 0) {
			$('#noOfBatches').attr("disabled", true);
		}
		
		var noOfBatches = $('#subjectBatchTable').children('tbody').children('tr').length-1;
		if(parseInt(noOfBatches) < 1) {		// If Batch Does Not Exist Will Start From Initial. For First Batch Request Set 1. Setting Val.
			$('#addBatchesRequest').val(1);
		} else {
			$('#addBatchesRequest').val(2);	// Else Part.
		}
	}
}

function removeSavedBatch(batchName, subjectBatchDetailId, subjectBatchId) {
	
	var confirmDailogTitle;
	var confirmDailogMessage;
	
	confirmDailogTitle = "Remove Saved Batch " + batchName + "";
	confirmDailogMessage = "Are you sure you want to remove the saved batch <b>" + batchName + "?</b>"
	+"<br><br><b>Note: </b>It will be removed from attendance & faculty subjects.<br>" +
	"If yes, then you will no longer access the data.";
	
//	Form Data.
	var formData = {
			controllerMode : 9910, 
			actionType : 205,
			batchName : batchName,
			subjectBatchId : subjectBatchId,
			subjectBatchDetailId : subjectBatchDetailId,
			menuId : this.menuId
	}	
	
	getConfirmDialog(confirmDailogTitle, confirmDailogMessage, function() {
		bgCurtain();		 
	 			
		doAjaxCall(this.url, 'get', formData, function(data) {
			var dataArray = data.split("_");
			var status = dataArray[0].toUpperCase();
			var statusResp = dataArray[1];
			if (status == "SUCCESS") {
				$('#showBatchSections').empty();
				$('#ListOfSections').empty();
				$('#SubjectBatchDetailTable').empty();
				$('#subjectBatchDetailIdDiv').empty();
				getManageBatchStudentcountbysection();
				showMessage(statusResp, "success");
			} else if (status == "ERROR") {
				showMessage(statusResp, "error");
			}
			removeBgCurtain();
		});
	});
}

function showFacultyAssignedListForSection()
{
	$('.modal').on('hidden.bs.modal', function() {
		assignedfacultyIdarray=[];
		unassignedfacultyIdarray=[];
		facultyValue="";
	});
}

function deleteSectionBasedonBatches(resetType,subBatchDetailsId,batchclassId,sectionId,idType,subjectId,batchName)
{
	var title='Reset Batch : '+batchName;
	var msg=" Do you want to reset batch <b>"+batchName+"</b> information . Are you sure ?"
	+"<br><br> <b>Note: </b>It will be removed from attendance & faculty subjects.<br>" +
	"If yes, then you will no longer access the data.";
	var rowCount = $('#subjectBatchTable').children('tbody').children('tr').length-1;
	if(resetType==1){
		batchName=$('select[name=section] option:selected').text()
		 title='Reset Section : '+batchName;
		 msg=" Do you want to reset section <b>"+batchName+"</b> information . Are you sure ?"
		+"<br><br> <b>Note: </b>It will be reset from attendance & faculty subjects.<br>" +
		"If yes,then you will no longer access the data";
		var noOfBatches = $('#sectionBasedOnBatchClass').children('tbody').children('tr').length;
		if(parseInt(noOfBatches)<1)
			{
				showMessage("No batches to reset", "error");
				return false;
			}
	}
	 subjectId = subjectId ? subjectId : $('#subjects').val();
	 sectionId = sectionId ? sectionId : $('#section').val();
	 if(idType=='')
	 {
		 if(getElectiveSubjects.hasOwnProperty(subjectId))
			 idType=2;
		 else
			 idType=1;
	 }
		
	getConfirmDialog(title, msg, function() {
		var formData = {
			controllerMode : 9910,
			actionType : 162,
			resetType : resetType,
			subBatchDetailsId : subBatchDetailsId,
			batchclassId : batchclassId,
			sectionId : sectionId,
			idType : idType,
			subjectId : subjectId,
			menuId : this.menuId,
			rowCount : rowCount,
			subjectBatchId : $('#subjectBatchId').val(),
			batchName:batchName
		};
		
		bgCurtain();
		doAjaxCall(this.url, 'GET', formData, function(data) {
			var dataArray = data.split("_");
			var status = dataArray[0].toUpperCase();
			var statusResp = dataArray[1];
			if (status == "SUCCESS") {
				$('#showBatchSections').empty();
				$('#ListOfSections').empty();
				$('#SubjectBatchDetailTable').empty();
				$('#subjectBatchDetailIdDiv').empty();
				if(parseInt(resetType)==1)
				document.getElementById("subjectBatchId").value = "0";
				getManageBatchStudentcountbysection();
				showMessage(statusResp, "success");
			} else if (status == "ERROR") {
				showMessage(statusResp, "error");
			}

			removeBgCurtain();
		});
	});
}

function generateSectionBatches(noOfBatches) {
	if(parseInt($('#subjectBatchId').val())>0){
		generateSectionBatchesForUnAllocatedStudents(noOfBatches);
		return;
	}
	var sectionName=$('select[name=section] option:selected').text();
	sectionName=sectionName[sectionName.length -1].toUpperCase();
	var totalNoOfStds=parseInt($('#noStudents').val());
	var noOfBatches=parseInt(noOfBatches);

	var allocationType = 0;
	if($('#allocationType').is(':checked')) {
		allocationType = 1;
	} 
	
	if(noOfBatches <= totalNoOfStds ) {

		if(noOfBatches > 0){
			if(noOfBatches <= 20){

				var remainNoOfStd = parseInt((totalNoOfStds % noOfBatches));
				var assignNoOfStd = parseInt((totalNoOfStds / noOfBatches));
				var toassignNoOfStd=0;
				var totalNumberOfStudents=0;
				text="";

				if(allocationType==0)
				{ 
					text +="<table id='subjectBatchTable' class='table compact table-striped table-bordered' style='width: 100%;'><tr><th>Batch Name</th><th class='text-center'>No. Of Students</th></tr>";
					for(i=1;i<=noOfBatches;i++){

						/* toassignNoOfStd = assignNoOfStd; */

						text +="<tr><td><label' for='noOfSections'>"+sectionName+""+i+"</label>" +
						"<input type='hidden' name='batchName' id='batchName_"+i+"' value='"+sectionName+""+i+"' >" +
						"</td>" +
						"<td><input type='text' class='form-control' data-validate='only-numeric' name='noOfStdsEachSection_"+i+"' id='noOfStdsEachSection_"+i+"' value='0' placeholder='No of students' autocomplete='off' style='max-width: 60px; margin: auto;' required readonly>" +
						"</td></tr>";
						//toassignNoOfStd = parseInt((toassignNoOfStd + assignNoOfStd)); 
					} 
				}
				else{ 

					text +="<table id='subjectBatchTable' class='table compact table-striped table-bordered' style='width: 100%;'><tr><th>Batch Name</th><th class='text-center'>No. Of Students</th></tr>";
					for(i=1;i<=noOfBatches;i++){

						/* toassignNoOfStd = assignNoOfStd; */

						text +="<tr><td><label' for='noOfSections'>"+sectionName+""+i+"</label>" +
						"<input type='hidden' name='batchName' id='batchName_"+i+"' value='"+sectionName+""+i+"' >" +
						"</td>" +
						"<td><input type='text' class='form-control' data-validate='only-numeric' name='noOfStdsEachSection_"+i+"' id='noOfStdsEachSection_"+i+"' value='"+assignNoOfStd+"' placeholder='No of students' autocomplete='off' style='max-width: 60px; margin: auto;' required readonly></td></tr>";
						toassignNoOfStd = parseInt((toassignNoOfStd + assignNoOfStd));

					}
				}

				text +="</table>";
				$('#showBatchSections').empty();
				$('#showBatchSections').append(text); 


				// remaining students allocating
				if(remainNoOfStd > 0 && allocationType==1){
					for(i=1;i<=noOfBatches;i++){
						if(totalNoOfStds > toassignNoOfStd)
						{
							var assignValue = parseInt($('#noOfStdsEachSection_'+i).val()) + 1;
							$('#noOfStdsEachSection_'+i).val(assignValue);
							toassignNoOfStd = parseInt((toassignNoOfStd + 1));
						}
					}
				}

				/*// calculating number of studennts
	for(i=1;i<=noOfBatches;i++){
	totalNumberOfStudents = totalNumberOfStudents + parseInt($('#noOfStdsEachSection_'+i).val());

	$('#noOfStudentAllocated').val(totalNumberOfStudents);
	}*/

			}else{
				$('#noOfBatches').val('');
				$('#noOfStudentAllocated').val('');
				showMessage("Please enter less than or Equals 20 only.", "Error");

			}
		}else{
			text="";
			showMessage("Please enter greator than 0 only.", "Error");
			$('#showBatchSections').append(text); 
		}

	}
	else{
		showMessage("Please enter less than or Equal of Number of Student.", "Error");
		$('#noOfBatches').val('');
		$('#noOfStudentAllocated').val('');
	}

}


function getStudentsFromGenerateSectionBatchesInfoObj(sectionName){
	var noStudentsObj={};
	var sectionName=sectionName.toUpperCase();
	for(var j in generateSectionBatchesInfo){
	if((generateSectionBatchesInfo[j].BatchName).toUpperCase()==sectionName){
		noStudents=generateSectionBatchesInfo[j].noStudents;
		subjectBatchDetailId=generateSectionBatchesInfo[j].SubjectBatchDetailId;
		noStudentsObj={noStudents:noStudents,subjectBatchDetailId:subjectBatchDetailId}
		break;
	}
	}
	return noStudentsObj;
}

function getSectionNameFromExitingBatch(clonedObj){
	var resp="";
	for(var k in clonedObj){
		resp=clonedObj[k].BatchName;
		delete clonedObj[k];
		return resp;
	}
}

function SubjectBatchValidation(noOfBatches, totalNoOfStds) {
	var resp = "";
	 if(generateSectionBatchesInfo.length > noOfBatches)
		 resp = "Batch size shoud be greator than " + generateSectionBatchesInfo.length;
	if(!(noOfBatches <= totalNoOfStds)) 
		resp = "Batch size shoud be less than or Equal of Number of Student.";
	if(resp)
		showMessage(resp, "Error");
	return resp;
}

function getListOfUnAllocatedStudents(){
	var arr=[];
	$("[id^=noOfStdsEachSection_]").each(function(){
		var respObj={};
		respObj['assignedStudents']=$(this).attr('data-assignedStudents');
		respObj['subjectBatchDetailId']=$(this).attr('data-subjectBatchDetailId');
		respObj['batchName']=$(this).attr('data-batchName');
		respObj['existingStudents']=$(this).attr('data-existingStudents');
		arr.push(respObj);
	})	
	return arr;
}

function checkFacultyForManageBatches(thisReq)
{
	if(thisReq && !$(thisReq).is(':checked')) {
		$(thisReq).removeAttr('checked');
		$('#checkboxes-0').prop('checked', false);
	} 
	var isAllChecked = 0;
	$('#assignFaculty').DataTable().rows().every( function ( rowIdx, tableLoop, rowLoop ) {
		if(!$(this.node()).children().find('input').is(':checked')){
			isAllChecked=1;
			return false
		   }
    });
	$("#checkboxes-0").prop("checked", false);
	 if ($('#assignFaculty').children('tbody').children('tr').length!=0 && isAllChecked == 0) {
		 $("#checkboxes-0").prop("checked", true);
     } 
	
}


function addOrRemoveFacultys(thisReq){
	   $('#assignFaculty').DataTable().rows().every( function ( rowIdx, tableLoop, rowLoop ) {
		   if($(thisReq).is(':checked') || !thisReq)
			   $(this.node()).children().find('input').prop('checked',true);
				else
			   $(this.node()).children().find('input').prop('checked',false);
		});
	   var type=2;
	   if(thisReq)
		   type=1;
}
//**********************Start - Get Student Functionality in Manage Batches *************

function getStudentsBasedOnSection(type, controllerMode, actionType, subjectBatchDetailId) {
	var sectionId = "";
	var batchClassId = $("#batchClassId").val(); 
	var subjectId = $("#subjects").val();
	var subjectBatchId = $("#subjectBatchId").val();
	sectionId = $("#section").val();
	var idType=1;
    if(getElectiveSubjects.hasOwnProperty(subjectId)){
        idType=2;
    }	
    
	var formData = {
			type : type,
			controllerMode : controllerMode, 
			actionType : actionType,
			subjectId : subjectId,
			sectionId : sectionId,
			subjectBatchDetailId : subjectBatchDetailId,
			subjectBatchId : subjectBatchId,
			idType : idType,
			menuId : this.menuId,
			batchClassId:batchClassId
	}

	bgCurtain();
	doAjaxCall(this.url, "GET", formData, function(data){		
		$("#getStudentsListBasedOnSection").html(data);
		if(type==1)
		{
			$("#subjectBatchDetailIdDiv").hide();		
		}
		removeBgCurtain();
	});
	
}

var dt = "";
//$('#SubjectBatchDetailTable').DataTable();

function moveStudentToOtherBatche(type)
{

	var subjectId = $("#subjects").val();
	var sectionId = $("#section").val();
	
	var idType=1;
    if(getElectiveSubjects.hasOwnProperty(subjectId)){
        idType=2;      	
    }
    
    var batchName = $('select[name=subjectBatchDetailId] option:selected').text();    
    var batchClassId = $("#batchClassId").val();
    
	var subjectBatchDetailId = $("#subjectBatchDetailId").val();
	var oldSubjectBatchDetailId = $("#oldSubjectBatchDetailId").val();
	
	var oldBatchName = $("#batchName").text();	
	var newBatchName = $( "#subjectBatchDetailId option:selected" ).text();
		
	if(subjectBatchDetailId==null)
		{
		showMessage("Please Select Section", "error");
		return false;
		}
		
	var val = [];
	var studentArray = [];
	var buildingId_yourArray = [];
	$('#SubjectBatchDetailTable').DataTable().rows().every( function ( rowIdx, tableLoop, rowLoop ) {
		var studentId=$(this.node()).children().find('input').attr("id");
		var values="";				
		if($(this.node()).children().find('input').is(':checked')){
			studentArray.push(studentId);	
		}		
	});
	
	if (studentArray.length <1)
		{
		showMessage("Please Select atleast one Student", "error");
		return false;
		}
	if(parseInt(type)==2)
	{
		var formData = {
				controllerMode : 9910, 
				actionType : 161,
				subjectId : subjectId,
				sectionId : sectionId,
				subjectBatchDetailId : subjectBatchDetailId,
				oldSubjectBatchDetailId : oldSubjectBatchDetailId,
				studentArray : JSON.stringify(studentArray),
				batchName : batchName,
				batchClassId : batchClassId,
				idType : idType,
				menuId : this.menuId			
		}	
		
		getConfirmDialog("Batch Change", "Are you sure you want to move the students from <b>"+oldBatchName+"</b> to <b>"+newBatchName+"</b>", function() {
			 bgCurtain();		 
				doAjaxCall(this.url, 'get', formData, function(data) {				
					var dataArray = data.split("_");
					var status = dataArray[0].toUpperCase();
					var statusResp = dataArray[1];
					if (status == "SUCCESS") {
						showMessage(statusResp, "success");
						getManageBatchStudentcountbysection();
						getStudentsBasedOnSection(2,9910,160,oldSubjectBatchDetailId);					
					} else if (status == "ERROR") {
						showMessage(statusResp, "error");
					}
					removeBgCurtain();
				});
				
		});	
	}else if(parseInt(type)==3)
	{
		var formData = {
				controllerMode : 9910, 
				actionType : 189,
				subjectId : subjectId,
				sectionId : sectionId,
				subjectBatchDetailId : subjectBatchDetailId,
				studentArray : JSON.stringify(studentArray),
				batchName : batchName,
				batchClassId : batchClassId,
				idType : idType,
				menuId : this.menuId			
		}	
		
		getConfirmDialog("Move Students to Batch", "Are you sure you want to move the students to <b>"+newBatchName+"</b>", function() {
			 bgCurtain();		 
				doAjaxCall(this.url, 'get', formData, function(data) {				
					var dataArray = data.split("_");
					var status = dataArray[0].toUpperCase();
					var statusResp = dataArray[1];
					if (status == "SUCCESS") {
						showMessage(statusResp, "success");
						getManageBatchStudentcountbysection();
						getStudentsBasedOnSection(2,9910,160,oldSubjectBatchDetailId);					
					} else if (status == "ERROR") {
						showMessage(statusResp, "error");
					}
					removeBgCurtain();
				});
				
		});	
	}
	
}

function allocateUnAssignStudents(studnetSize,thisReq) {
	if ($(thisReq).is(':checked')) {
//		$('#saveManageBatchesSectionId').removeClass('disabled');
		generateSectionBatchesForUnAllocatedStudents($('#noOfBatches').val());
	} else {
//		$('#saveManageBatchesSectionId').addClass('disabled');
		generateSectionBatchesByEditMode();
	}
}

function moveStudentsAllocation(controllerMode,actionType,subjectId,sectionId,subjectBatchDetailId,oldSubjectBatchDetailId,studentArray,idType)
{
	var formData = {
			controllerMode : controllerMode, 
			actionType : actionType,
			subjectId : subjectId,
			sectionId : sectionId,
			subjectBatchDetailId : subjectBatchDetailId,
			oldSubjectBatchDetailId : oldSubjectBatchDetailId,
			studentArray : JSON.stringify(studentArray),	
			idType : idType,
			menuId : this.menuId			
	}	
	
	doAjaxCall(this.url, 'get', formData, function(data) {	
		
		var dataArray = data.split("_");
		var status = dataArray[0].toUpperCase();
		var statusResp = dataArray[1];
		if (status == "SUCCESS") {
			showMessage(statusResp, "success");
		} else if (status == "ERROR") {
			showMessage(statusResp, "error");
		}
		removeBgCurtain();
	});

}

function facultyBasedOnSectionCheckAll(thisReq){
	   $('#assignFaculty').DataTable().rows().every( function ( rowIdx, tableLoop, rowLoop ) {
		   if($(thisReq).is(':checked') || !thisReq)
			   $(this.node()).children().find('input').prop('checked',true);
				else
			   $(this.node()).children().find('input').prop('checked',false);
		} );
	   var type=2;
	   if(thisReq)
		   type=1;
}


	function addOrRemoveStudentsBySubjectBatch(thisReq){
		   $('#SubjectBatchDetailTable').DataTable().rows().every( function ( rowIdx, tableLoop, rowLoop ) {
			   if($(thisReq).is(':checked') || !thisReq)
				   $(this.node()).children().find('input').prop('checked',true);
					else
				   $(this.node()).children().find('input').prop('checked',false);
			});
		   var type=2;
		   if(thisReq)
			   type=1;
	}
	
	
	function getUnAllocatedStudents(controllerMode, actionType,subjectId,batchClassId,sectionId,idType,subjectBatchId,type)
	{		
		var formData = {
				controllerMode : controllerMode, 
				actionType : actionType,
				subjectId : subjectId,
				sectionId : sectionId,
				subjectBatchId : subjectBatchId,
				idType : idType,				
				batchClassId:batchClassId,
				type : type,
				menuId : this.menuId
		}		

		bgCurtain();
		doAjaxCall(this.url, "GET", formData, function(data){		
			$("#getStudentsListBasedOnSection").html(data);
				$("#subjectBatchDetailIdDiv").show();		
				$('#unallocateStudentsForBatches').hide();
			removeBgCurtain();
		});		
	}
//**********************END - Get Student Functionality in Manage Batches ****************

//***********************************End Manage Batches********************************************************//

//***********************WorkflowRestriction*******************************************************//
	function manageWorkflowRestriction(mode, actionType, stateId, stateName,workflowId) {
		var instId = $("#institutionId").val();
		if(!$("#institutionId").val()) {
			showMessage("Please Select Institution", "error");
			return false;
		}
		bgCurtain();
		var title = 'Workflow Restriction : '+stateName;
		var formData = {
			controllerMode : mode,
			actionType : actionType,
			workFlowStateId : stateId,
			workflowId : workflowId, 
			menuId : this.menuId,
		};
		var buttons = [
			{
				type : "button",
				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true'></span>Save",
				className : "btn-sm btn-default",
				callback : function(e) {
					saveWorkflowRestrictionSuccess(formData);
				}
			},
			{
				type : "cancel",
				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
				className : "btn-sm btn-default",
				callback : function(e) {
				}
			}
			];
		doAjaxCall(this.url, 'POST', formData, function(data) {
			getModalDialog('large', title, data,buttons, function() {
				$("#adminData").html(data);
			});
			removeBgCurtain();
		});
		
	}

	var addWorkflowRestrictionUserOrRole = [];
	var addWorkflowRestrictionUserandRole = {}
	function saveWorkflowRestrictionSuccess(formData) {
		addWorkflowRestrictionUserOrRole = [];
		
		var userOrRoleId = $('#userOrRoleId').val();
		userOrRoleId = parseInt(userOrRoleId);
		if(userOrRoleId===0 || isNaN(userOrRoleId))
		{
			showMessage("Please Select User/Role", "error");
			return false;
		}
		if(userOrRoleId==1 && workflowUsersIdarray.length==0 && formData.workflowId=='') 
		{
			showMessage("Please Add Users", "error");
			return false;
		}
		if(userOrRoleId==2 && workflowUserRoleIdarray.length==0 && formData.workflowId=='')
		{
			showMessage("Please Add Roles", "error");
			return false;
		}
		if($('#deptId').is(':checked')) {
			formData.deptId = 1;
		} else {
			formData.deptId=0;
		}
		if($('#workflowInstId').is(':checked')) {
			formData.workflowInstId = 1;
		} else {
			formData.workflowInstId=0;
		}
		if($('#escalationId').is(':checked')) {
			formData.escalationId = 1;
		} else {
			formData.escalationId=0;
		}
		
		if(formData.workflowId=='')//for create restriction
		{
			addWorkflowRestrictionUserandRole = {
					'deptId': formData.deptId,
	                'workflowInstId':formData.workflowInstId,
	                'userOrRoleId': userOrRoleId,
	                'escalationId': formData.escalationId,
	                'workflowUsersIdarray': JSON.stringify(workflowUsersIdarray),
	                'workflowUserRoleIdarray': JSON.stringify(workflowUserRoleIdarray)
			}
			addWorkflowRestrictionUserOrRole.push(addWorkflowRestrictionUserandRole);
			showMessage("Create Workflow,Workflow Restriction will be auto saved", "success");
		}else
		{	//update restriction
			formData.actionType=178;
			formData.userOrRoleId = userOrRoleId;
			formData.workflowUsersIdarray=JSON.stringify(workflowUsersIdarray);
			formData.workflowUserRoleIdarray=JSON.stringify(workflowUserRoleIdarray);
			bgCurtain();
			doAjaxCall(this.url, 'get', formData, function(data) {
				removeBgCurtain();
				var dataArray = data.split("_");
				var status = dataArray[0].toUpperCase();
				var statusResp = dataArray[1];
				if (status == "SUCCESS") {
					showMessage(statusResp, "success");
				}else{
					showMessage(statusResp, "error");
				}
			});
			workflowUsersIdarray = [];
			workflowUserRoleIdarray = [];
		}
	}

	//users
	function showWorkflowRestrictionUsersDataList(value,dataListId,inuptId)
	{
		$('#'+dataListId).empty();
		var rep="";
		if(value){
		var name=value.trim().toUpperCase();
		var count=0;
			for(var f in usersJson){
				if(f.indexOf(name)>=0){
					rep+=usersJson[f];
					count++;
					if(count==10)break;
				}
		}
		}
				$('#'+dataListId).append(rep); 
	}

	var usersJson="";
	var usersInfoJson="";
	function getWorkflowUsersBySearch(where,id){
		if(!where)
		  return;
		var instId = $("#institutionId").val();
		if(!$("#institutionId").val()) {
			showMessage("Please Select Institution", "error");
			return false;
		}
			var formData = {
					menuId:this.menuId,
					where:where,
					id:id,
				};
				doAjaxCall('/Academy/a/g/getWorkflowUsersBySearch/'+instId, 'GET', formData, function(data) {
				if(data){
					usersJson="";
					usersJson=JSON.parse(data);
					usersInfoJson=usersJson;

					var rep="";
					var finalJson={};
					for(i=0;i<usersJson.length;i++){
						var Email=usersJson[i].Email.trim().toUpperCase();
						var FirstName=usersJson[i].FirstName.trim().toUpperCase();
						var UserId=usersJson[i].UserId;
						var rep="<option data-value='"+UserId+"'>"+Email+"-"+FirstName+"</option>";
						finalJson[Email+"-"+FirstName]=rep;
						}
					usersJson=finalJson;
				}
			});
					
	}

	var usersIdValue="";
	function getWorkflowUsersData(){
		$("#assignUsersId").on('input',function(){
			usersIdValue="";
			var thisReq=$(this);
			var enteredValue = $(thisReq).val();
		    var currentDataList=$(thisReq).attr('list');
		    
		    var respVal=showWorkflowRestrictionUsersDataList(enteredValue,currentDataList,$(thisReq).attr('id'));
		    if(respVal){
		    	enteredValue=respVal;
		    }
		   $('#'+currentDataList + ' option').filter(function() {
			  			if($(this).val() === enteredValue && enteredValue){
			  				usersIdValue=$(this).attr('data-value');
			  				$('#'+currentDataList).empty();
			  				return usersIdValue;
			  		}
		       });	  
		    return usersIdValue ; // contains value
		});
		
	}

	function addWorkflowRestrictionUsers()
	{
		workflowRestrictionUsers(usersInfoJson);
	}
	var workflowUsersIdarray = [];
	function workflowRestrictionUsers(usersInfoJson){
		var Email="";
		var FirstName="";
		var UserId="";
		var flag=false;
		for(var i = 0; i < usersInfoJson.length; i++)
		{
			if(usersInfoJson[i].UserId == usersIdValue)
			{
				Email = usersInfoJson[i].Email;
				FirstName = usersInfoJson[i].FirstName;
				UserId = usersInfoJson[i].UserId;
			}
		}
		dt = $('#assignWorkflowUsers').DataTable();
		$('#assignWorkflowUsers').DataTable().rows().every( function ( rowIdx, tableLoop, rowLoop )
	 		    {
	 		    	var row_id = dt.row( [rowIdx] ).id();
	 				if(UserId==row_id)
	 			    flag = true;	 				
	 				$.each( workflowUsersIdarray, function( i,value ){
	 					  if(UserId==value)
	 						  flag=true;
	 					});	 				
	 			 })
	 	 if(flag==false){		 
		var rowIndex = $('#assignWorkflowUsers').dataTable().fnAddData( [
				Email,
	    		FirstName,
	    		"<a href=javascript:deleteWorkflowRestrictionUser('"+UserId+"')>Delete</a>"
	    		]);
	    var row = $('#assignWorkflowUsers').dataTable().fnGetNodes(rowIndex);
	    $(row).attr('id', UserId);
	    workflowUsersIdarray.push(UserId);
	 	}	
		 	else{
		 		showMessage("User already present in the list", "error");
		 	}	
	}

	function deleteWorkflowRestrictionUser(UserId)
	{
		workflowUsersIdarray.splice(workflowUsersIdarray.indexOf(UserId),1);
		$('#assignWorkflowUsers').dataTable().fnDeleteRow('#'+UserId);
	}

	//role
	function showWorkflowRestrictionUserRoleDataList(value,dataListId,inuptId)
	{
		$('#'+dataListId).empty();
		var rep="";
		if(value){
		var name=value.trim().toUpperCase();
		var count=0;
			for(var f in userRoleJson){
				if(f.indexOf(name)>=0){
					rep+=userRoleJson[f];
					count++;
					if(count==10)break;
				}
		}
		}
				$('#'+dataListId).append(rep); 
	}

	var userRoleJson="";
	var userRoleInfoJson="";
	function getWorkflowUserRoleBySearch(where,id){
		if(!where)
		  return;
		/*var instId = $("#institutionId").val();
		if(!$("#institutionId").val()) {
			showMessage("Please Select Institution", "error");
			document.getElementById('institutionId').focus();
			return false;
		}*/
			var formData = {
					menuId:this.menuId,
					where:where,
					id:id,
				};
				doAjaxCall('/Academy/a/g/getWorkflowUserRoleBySearch', 'GET', formData, function(data) {
				if(data){
					userRoleJson="";
					userRoleJson=JSON.parse(data);
					userRoleInfoJson=userRoleJson;

					var rep="";
					var finalJson={};
					for(i=0;i<userRoleJson.length;i++){
						var RoleName=userRoleJson[i].roleName.trim().toUpperCase();
						var UserRoleId=userRoleJson[i].userRoleId;
						var rep="<option data-value='"+UserRoleId+"'>"+RoleName+"</option>";
						finalJson[RoleName]=rep;
						}
					userRoleJson=finalJson;
				}
			});
					
	}

	var userRoleIdValue="";
	function getWorkflowUserRoleData(){
		$("#assignUserRoleId").on('input',function(){
			userRoleIdValue="";
			var thisReq=$(this);
			var enteredValue = $(thisReq).val();
		    var currentDataList=$(thisReq).attr('list');
		    
		    var respVal=showWorkflowRestrictionUserRoleDataList(enteredValue,currentDataList,$(thisReq).attr('id'));
		    if(respVal){
		    	enteredValue=respVal;
		    }
		   $('#'+currentDataList + ' option').filter(function() {
			  			if($(this).val() === enteredValue && enteredValue){
			  				userRoleIdValue=$(this).attr('data-value');
			  				$('#'+currentDataList).empty();
			  				return userRoleIdValue;
			  		}
		       });	  
		    return userRoleIdValue ; // contains value
		});
		
	}

	function addWorkflowRestrictionUserRole()
	{
		workflowRestrictionUserRole(userRoleInfoJson);
	}

	var workflowUserRoleIdarray = [];
	function workflowRestrictionUserRole(userRoleInfoJson){
		var RoleName="";
		var UserRoleId="";
		var flag=false;
		for(var i = 0; i < userRoleInfoJson.length; i++)
		{
			if(userRoleInfoJson[i].userRoleId == userRoleIdValue)
			{
				RoleName = userRoleInfoJson[i].roleName;
				UserRoleId = userRoleInfoJson[i].userRoleId;
			}
		}
		dt = $('#assignWorkflowUserRole').DataTable();
		$('#assignWorkflowUserRole').DataTable().rows().every( function ( rowIdx, tableLoop, rowLoop )
	 		    {
	 		    	var row_id = dt.row( [rowIdx] ).id();
	 				if(UserRoleId==row_id)
	 			    flag = true;	 				
	 				$.each( workflowUserRoleIdarray, function( i,value ){
	 					  if(UserRoleId==value)
	 						  flag=true;
	 					});	 				
	 			 })
	 	 if(flag==false){		 
		var rowIndex = $('#assignWorkflowUserRole').dataTable().fnAddData( [
				RoleName,
	    		"<a href=javascript:deleteWorkflowRestrictionUserRole('"+UserRoleId+"')>Delete</a>"
	    		]);
	    var row = $('#assignWorkflowUserRole').dataTable().fnGetNodes(rowIndex);
	    $(row).attr('id', UserRoleId);
	    workflowUserRoleIdarray.push(UserRoleId);
	 	}	
		 	else{
		 		showMessage("Role already present in the list", "error");
		 	}	
	}
	function deleteWorkflowRestrictionUserRole(UserRoleId)
	{
		workflowUserRoleIdarray.splice(workflowUserRoleIdarray.indexOf(UserRoleId),1);
		$('#assignWorkflowUserRole').dataTable().fnDeleteRow('#'+UserRoleId);
	}

	function checkedWorkflowRestrictionDetails(obj)
	{
		$('.modal').on('hidden.bs.modal', function() {
			workflowUserRoleIdarray=[];
			workflowUsersIdarray=[];
		});
		
		var deptId = obj['deptId'];
		var workflowInstId = obj['workflowInstId'];
		var userOrRoleId = obj['userOrRoleId'];
		var escalationId = obj['escalationId'];
		if(deptId==1)
		$( "#deptId" ).prop( "checked", true );
		if(workflowInstId==1)
		$( "#workflowInstId" ).prop( "checked", true );
		if(escalationId==1)
		$( "#escalationId" ).prop( "checked", true );
		$('#userOrRoleId').val(userOrRoleId);
		switch(parseInt(userOrRoleId))
		{
			case 1 : 
				 $('#showUsers').show();
				 $('#showUserRole').hide();
				break;
			case 2 :
				 $('#showUserRole').show();
				 $('#showUsers').hide();
				break;
			default : 
				 $("#showUsers").hide();
		  		 $("#showUserRole").hide();
				break;
		
		}
		for(i in useroleList)
		{ 
		    workflowUserRoleIdarray.push(useroleList[i].UserRoleId);
		}
		for(i in userinfoList)
		{ 
			workflowUsersIdarray.push(userinfoList[i].UserId);
		}
	}

//***********************EndWorkflowRestriction*******************************************************//
	
////////////////////SRN Generation/////////////
	
	
function getSRNSelectedData(controllermode,actionType){
	
	var formData = {
			menuId : this.menuId,
			url : this.url,
			controllerMode : controllermode,
			actionType : actionType,
			instId : $('#instIdSearch').val(),
			batchId : $('#batchIdSearch').val(),
			programId : $('#programsearch').val(),
			branchId: $('#branchsearch').val(),
			entryType: $('#entryTypesearch').val()
		};
		bgCurtain();
		doAjaxCall(this.url, 'GET', formData, function(data) {
			
			$("#SelectedDataByFilter").html(data);
			
			removeBgCurtain();
		});
	
	
}

function handleGenerateSRN(controllermode,actionType,title,instId,batchId,programId,branchId,isnormalentry){
	
	var formData = {
			menuId : this.menuId,
			url : this.url,
			controllerMode : controllermode,
			actionType : actionType,
			instId : instId,
			batchId : batchId,
			programId : programId,
			branchId: branchId,
			entryType: isnormalentry
		};
	getConfirmDialog(title, "Are you sure you want to "+title+" ?", function(data) {
		bgCurtain();
		doAjaxCall(this.url, 'GET', formData, function(data) {
			removeBgCurtain();
			var dataArray = data.split("_");
			var status = dataArray[0].toUpperCase();
			var statusResp = dataArray[1];
			if (status == "SUCCESS") {
				showMessage(statusResp, "success");
				getSRNSelectedData(9920,8);
			}else{
				showMessage(statusResp, "error");
			}
			
		});
	},false);
	
}
function handleSRNViewStudents(controllermode,actionType,instId,batchId,programId,branchId,isnormalentry){
	
	var formData = {
			menuId : this.menuId,
			url : this.url,
			controllerMode : controllermode,
			actionType : actionType,
			instId : instId,
			batchId : batchId,
			programId : programId,
			branchId: branchId,
			entryType: isnormalentry
		};
	var buttons = [

		{
			type : "cancel",
			label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
			className : "btn-sm btn-default",
			callback : null
		} ];
		bgCurtain();
		doAjaxCall(this.url, 'GET', formData, function(data) {
			getModalDialog('large', "Student Details", data, buttons, function() {
				

			});
			
		});
	
}
function handleSRNGenerateReset(){
	 $('#batchIdSearch').val(''),
	 $('#programsearch').val(''),
	 $('#branchsearch').val(''),
	 $('#entryTypesearch').val('')
}
//////////////////End SRN Generation/////////////||||||| 

//***********************EndWorkflowRestriction*******************************************************//
	
	
//----------------------------- Recipient Configuration - Start ---------------------------------------//
	
function manageRecipientData(controlMode, actionType, manageDataId, selectedDataId) {
		
	bgCurtain();
	var formData = {
		controllerMode : controlMode,
		actionType : actionType,
		id : manageDataId,
		menuId : this.menuId,
		selectedData : selectedDataId
	};
	
	var buttons = [
		{
			type : "button",
			label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true'></span>Save",
			className : "btn-sm btn-default",
			callback : function() {
				return saveRecipientData(manageDataId);
			}
		},
		{
			type : "cancel",
			label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
			className : "btn-sm btn-default",
			callback : function(data) {
				getConfirmDialog("Cancel Recipient Data", "Are you sure you want to close ?",
						function() {
							modalDialog.modal('hide');
						});
				return false;
			}
		} ];
	
	doAjaxCall(this.url, 'GET', formData, function(data) {
		getModalDialog('large', 'Manage Recipient Data', data, buttons, function() {
			removeBgCurtain();
		});
	});
}

// Declaring And Initializing Global Variables For Recipient Data.
var recipientEmailJson = "";
var recipientEmailIdValue = "";
var recipientEmailInfoJson = "";
var recipientUserIdArray = [];

function insertUserIdsIntoArray() {
	recipientUserIdArray = $('#userIdArray').val().split(",");
	recipientUserIdArray.splice(-1, 1);
}

// Search Operation - getRecipientEmailIdBySearch
function getRecipientEmailBySearch(where, id) {
	if(!where) {
		return;
	}
	var formData = {
			id : id,
			where : where,
			menuId : this.menuId,
	};
	doAjaxCall('/Academy/a/g/getRecipientEmailIdBySearch/', 'GET', formData, function(data) {
		if(data) {
			recipientEmailJson = "";
			recipientEmailJson = JSON.parse(data);
			recipientEmailInfoJson = recipientEmailJson;

			var rep = "";
			var finalJson = {};
			for(i = 0; i < recipientEmailJson.length; i++) {
				var userId = recipientEmailJson[i].UserId;
				var firstName = recipientEmailJson[i].FirstName.trim().toUpperCase();
				var email = recipientEmailJson[i].Email.trim().toUpperCase();
				var rep = "<option data-value='" + userId + "'>" + firstName + " - " + email + "</option>";
				finalJson[firstName + " - " + email] = rep;
			}
			recipientEmailJson = finalJson;
		}
	});
}

// Fetch Data - getRecipientEmailData
function getRecipientEmailData() {
	$("#emailId").on('input', function() {
		recipientEmailIdValue = "";
		var thisReq = $(this);
		var enteredValue = $(thisReq).val();
	    var currentDataList = $(thisReq).attr('list');
	    
	    var respVal = showRecipientEmailDataList(enteredValue, currentDataList, $(thisReq).attr('id'));
	    if(respVal) {
	    	enteredValue = respVal;
	    }
	   
	    $('#'+currentDataList + ' option').filter(function() {
	    	if($(this).val() === enteredValue && enteredValue) {
	    		recipientEmailIdValue = $(this).attr('data-value');
	    		$('#'+currentDataList).empty();
	    		return recipientEmailIdValue;
	    	}
	    });	  
	    return recipientEmailIdValue;
	});
}

function showRecipientEmailDataList(value, dataListId, inuptId) {
	$('#'+dataListId).empty();
	var rep = "";
	if(value) {
		var email = value.trim().toUpperCase();
		var count = 0;
		for(var f in recipientEmailJson) {
			if(f.indexOf(email) >= 0) {
				rep += recipientEmailJson[f];
				count++;
				if(count == 10) break;
			}
		}
	}
	$('#'+dataListId).append(rep);
}

// New One - Add RecipientEmailData.
function addRecipientEmailData() {
	if ($('#emailId').val() == '') {
		showMessage("Select Email Id", "error");
	} else {
		takeRecipientEmailData(recipientEmailInfoJson);
	}
}

function takeRecipientEmailData(recipientEmailInfoJson) {
	
	var flag = "";
	var userId = "";
	
	var firstName = "";
	var emailId = "";
	var mobileNo = "";
	
	for(var i = 0; i < recipientEmailInfoJson.length; i++) {
		if(recipientEmailInfoJson[i].UserId == recipientEmailIdValue) {
			userId = recipientEmailInfoJson[i].UserId;
			firstName = recipientEmailInfoJson[i].FirstName;
			emailId = recipientEmailInfoJson[i].Email;
			mobileNo = recipientEmailInfoJson[i].Mobile;
		}
	}
	
//	Checking Whether Email Is Already Present In The List.
	$('#assignRecipientData tr').each(function() {
		console.log($(this).attr("id"));
		if(userId == $(this).attr("id"))
			flag = true;
	})
	
	if(flag == false) {
		if(userId != "") {
			recipientUserIdArray.push(userId);
			var markup = "<tr id = " + userId + "><td>" + firstName + "</td><td>" + emailId + "</td><td>" + mobileNo + "</td><td><a href=\"javascript:removeRecipientEmailData('" + userId + "')\"><span class='glyphicon glyphicon-trash' aria-hidden='true'></span></a></td></tr>";
	        $("#recipientDataBody").append(markup); 
		} else {
			showMessage("Please Enter Valid", "error");
		}
	} else {
		showMessage("Recipient Email Id Already Present", "error");
	}
}

//	Saving Recipient Data.
function saveRecipientData(id) {
	
	if (!$("#saveRecipientData").valid()) {
		showMessage("Select valid inputs", "error");
		return false;
	}
	
	bgCurtain();
	
	var formData = {
			id : id,
			controllerMode : 7650,
			actionType : 181,
			communicationTpye : $('#communicationType').val(),
			recipientUserIdArray : JSON.stringify(recipientUserIdArray),
			menuId : this.menuId
	}
	doAjaxCall(this.url, 'GET', formData, function(data) {
		removeBgCurtain();
		var dataArray = data.split("_");
		var status = dataArray[0].toUpperCase();
		var statusResp = dataArray[1];
		if (status == "SUCCESS") {
			showMessage(statusResp, "success");
		} else {
			showMessage(statusResp, "error");
		}
	});
}

function removeRecipientEmailData(userId) {
	removeRecipientEmailDataFn(userId, recipientEmailInfoJson);
}

function removeRecipientEmailDataFn(userId, recipientEmailInfoJson) {
	var index = recipientUserIdArray.indexOf(userId);
	if (index > -1) {
		recipientUserIdArray.splice(index, 1);
	}
	$('#recipientDataBody').html('');
	
	 for(var i = 0; i<recipientUserIdArray.length; i++) {
		 
		 var remainingUsrIdsFrmArry = recipientUserIdArray[i];
		 
//		 var flag = "";
		 var remainingUsrId = "";
			
		 var firstName = "";
		 var emailId = "";
		 var mobileNo = "";
			
		 for(var i = 0; i < recipientEmailInfoJson.length; i++) {
			 if(recipientEmailInfoJson[i].UserId == remainingUsrIdsFrmArry) {
				 remainingUsrId = recipientEmailInfoJson[i].UserId;
				 firstName = recipientEmailInfoJson[i].FirstName;
				 emailId = recipientEmailInfoJson[i].Email;
				 mobileNo = recipientEmailInfoJson[i].Mobile;
			 }
		 }
			
//		 Checking Whether Email Is Already Present In The List.
//		 $('#assignRecipientData tr').each(function() {
//			 console.log($(this).attr("id"));
//			 if(remainingUsrId == $(this).attr("id"))
//				 flag = true;
//		 })
			
//		 if(flag != true) {
		 var markup = "<tr id = " + userId + "><td>" + firstName + "</td><td>" + emailId + "</td><td>" + mobileNo + "</td><td><a href=\"javascript:removeRecipientEmailData('" + remainingUsrId + "')\"><span class='glyphicon glyphicon-trash' aria-hidden='true'></span></a></td></tr>";
		 $("#recipientDataBody").append(markup); 
//		 } 
	 }
}
//----------------------------- Recipient Configuration - End ---------------------------------------//>>>>>>> .r4342


// ------------------------ Manage batches Select All Functionality For 'Get Student' START--------------------------------

function checkStudentsForManageBatches(thisReq)
{
	if(!$(thisReq).is(':checked')) {
		$(thisReq).removeAttr('checked');
		assignedfacultyIdarray.splice(assignedfacultyIdarray.indexOf(this),1);
		$('#checkboxesStudent').prop('checked', false);
	} 	
	
	var isAllChecked = 0;
	$('#SubjectBatchDetailTable').DataTable().rows().every( function ( rowIdx, tableLoop, rowLoop ) {
		if(!$(this.node()).children().find('input').is(':checked')){
			isAllChecked=1;
			return false
		   }
    });
	$("#checkboxes-0").prop("checked", false);
	 if ($('#SubjectBatchDetailTable').children('tbody').children('tr').length!=0 && isAllChecked == 0) {
		 $("#checkboxesStudent").prop("checked", true);
     } 
	 
}

//------------------------ Manage batches Select All Functionality For 'Get Student' END--------------------------------
//-----------------------------multi-institute esa allocation -  ---------------------------------------//
function esaAllocationDataBasedOnInstitute(seatingAloocationId)
{
	var institutionId = $('#institutionId').val();
	var formData = {
			controllerMode : 370,
			actionType : 165,
			menuId : this.menuId,
			esaId : $("#esaId").val(),
			selectedData:$("#selectedData").val(),
			groupId:$("#groupId").val(),
			seatingAloocationId:seatingAloocationId,
			institutionId : institutionId
		};
	if(parseInt(institutionId)>0)
	{
		bgCurtain();
		doAjaxCall(this.url, 'get', formData, function(data) {
			$("#allocationDataBasedOnInstitute").html(data);
			removeBgCurtain();
		});
	}
}
//-----------------------------multi-institute esa allocation- End ---------------------------------------//


//****************** ISA Result Report start *************//


function getStudentISAResultBySearch(controllerMode,actionType,id,reportType){
	
	if (!$("#genericSave").valid())
		return false;
	
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			id : id,
			reportType : reportType, 
			batchClassId:$('#batchClassId').val(),
			menuId : this.menuId,
		};
	bgCurtain();
	doAjaxCall(this.url, 'POST', formData, function(data) {
		$("#showSectionWiseISAResult").html(data);
		removeBgCurtain();
	});
	
	
}


 function getReportStudentISAResult() {
	 
	 if (!$("#genericSave").valid())
			return false;
	 
	  	type="774_1";
	   batchclass=$('#batchClassId').val();
	 
	  var urlForReport="reports/Reports/AdminReport/"+type+"/"+0+"/"+null+"/"+null+"/"+0+"/"+0+"/"+0+"/"+0+"/"+0+"/"+0+"/"+batchclass+"/"+0+"/"+0+"/"+0+"/"+0+"/"+0;

 var w=window.open(urlForReport,null);
 }
 
 
 function resetStudentISAResult(){
	 $('#instId').val('');
	 $('#programId').val('');
	 $('#deptId').val('');
	 $('#batchId').val('');
	 $('#batchClassId').val('');
	 $("#showSectionWiseISAResult").html('');
	 
 }
 
 
 function analysisStudentISAStatistics(){
	 
		bgCurtain();
		var title = 'Statistics: ';
		var formData = {
			controllerMode : 7660,
			actionType : 166,
			instId :  $('#instId').val(),
			programId : $('#programId').val(),
			deptId : $('#deptId').val(), 
			batchId : $('#batchId').val(), 
			batchClassId : $('#batchClassId').val(), 
			menuId : this.menuId,
		};
		var buttons = [
			/*{
				type : "button",
				label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true'></span>Save",
				className : "btn-sm btn-default",
				callback : function(e) {
					
				}
			},
*/				{
				type : "cancel",
				label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
				className : "btn-sm btn-default",
				callback : function(e) {
				}
			}
			];
		doAjaxCall(this.url, 'POST', formData, function(data) {
			getModalDialog('large', title, data,buttons, function() {
				/*$("#adminData").html(data);*/
			});
			removeBgCurtain();
		});
 }
//****************** ISA Result Report end *************//
 
 function checkMinMaxRangeFrPh(value, min, max) {
	 if (parseInt(value, 10) >= min && parseInt(value, 10) <= max) {
		 return true;
	 } else {
		 return false; // Not in range.
	 }
 }
 
//Save Visitor Details.
 function saveVisitorDetails() {
	 
//	 FirstName Validation.
	 if($('#firstName_1').val()) {
		 $('#firstNameError').html('');
	 } else {
		 $('#firstNameError').html('Please Enter First Name');
		 return false;
	 }
	 
//	 Email Validation.
	 var filter = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
	 if (!filter.test($('#emailId').val())) {
		 $('#emailIdError').html('Please Enter Valid Email ID');
		 return false;
	 } else {
		 $('#emailIdError').html('');
	 }
	 
//	Phone Number Validation.
	var number_regex = /^[0-9]+$/;
	var isClassExist = "user_field";
	var inputVal = $('#mobile').val();
	if (!inputVal && $('#mobile').hasClass(isClassExist)) {
		$('#mobileNumberError').html('Please Enter Valid Mobile Number');
		return false;
	} else if (!inputVal.match(number_regex) && inputVal) {
		$('#mobileNumberError').html('Please Enter Valid Mobile Number');
		return false;
	} else if (!checkMinMaxRangeFrPh(inputVal.length,10,20) && $('#mobile').hasClass(isClassExist)) {
		$('#mobileNumberError').html('Please Enter Valid Mobile Number');
		return false;
	} else {
		$('#mobileNumberError').html('');
	}
	
//	 PassWord Validation.
	 if($('#password').val()) {
		 $('#passwordError').html('');
	 } else {
		 $('#passwordError').html('Please Enter Password');
		 return false;
	 }
 	 
// 	 $("#regform_submit").click(function(e) {
// 		
// 		 var valid = isValid('genericSaveVisiotorDetails', validateClass);
// 		 
// 		 if (valid == true) {
// 			 $("#regform_submit").attr("disabled", "disabled");
// 			 var postData = $('#genericSaveVisiotorDetails').serializeArray();
// 			 var formURL = $('#genericSaveVisiotorDetails').attr("action");
// 			 var formData = new FormData($('#genericSaveVisiotorDetails')[0]);
 			 
 			 var formData = {};
 			 
// 			 General Form Validation.
 			 if (!$("#genericSaveVisiotorDetails").valid()) {
 				 showMessage("Select valid inputs", "error");
 				 return false;
 			 }
 			 
 			 bgCurtain();
 					 	
// 			 Inserting All Values Into FormData.
 			 formData.firstName = $('#firstName_1').val();
 			 formData.middleName = $('#middleName_1').val();
 			 formData.lastName = $('#lastName_1').val();
 			 
// 			 formData.aadhaarNo = $('#AadhaarCardNo').val();
 			 
 			 formData.email = $('#emailId').val();
 			 formData.reEmail = $('#emailId').val();
 			 
 			 formData.contactNumber = $('#mobile').val();
 			 formData.reContactNumber = $('#mobile').val();
 			 
 			 formData.password = $('#password').val();
 			 formData.rePassword = $('#confirm_password').val();
 			 
 			 formData.instId = $('#getInstId').val();
 			 formData.programId = $('#getProgramId').val();
 			 formData.branchId = $('#getBranchId').val();
 			 formData.quotaId = $('#getQuotaId').val();
 			 formData.pessatApplNo = $('#pessatApplNo').val();
 			 
 			 doAjaxCall('/Academy/vms/saveVisitorDetails', 'POST', formData, function(data) {
 				 removeBgCurtain();
 				 var dataArray = data.split("_");
 				 var status = dataArray[0].toUpperCase();
 				 var statusResp = dataArray[1];
 				 if (status == "SUCCESS") {
 					 showMessage(statusResp, 'success');
 					 $('#rigister_form').hide();
 					 $('#rigister_confirm').show();
 					 $('#successMsg').append("We have sent an email, you need to verify your email to continue. If you have not received the verification email, please check your \"Spam\" or \"Bulk Email\" folder. And your<br><br> reference number is <b><font size=\"6\" color=\"black\">" + dataArray[2] + "</font></b>. Please wait in queue, your name will be called on screen.");
 					 $('#genericSaveVisiotorDetails').trigger('reset');
 					 $('#genericSaveVisiotorDetails')[0].reset();
 					 updateTokenList("", dataArray[4]);
 					 return false;
 				 } else if(status == "ERROR") {
 					 showMessage(statusResp, 'error');
 				 }
 			 });
// 		 }
// 	 });
 	 
// 	 $('#genericSaveVisiotorDetails')[0].reset();
// 	 validateFields('genericSaveVisiotorDetails', validateClass);
// 	 validateNonMandatoryFields('genericSaveVisiotorDetails',nonMandatoryClass);
 }
 
//******************ESA TimeTable********************//
 function checkESASemProgram(thisReq)
 {
 	var esaTimeTableInfo=getEsaTimeTableInfo();
 	var validateObject = {};
 	var obj = esaTimeTableInfo[1];
 	var dateObj={};
 	var pgmObj={};
 	var semId=[];
 	for(date in obj)
 	{
 		dateObj={};
 		if(obj.hasOwnProperty(date))
 		{
 			dateObj = obj[date];
 			for(pgm in dateObj)
 			{
 				pgmObj={};
 				semId=[];
 				if(dateObj.hasOwnProperty(pgm))
 				{
 					pgmObj = dateObj[pgm];
 					semId=pgmObj["semIds"];
 					for (i in semId)
 					{
 						var key = date+"&&"+pgmObj["programId"]+"&&"+pgmObj["slotId"]+"&&"+semId[i];
 						var id = $(thisReq).attr('id');
 						if(validateObject.hasOwnProperty(key))
 						{
 							showIdMessage('Semester already exists', 'error', id, 'top');
 							$('#'+id).val('');
 							return;
 						}
 						else
 						validateObject[key]=pgmObj["subjectCode"];
 					}
 				}
 			}

 		}
 	}
 }
 //******************End ESA TimeTable********************//
//******************Database Backup********************//
 function handleDatabaseBackup(controllerMode,actionType,id,selectedId)
 {
 	var formData = {
 			controllerMode : controllerMode,
 			actionType : actionType,
 			id : id,
 			selectedId : selectedId,
 			menuId : this.menuId
 	};
 	var title='';
 	if(parseInt(id)===0)
 		title="Add Database Backup";
 	else
 		title="Edit Database Backup, Name : "+selectedId.split("_")[0];
 	bgCurtain();
 	var buttons = [	
 		{
 			type : "button",
 			label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id=''></span>Get Backup",
 			className : "btn-sm btn-default",
 			callback : function(e) {	
 				saveDatabaseBackup();
 				return false;
 			}
 		},
 		{
 			type : "cancel",
 			label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
 			className : "btn-sm btn-default",
 			callback : null
 		} ];
 	
 	bgCurtain();

 	doAjaxCall(this.url, 'GET', formData, function(data) {
 		getModalDialog('large', title, data, buttons, function() {
 		});
 	});
 }
 function saveDatabaseBackup(databaseBackupId,database,description,type,tableNames,path)
 {
 	if (!$("#genericSave").valid())
 		return false;
 		var databaseBackupId = $('#databaseBackupId').val();
		var database = $('#database').val();
		var description = $('#description').val();
		var type = $('#type').val();
		var tableNames = $('#statusId').val();
		if(parseInt(type)>0)
		{
			if(!$('#statusId').val()){
				showMessage("Select Tables", "error");
				return;
			}
		}
		var path = $('#path').val();
		actionType = $('#actionType').val();
 	bgCurtain();
 	var formData = {
 			controllerMode : controllerMode,
 			actionType : actionType,
 			menuId : this.menuId,
 			databaseBackupId : databaseBackupId,
 			database : database,
 			description : description,
 			type : type,
 			tableNames : JSON.stringify(tableNames),
 			path : path
 	};	
 doAjaxCall(this.url, 'GET', formData, function(data) {
	document.getElementById("path").value ='';
 	removeBgCurtain();
 	var dataArray = data.split("_");
 	var status = dataArray[0].toUpperCase();
 	var statusResp = dataArray[1];
 	var path = dataArray[2]+"_"+dataArray[3]+"_"+dataArray[4]+"_"+dataArray[5];
 	if (status == "SUCCESS") {
 		showMessage(statusResp, "success");
 		document.getElementById("path").value = path;
 		$("#menuTab_" + this.menuId).trigger("click");
 	}else{
 		showMessage(statusResp, "error");
 	}
 });		
 	
 }
function getTablesBasedOnDatabaseIdForBackup()
{
	$('#selectedCheck').html('');
	getCheckCombobox('/Academy/a/i/getTablesBasedOnDatabase/'+$('#database').val()+'/'+$('#type').val(), 'status-statusId',null,null,null,function(){
		$('#status li:first-child').prepend('<li><a href="#" class="small" data-value="1" tabindex="-1" style="text-decoration:none;color:black"><input id="checkcomboid_0" value="0" name="checkcomboname" type="checkbox">&nbsp;All</a></li>');
	});
}
function checkedDatabaseBackupDetails(obj)
{
	checkComboValues = {};
	var database = obj['database'];
	var type = obj['type'];
	var tbls = obj['tbls'];
	if(tbls){
		$('#status').val(tbls);
	}
	var tblNames = tbls.split(",");
	$('#type').val(type);
	tblNames.forEach(function(entry){
		var tmp = {
				id : 'checkcomboid_'+entry,
				value : entry,
				label : entry,
				currentIdComBoId:'status'
			}
		checkComboValues['checkcomboid_'+entry] = tmp;
	});
	if(database&&type)
	{
		getCheckCombobox('/Academy/a/i/getTablesBasedOnDatabase/'+database+'/'+type, 'status-statusId',null,null,null,function(){
			$('#status li:first-child').prepend('<li><a href="#" class="small" data-value="1" tabindex="-1" style="text-decoration:none;color:black"><input id="checkcomboid_0" value="0" name="checkcomboname" type="checkbox">&nbsp;All</a></li>');
		});
	}
}
function getDatabaseBackup(controllerMode,actionType,id,selectedId)
{
 	var formData = {
 			controllerMode : controllerMode,
 			actionType : actionType,
 			id : id,
 			selectedId : selectedId,
 			menuId : this.menuId
 	};
 	getConfirmDialog("Get Backup : "+selectedId.split("_")[0], "Are you sure you want to continue ? ", function() {
 	bgCurtain();
 	doAjaxCall(this.url, 'GET', formData, function(data) {
 	 	removeBgCurtain();
 	 	var dataArray = data.split("_");
 	 	var status = dataArray[0].toUpperCase();
 	 	var statusResp = dataArray[1];
 	 	if (status == "SUCCESS") {
 	 		showMessage(statusResp, "success");
 	 		$("#menuTab_" + this.menuId).trigger("click");
 	 	}else{
 	 		showMessage(statusResp, "error");
 	 	}
 	});
 	});
}
 //******************End Database Backup********************//
//******************Manage Backlog students********************//
function handleBacklogStudents(controllerMode,actionType,id,selectedId)
{
	var formData = {
			controllerMode : controllerMode,
			actionType : actionType,
			id : id,
			selectedId : selectedId,
			menuId : this.menuId
	};
	var title="Manage Backlog Students : "+selectedId.split(":")[1];
	bgCurtain();
	var buttons = [ 
		{
			type : "button",
			label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id=''></span>Save",
			className : "btn-sm btn-default",
			callback : function(e) {
				var assignedstudentIdarray=[];
				var unassignedstudentIdarray=[];
				$('.studentclass').each(function(){
					if($(this).is(":checked")){
						assignedstudentIdarray.push($(this).attr('id'));
					}else{
						unassignedstudentIdarray.push($(this).attr('id'));
					}

				});
				if(!$('#srn').val() || $('#srn').val().trim()=='')
				{
					showMessage("Please add SRN/LoginId", "error");
					return false;
				}else if(assignedstudentIdarray.length==0 && unassignedstudentIdarray.length==0)
				{
					showMessage("Please assign/unassign at least one subject", "error");
					return false
				}else
					saveBacklogStudents(id,assignedstudentIdarray,unassignedstudentIdarray);
				return false;
			}
		},
		{
			type : "cancel",
			label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
			className : "btn-sm btn-default",
			callback : function(e) {
				$('#backlogId').prop('checked', true);
				getBacklogStudents();
				esaElegibleStudentSearch(370,37,1);
			}
		}];

	bgCurtain();

	doAjaxCall(this.url, 'GET', formData, function(data) {
		getModalDialog('large', title, data, buttons, function() {
			closeBacklogStudents();
		});
	});
}
function closeBacklogStudents()
{
	$('[data-dismiss="modal"]').on("click", function(){
		preventCloseWarningMsg();
		$('#backlogId').prop('checked', true);
		getBacklogStudents();
		esaElegibleStudentSearch(370,37,1);
		return false;
	});
}
function showSubjectCodeDataList(value,dataListId,inuptId)
{
	$('#'+dataListId).empty();
	var rep="";
	if(value){
	var name=value.trim().toUpperCase();
	var count=0;
		for(var f in subjectJson){
			if(f.indexOf(name)>=0){
				rep+=subjectJson[f];
				count++;
				if(count==10)break;
			}
	}
	}
			$('#'+dataListId).append(rep); 
}

var subjectJson="";
var subjectInfoJson="";
function getSubjectBySearch(where,id){
	if(!where)
	  return;
		var formData = {
				menuId:this.menuId,
				where:where,
				id:id,
			};
			doAjaxCall('/Academy/a/i/subjectCodes', 'GET', formData, function(data) {
			if(data){
				subjectJson="";
				subjectJson=JSON.parse(data);
				subjectInfoJson=subjectJson;

				var rep="";
				var finalJson={};
				for(i=0;i<subjectJson.length;i++){
					var SubjectId=subjectJson[i].subjectId;
					var SubjectCode=subjectJson[i].subjectCode.trim().toUpperCase();
					var SubjectName=subjectJson[i].subjectName.trim().toUpperCase();
					SubjectName=SubjectName.replace(/\s\s+/g, ' ');
					var rep="<option data-value='"+SubjectId+"'>"+SubjectCode+"-"+SubjectName+"</option>";
					finalJson[SubjectCode+"-"+SubjectName]=rep;
					}
				subjectJson=finalJson;
			}
		});
				
}
var subjectCodeValue="";
function getSubjectCodeData(){
	$("#subjectId").on('input',function(){
		subjectCodeValue="";
		var thisReq=$(this);
		var enteredValue = $(thisReq).val();
	    var currentDataList=$(thisReq).attr('list');
	    
	    var respVal=showSubjectCodeDataList(enteredValue,currentDataList,$(thisReq).attr('id'));
	    if(respVal){
	    	enteredValue=respVal;
	    }
	   $('#'+currentDataList + ' option').filter(function() {
		  			if($(this).val() === enteredValue && enteredValue){
		  				subjectCodeValue=$(this).attr('data-value');
		  				$('#'+currentDataList).empty();
		  				return subjectCodeValue;
		  		}
	       });	  
	    return subjectCodeValue ; // contains value
	});
	
}

var equivalentSubjectCodeValue="";
function getEqvSubjectCodeData(){
	$("#equivalentSubjectId").on('input',function(){
		equivalentSubjectCodeValue="";
		var thisReq=$(this);
		var enteredValue = $(thisReq).val();
	    var currentDataList=$(thisReq).attr('list');
	    
	    var respVal=showSubjectCodeDataList(enteredValue,currentDataList,$(thisReq).attr('id'));
	    if(respVal){
	    	enteredValue=respVal;
	    }
	   $('#'+currentDataList + ' option').filter(function() {
		  			if($(this).val() === enteredValue && enteredValue){
		  				equivalentSubjectCodeValue=$(this).attr('data-value');
		  				$('#'+currentDataList).empty();
		  				return equivalentSubjectCodeValue;
		  		}
	       });	  
	    return equivalentSubjectCodeValue ; // contains value
	});
	
}

function addStudentsForManageBacklogs()
{
	if (!$("#genericSave").valid())
 		return false;
	var srn = $('#srn').val();
	if(srn.trim()=='')
	{
		showMessage("Please enter SRN/LoginId", "error");
		return false;
	}
	var eqvsubId ="";
	var subjectId ="";
	var eqvsubCode ="";
	var subjectCode ="";
	for(var i = 0; i < subjectInfoJson.length; i++)
	{
		if(subjectInfoJson[i].subjectId == equivalentSubjectCodeValue)
		{
			eqvsubId = subjectInfoJson[i].subjectId;
			eqvsubCode = subjectInfoJson[i].subjectCode;
		}
		if(subjectInfoJson[i].subjectId == subjectCodeValue)
		{
			subjectId = subjectInfoJson[i].subjectId;
			subjectCode = subjectInfoJson[i].subjectCode;
		}
	}
	if(subjectId=='')
	{
		showMessage("Please add subject", "error");
		return false;
	}
	else if(eqvsubId=='')
	{
		showMessage("Please add equivalent subject", "error");
		return false;
	}
	addStudentsForManageBacklogsStd(srn,subjectId,subjectCode,eqvsubId,eqvsubCode);
}
function addStudentsForManageBacklogsStd(srn,subjectId,subjectCode,eqvsubId,eqvsubCode){
	 
    dt = $('#assignBacklogStudents').DataTable();
    $('#assignBacklogStudents').DataTable().rows().every( function ( rowIdx, tableLoop, rowLoop )
       {
                 var row_id = dt.row( [rowIdx] ).id();
                 if(eqvsubId==row_id)
                 flag = true;     
                 $('[data-manageBacklogs="mb"]').each(function(i){
                     if(eqvsubId==$('[data-manageBacklogs="mb"]')[i].value)
                          flag=true;
                 })
       })
      if(flag==false){         
         var rowIndex = $('#assignBacklogStudents').dataTable().fnAddData( [
            '<label class="checkbox-inline" for="'+subjectId+'"> <input type="checkbox" id="'+subjectId+'&&'+eqvsubId+'" data-manageBacklogs="mb" class="studentclass" name="subject_'+subjectId+'" value="'+eqvsubId+'" checked onclick=checkBacklogStudents(this)>',
            srn,
            subjectCode,
            eqvsubCode,
            'In-Eligible',
            '<a href="javascript:removeBacklogStudents(\''+srn+'\',\''+eqvsubCode+'\',0)" class="btn btn-sm btn-default">Remove</a>'
            ]);
         subjectCodeValue="";
         equivalentSubjectCodeValue="";
         $('.testAssessments').val('');
         var row = $('#assignBacklogStudents').dataTable().fnGetNodes(rowIndex);
         $(row).attr('id', eqvsubCode.trim());
          }    
         else{
             showMessage("Subject present in the list", "error");
             flag=false;
         }    
}
function saveBacklogStudents(id,assignedstudentIdarray,unassignedstudentIdarray)
{ 
	var srn = $('#srn').val();
	assignedstudentIdarray = $.unique(assignedstudentIdarray);
	unassignedstudentIdarray = $.unique(unassignedstudentIdarray);
	var formData = {
 			controllerMode : 370,
 			actionType : 175,
 			ESAId : id,
 			srn : srn,
 			assignedstudentIdarray : JSON.stringify(assignedstudentIdarray),
 			unassignedstudentIdarray : JSON.stringify(unassignedstudentIdarray),
 			menuId : this.menuId
 	};
 	bgCurtain();
 	doAjaxCall(this.url, 'GET', formData, function(data) {
 	 	removeBgCurtain();
 	 	var dataArray = data.split("_");
 	 	var status = dataArray[0];
 	 	var statusResp = dataArray[1];
 	 	if (status == "SUCCESS") {
 	 		showMessage(statusResp, "success");
 	 		getESABacklogStudentDetails(srn);
 	 		assignedstudentIdarray=[];
 	 		unassignedstudentIdarray=[];
 	 	}else if (status == "dupSubject") {
 	 		showMessage(statusResp, "error");
 	 		getESABacklogStudentDetails(srn);
 	 		assignedstudentIdarray=[];
 	 		unassignedstudentIdarray=[];
 	 	}
 	 	else{
 	 		showMessage(statusResp, "error");
 	 	}
 	});
}
function getBacklogStudentDetails()
{
	var srn = $('#srn').val();
	if(srn.trim()=='')
	{
		showMessage("Please add SRN/LoginId", "error");
		return false;
	}
	$('#stdDetails').html('');
	var formData = {
			controllerMode : 370,
 			actionType : 174,
			loginId : srn,
			menuId : this.menuId
		};
	doAjaxCall('getStudentClassInfo', 'POST', formData, function(data) {
		var index = data.indexOf("We are unable to locate your information, please try again.");
		if(index>=0)
		{
			$('#stdDetails').html('<div class="text-center"><span  class="error" style="font-size: 13px">Student Not Found</span></div>');
			document.getElementById("srn").value = "";
		}else
		{
			$('#stdDetails').html(data);
			$("#srn").prop("readonly", true);
			$('#subjectDiv').show();
		}
		getESABacklogStudentDetails(srn);
	});
}
function getESABacklogStudentDetails(srn)
{
	$('#requestedData').html('');
	var formData = {
			controllerMode : 370,
 			actionType : 176,
			srn : srn,
			menuId : this.menuId
		};
	doAjaxCall(this.url, 'POST', formData, function(data) {
		$('#requestedData').html(data);
	});
}
function addOrRemoveBacklogStudents(thisReq)
{
	 $('#assignBacklogStudents').DataTable().rows().every( function ( rowIdx, tableLoop, rowLoop ) {
		   if($(thisReq).is(':checked') || !thisReq)
			   $(this.node()).children().find('input').prop('checked',true);
				else
			   $(this.node()).children().find('input').prop('checked',false);
		});
	   var type=2;
	   if(thisReq)
		   type=1;
}
function checkBacklogStudents(thisReq)
{
	if(thisReq && !$(thisReq).is(':checked')) {
		$(thisReq).removeAttr('checked');
		$('#checkboxes-0').prop('checked', false);
	} 
	var isAllChecked = 0;
	$('#assignBacklogStudents').DataTable().rows().every( function ( rowIdx, tableLoop, rowLoop ) {
		if(!$(this.node()).children().find('input').is(':checked')){
			isAllChecked=1;
			return false
		   }
    });
	$("#checkboxes-0").prop("checked", false);
	 if ($('#assignBacklogStudents').children('tbody').children('tr').length!=0 && isAllChecked == 0) {
		 $("#checkboxes-0").prop("checked", true);
     } 
	
}
function resetSRNForBacklogStd()
{
	document.getElementById("srn").value = "";
	$("#srn").prop("readonly", false);
	$('#stdDetails').html('');
	$('.testAssessments').val('');
	subjectCodeValue="";
    equivalentSubjectCodeValue="";
    getSubjectBySearch("search","search");
    $('#assignBacklogStudents').dataTable().fnClearTable();
}
function resetForBacklogStd()
{
	$('.testAssessments').val('');
	subjectCodeValue="";
    equivalentSubjectCodeValue="";
    getSubjectBySearch("search","search");
    $('#assignBacklogStudents').dataTable().fnClearTable();
}
function moveBacklogStudentToOtherStatus()
{
	var esaId = $('#ESAId').val();
	var srn = $('#srn').val();
	var studentId = $('#stdId').val();
	var statusId = $('#statusId').val();
	var instId = $('#instId').val();
	var assignedstudentIdarray=[];
		$('.studentclass').each(function(){
			if($(this).is(":checked")){
				assignedstudentIdarray.push($(this).attr('id'));
			}
		});
	if(assignedstudentIdarray.length==0)
	{
		showMessage("Please select at least one subject", "error");
		return false
	}
	var formData = {
 			controllerMode : 370,
 			actionType : 177,
 			esaId : esaId,
 			studentId : studentId,
 			statusId : statusId,
 			instId : instId,
 			assignedstudentIdarray : JSON.stringify(assignedstudentIdarray),
 			menuId : this.menuId
 	};
 	bgCurtain();
 	doAjaxCall(this.url, 'GET', formData, function(data) {
 	 	removeBgCurtain();
 	 	var dataArray = data.split("_");
 	 	var status = dataArray[0];
 	 	var statusResp = dataArray[1];
 	 	if (status == "SUCCESS") {
 	 		showMessage(statusResp, "success");
 	 		getESABacklogStudentDetails(srn);
 	 	}else if (status == "dupSubject") {
 	 		showMessage(statusResp, "error");
 	 		getESABacklogStudentDetails(srn);
 	 	}
 	 	else{
 	 		showMessage(statusResp, "error");
 	 	}
 	});
}
//******************End Manage Backlog students********************//


//******************Start Manage Backlog students (By Gaurav)********************//

function getBacklogStudents()
{	
	var instituteId = $("#esaInstId").val();
	if($('input:checkbox[name=backlogId]').is(':checked')){
		$("#esaProgId").prop('disabled', true).val("");
		$("#esaDeptId").prop('disabled', true).val("");
		$("#esaBranchId").prop('disabled', true).val("");
		$("#esaSemesterId").prop('disabled', true).val("");
		$("#esaCycleId").prop('disabled', true).val("");
		$("#esaSectionId").prop('disabled', true).val("");
	}
	else{
		$("#esaProgId").prop('disabled', false);
		$("#esaDeptId").prop('disabled', false);
		$("#esaBranchId").prop('disabled', false);
		$("#esaSemesterId").prop('disabled', false);
		$("#esaCycleId").prop('disabled', false);
		$("#esaSectionId").prop('disabled', false);
		
		getCombobox('/Academy/a/i/getInstituteBasedOnESAId/'+$("#esaId").val(), 'esaInstId',null,null,function(){
			if(!$("#esaInstId").attr("data-selected"))				
			$('#esaInstId option[value='+instituteId+']').attr("selected", "selected");					
		getCombobox('/Academy/a/i/esaProgramRestriction/'+$("#esaId").val(), 'esaProgId',null,null,function(){
			if(!$("#esaProgId").attr("data-selected"))
			$('#esaProgId option:first-child').attr("selected", "selected");
		getCombobox('/Academy/a/i/getRestrictedDepartmentBasedOnInstitutes/'+$("#esaInstId").val(), 'esaDeptId',null,null,function(){
			if(!$("#esaDeptId").attr("data-selected"))
			$('#esaDeptId option:first-child').attr("selected", "selected");
			getCombobox('/Academy/a/i/getBranchOfProgramByInst/'+$("#esaProgId").val(), 'esaBranchId',null,null,function(){
				if(!$("#esaBranchId").attr("data-selected"))
				$('#esaBranchId option:first-child').attr("selected", "selected");
				getCombobox('/Academy/a/i/getRestrictedclasses', 'esaSemesterId',null,null,function(){
					if(!$("#esaSemesterId").attr("data-selected"))
					$('#esaSemesterId option:first-child').attr("selected", "selected");
					getCombobox('/Academy/a/i/cycle', 'esaCycleId',null,null,function(){
						if(!$("#esaCycleId").attr("data-selected"))
						$('#esaCycleId option:first-child').attr("selected", "selected");
						getCombobox('/Academy/a/i/esaSubject/'+$("#esaId").val()+"/"+$("#esaProgId").val()+"/"+$("#esaSemesterId").val()+"/"+$("#esaCycleId").val(), 'esaSubjectId');
						getEsaSectionWise();

					});
				});
			});
		});
		});
		});
		
	}
	
}


function getBackLogStudentESAConfirm(formDataReq){
	$("[id^=currentStudentEsa_]").attr("disabled",true);
	$("#currentStudentEsa_"+formDataReq.studentId).prop('checked', true);
	if(showAction)
		return;
	
	var formData={
			menuId : this.menuId,
			controllerMode : this.controllerMode,
			actionType : 178,
			studentId:formDataReq.studentId,
			esaid:formDataReq.esaid,
			instId : formDataReq.instId,
			classBatchSectionId:formDataReq.classBatchSectionId
	}
	doAjaxCall(this.url, 'GET', formData, function(data) {
		 showAction = bootbox.dialog({
			size : 'small',
			title : "Confirm Student Reason",
			show : false,
			message : data,
			 keyboard: false,
			onEscape : function(e) {
				
			},
			buttons :[
		 		{
				   				type : "cancel",
				   				label : "<span class='glyphicon glyphicon-remove-circle' id='closeEsaConfirm' aria-hidden='true'></span>Close",
				   				className : "btn-sm btn-default",
				   				callback : function(e) {
				   					
				   				}
				}]
   			
		});
		showAction.on('shown.bs.modal', function() {

		});

		showAction.on('hidden.bs.modal', function() {
			$("[id^=currentStudentEsa_]").attr("disabled",false);
			showAction = null;
			if(formDataReq.status!=2)
			$("#currentStudentEsa_"+formDataReq.studentId).prop('checked', false);
		});
		showAction.modal('show');
		if(formDataReq.status!=2){
		var fData=JSON.stringify(formDataReq);
		$("#closeEsaConfirm").parent().before("<a href='javascript:saveStudentESAConfirmation("+fData+")' " +
		"class='btn btn-sm btn-default' id='saveESAStudentDesc'><span class='glyphicon glyphicon-ok-circle'></span>Save</a>")
		}
		$("[id^=currentStudentEsa_]").attr("disabled",false);
	});
	
}


function getEsaInstitute(value)
{	
	if($('input:checkbox[name=backlogId]').is(':checked')){		
		$("#esaDeptId").prop('disabled', true).val("");
	}
	else 
		{
		getCombobox('/Academy/a/i/getRestrictedDepartmentBasedOnInstitutes/'+$("#esaInstId").val(), 'esaDeptId',null,null,function(){
				if(!$("#esaDeptId").attr("data-selected"))
				$('#esaDeptId option:first-child').attr("selected", "selected");
		});			
	}
}



function changeBacklogStudentStatus(type,that)
{
	if(type==1)
		{
		var parent=$(that).attr('id');
		$(that).attr("is-changed",1);
		$("[id^="+parent+"_]").val($(that).val());
		$("[id^="+parent+"_]").attr("is-changed",1);
	}
	else{
		$(that).attr("is-changed",1);
	}
	
/*	$("#change-all-esa-status-select").on('change',function(){
		if(parseInt($(this).val())>=0)
			$("[id^=parent_]").val($(this).val());
	});	*/
}
//******************End Manage Backlog students (By Gaurav) ********************//

function handlePasswordOnLoad()
{
	$('#formStatus').val('');
	$('#passModalOnLoad').modal('show');
	$('#passModalOnLoad').bootstrapValidator('resetForm', true);
	callShowPassword();
	hadleChangepasswordValidationOnLoad();
	$("[id^=savePassOnLoad]").off('click');
	$("[id^=savePassOnLoad]").on('click',function(){
				var idArray = this.id.split("_");
				var url = idArray[1];
				if ($('#newPassOnLoad').val() == ''
						|| $('#newPass1OnLoad').val() == '') {
					$('#formStatusOnLoad').text("Please fill all required fields");
					return false;
				}
				var formData = {
						'oldPass' : $('#oldPassOnLoad').val(),
						'newPass' : $('#newPassOnLoad').val(),
						'newPass1' : $('#newPass1OnLoad').val()
					};
					$.ajax({
						type : 'POST',
						url : url,
						data : formData,
						success : function(data, xhr) {
							var dataArray = data.split("_");
							var status = dataArray[0];
							var statusVal = dataArray[1];
							if (status == "1001") {
								setEmptyCookie("username_"+$('#cookieLoginId').val(),  "");
								$('#passModalOnLoad').modal('hide');
								$('#respModal').modal('show');
								$('#passFormOnLoad')[0].reset();
								$('#respStatus').text(statusVal);
							} else if (status == "1002") {
								$('#formStatusOnLoad').addClass('bg-danger-custom');
								$('#formStatusOnLoad').text(statusVal);
							}
						},
						error : function(data) {
							console.log('Error occured while inserting details');
						}
					});
					
				return false;
			});
}

function callShowPassword(){
	$('#showhide_pword')
	.click(
			function(e) {
				e.preventDefault();
				if ($('#newPassOnLoad').attr('type') == 'password' && $('#newPass1OnLoad').attr('type') == 'password') {
					$('#newPassOnLoad').attr('type', 'text');
					$('#newPass1OnLoad').attr('type', 'text');
					$(this)
							.html(
									'<span class="fa fa-eye-slash"></span>Hidepassword');
				} else {
					$('#newPassOnLoad').attr('type', 'password');
					$('#newPass1OnLoad').attr('type', 'password');
					$(this)
							.html(
									'<span class="fa fa-eye"></span>Showpassword');
				}
			});
}

//******************ESA Question paper (By Vijay)********************//
function saveDescriptionForEsaQp(thisReq)
{
	var id = $(thisReq).attr('id');
	if($('#'+id).val() && (!$('#'+id).val().trim()==''))
	{
		var qpId = id.split("_")[3];
		var desc = $('#'+id).val();
		var formData = {
				controllerMode : 370,
				actionType : 182,
				qpId : qpId,
				desc : desc,
				menuId : this.menuId
		};
		bgCurtain();
		doAjaxCall(this.url, 'GET', formData, function(data) {
			removeBgCurtain();
			var dataArray = data.split("_");
			var status = dataArray[0].toUpperCase();
			var statusResp = dataArray[1];
			if (status == "SUCCESS") {
				showMessage(statusResp, "success");
			}else{
				showMessage(statusResp, "error");
			}
		});
	}
}
//******************End ESA Question paper (By Vijay)********************//



//****************** Start Assign Students (By Gaurav)********************//

function checkAssignStudentsCheckBox(thisReq)
{
	var id = $(thisReq).attr("id");
	var idArray = id.split("_");
	var batchClassId = idArray[1];
	var userId = idArray[2];
	
	if(!$(thisReq).is(':checked')) {
		$(thisReq).removeAttr('checked');
		//assignedfacultyIdarray.splice(assignedfacultyIdarray.indexOf(this),1);
		$('#esasem_'+batchClassId).prop('checked', false);
	} 	
	
	var isAllChecked = 0;
	
	$('input[name=esasection_'+batchClassId+']').each(function () {
	    if(!this.checked)
	    	{
			isAllChecked=1;
			return false
	    	}
	});
	
	$("#esasem_1").prop("checked", false);	
	 if ($('#esasection_'+batchClassId+':checked').size()!=0 && isAllChecked == 0) {
		 $('#esasem_'+batchClassId).prop("checked", true);
     } 
	 
}

//******************End Assign Students (By Gaurav)********************//
//******************Show ESA Allocated Students (By Vijay)********************//
function showEsaAllocatedStudents(classId,programId,groupId,esaId,instId,className,program,esaAllocationId,totalStudentsCount,type)
{
	var title='ESA Allocated Students :'+className+" ,"+program;
	if(parseInt(type)==2)
	{
		title='ESA Students ';
		instId = $('#esaInstId').val();
	}
	var formData = {
			controllerMode : 370,
			actionType : 183,
			classId : classId,
			programId : programId,
			groupId : groupId,
			esaId : esaId,
			instId : instId,
			esaAllocationId : esaAllocationId,
			totalStudentsCount : totalStudentsCount,
			type : type,
			menuId : this.menuId
	};
	bgCurtain();
	var buttons = [
		{
			type : "cancel",
			label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
			className : "btn-sm btn-default",
			callback : null
		} ];
	
	doAjaxCall(this.url, 'get', formData, function(data) {
		getModalDialog('large', title, data, buttons, function() {
			showAllocatedUnAllocatedStudents(classId,programId,groupId,esaId,instId,esaAllocationId,totalStudentsCount,type);
			removeBgCurtain();
		});
		
	});

}

//******************End Show ESA Allocated Students (By Vijay)********************//



//******************Start Seating Allocation Forms (By Gaurav)********************//

function getSeatingAllocaationForms(buttonType,type,tempType)
{
	var rep=false;
	if(buttonType==1)
	{
	if($('input[name=allocation]:checked').length==0){
		showMessage("Please select at least one Seating Allocation", "error");
		return;
	}
	var id=$('input[name=allocation]:checked').attr("id");
	var idArray = [];
	idArray = id.split("_");
	var allocationId = idArray[1];
	var type = $("#allocationFormId").val();
	rep=true;
	var tempType=0;
	}else{
		var idArray = [];
		idArray = tempType.split("_");
		var allocationId = idArray[0];
		if(type==5){
			tempType=type;
			type=$("#allocationFormId").val();
		}else{
			type = idArray[1];
		}
		rep=true;
	}
	if(rep){
		var url="instituteApp/reports/Reports/generateSeatingAllocationReports/"+allocationId+"/"+type;
		 rep=false;
		if(buttonType==1)
		{
			getConfirmDialog("Generate Seating Allocation", "Are you sure you want to Generate seating Allocation ? <br><br> NOTE : It will Override the existing files.", function() {
				doAjaxCall(url, "GET", {}, function(data){		
					var dataArray = data.split("_");
					var status = dataArray[0].toUpperCase();
					var statusResp = dataArray[1];
					if (status == "SUCCESS") {
						showMessage(statusResp, "success");
						var groupId = $('#groupId').val();
						var sessionDesc = $('#id_'+allocationId+'_'+groupId).attr('data-allocationname')
						esaReportStatus(370,190,allocationId,sessionDesc,buttonType,type);
					}else{
						showMessage(statusResp, "error");
					}
				});
			});	
		}else{
			doAjaxCall(url, "GET", {}, function(data){		
				var dataArray = data.split("_");
				var status = dataArray[0].toUpperCase();
				var statusResp = dataArray[1];
				if (status == "SUCCESS") {
					showMessage(statusResp, "success");
					var groupId = $('#groupId').val();
					var sessionDesc = $('#id_'+allocationId+'_'+groupId).attr('data-allocationname');
					if(tempType==5){
						 buttonType=1;
						 type=tempType;
					}
					var res=[2,4,5,6];
					type=parseInt(type);
					if(res.indexOf(type)>=0)
					esaReportStatus(370,190,allocationId,sessionDesc,buttonType,type);
				}else{
					showMessage(statusResp, "error");
				}
			});
		}
			
	}
	
}
//******************End Seating Allocation Forms (By Gaurav)********************//
//----------------------------- esa allocation based on institute -(by vijay)  ---------------------------------------//
function manageESAAllocationBasedOnInstitute(groupId,esaId,sessionDesc)
{
	var institutionId =  $('#esaInstId').val();
	var formData = {
			controllerMode : 370,
			actionType : 185,
			menuId : this.menuId,
			esaId : esaId,
			groupId : groupId,
			sessionDesc : sessionDesc,
			institutionId : institutionId
		};
	if(parseInt(institutionId)>0)
	{
		bgCurtain();
		doAjaxCall(this.url, 'get', formData, function(data) {
			$("#instData").html('');
			$("#instData").html(data);
			removeBgCurtain();
			esaInstId = null;
		});
	}
}
//----------------------------- End esa allocation based on institute- (by vijay) ---------------------------------------//
function pasteUSNManageBatches(subBatchDetailsId,batchClassId,sectionId,idType,subjectId,batchName){
	getStudentsBasedOnSection(1,9910,160,0);
	var pasteUSNDialog= '<div id="	" class="wrapper-modal-content-area-pad">'+
	'<form class="form-horizontal">'+
	' <div class="col-md-12">'+'<fieldset class="grp_frmfld" style="padding-top: 15px;">'+
	'<div class="form-group pastinblk">'+'<label class="col-md-12 control-label" for="">Please paste the values here </label>'+
	'<div class="col-md-12">'+'<textarea class="form-control" autofocus id="studentsUSNs"></textarea>'+'</div>'+
	' </div>'+'<p class="error"><strong>Note:</strong> Please paste the values separated with comma(,) ex:- xxx, yyyy</p>'+
	'</fieldset>'+'</div>'+' <div id="displayUSNValidationReport" class="col-md-12"></div> </form>'+
	'<p class="error">InValid USN :<span id="invalidArray"></span></p>'+
	'<p class="error">Already assigned to other batch USN :<span id="alreadyAssignedArray"></span></p>'+
	'<p class="error">Already sssigned to same batch USN :<span id="alreadyAssignedtoSameBatchArray"></span></p>'+
	'<p class="error"><strong>Note:</strong> Invalid USN,already assigned to other batch,already assigned to same batch students will not be saved. </p>'+'</div>';
	var buttons = [
		{
		type : "button",
		label : "<span class='glyphicon glyphicon-remove-circle' id='save-span-1' aria-hidden='true'></span>Verify & Save",
		className : "btn btn-sm btn-default",
		callback : function(e){
			verifyPastedUSNManageBatches(subBatchDetailsId,batchClassId,sectionId,idType,subjectId,batchName);
			modalDialog.modal('show');
			return false;
		} 
	}];

	getModalDialog('medium','Paste All : '+batchName,pasteUSNDialog,buttons,null,function() {
	});
}

function verifyPastedUSNManageBatches(subBatchDetailsId,batchClassId,sectionId,idType,subjectId,batchName) {
	
	$("[id^=save-span]").parent().prop('disabled', true);
	
	var enteredUSNS = $('#studentsUSNs').val();
	enteredUSNS = enteredUSNS.replace(/,/g, '\n');
	var tmpusnarray = enteredUSNS.replace(/\n/g, ",").split(",");
	var validArray = [];
	var inValidArray = '';
	var alreadyAssignedArray = '';
	var alreadyAssignedtoSameBatchArray = '';
	for(i in tmpusnarray) {
		if(getAllStudentsForManageBatches.hasOwnProperty(tmpusnarray[i].trim().toUpperCase())) {
			if(getAllStudentsForManageBatches[tmpusnarray[i].trim().toUpperCase()] == 0 ) {
				validArray.push(tmpusnarray[i].trim().toUpperCase());
			} else if(getAllStudentsForManageBatches[tmpusnarray[i].trim().toUpperCase()]==subBatchDetailsId) {
				alreadyAssignedtoSameBatchArray+=tmpusnarray[i].trim().toUpperCase()+",";
			} else if(getAllStudentsForManageBatches[tmpusnarray[i].trim().toUpperCase()]!=subBatchDetailsId) {
				alreadyAssignedArray+=tmpusnarray[i].trim().toUpperCase()+",";
			}
		} else {
			if(tmpusnarray[i])
				inValidArray+=tmpusnarray[i].trim().toUpperCase()+",";
		}
	}
	
	document.getElementById("invalidArray").innerHTML = inValidArray;
	document.getElementById("alreadyAssignedArray").innerHTML = alreadyAssignedArray;
	document.getElementById("alreadyAssignedtoSameBatchArray").innerHTML = alreadyAssignedtoSameBatchArray;
	var ids = subjectId+"_"+subBatchDetailsId+"_"+idType+"_"+batchClassId+"_"+sectionId;
	
	if(parseInt(validArray.length)==0) {
		showMessage("Please add at least one valid usn", "error");
		$("[id^=save-span]").parent().prop('disabled', false);
		return false;
	}
	
	var formData = {
			controllerMode : 9910,
			actionType : 187,
			listusn : JSON.stringify(validArray),
			ids : ids,
			menuId : this.menuId
	};
			
	bgCurtain();
	doAjaxCall(this.url, 'GET', formData, function(data) {
		$("[id^=save-span]").parent().prop('disabled', false);
		removeBgCurtain();
		var dataArray = data.split("_");
		var status = dataArray[0].toUpperCase();
		var statusResp = dataArray[1];
		if (status == "SUCCESS") {
			showMessage(statusResp, "success");
			getManageBatchStudentcountbysection();
			getStudentsBasedOnSection(1,9910,160,0);
			modalDialog.modal('hide');
			document.getElementById("invalidArray").innerHTML = "";
			document.getElementById("alreadyAssignedArray").innerHTML = "";
			document.getElementById("alreadyAssignedtoSameBatchArray").innerHTML = "";
		} else {
			showMessage(statusResp, "error");
		}
	});
}

function clickRowRadioButton(className){
	$('.'+className+' tr').click(function() {
		 $(this).children('td').find('input').prop('checked', true);
		  
		 $('.'+className+' tr').removeClass('selected');
		  $(this).toggleClass('selected');

		});
}

// Get Token Number Function.
function showTokenNumberForVisitor() {
	
//	 Validation.
	 if((!$('#referenceNo').val()) && (!$('#emailId').val())) {
		 $('#showErrorMsg').html("Enter Either Reference No Or Email Id.");
		 $('#showErrorMsg').show();
		 $('#showSuccessMsg').hide();
		 return false;
	 }
	
	 var formData = {
		 emailId : $('#emailId').val(),
		 refNo : $('#referenceNo').val()
	 };
	
	 doAjaxCall('/Academy/vms/getTokenNumber', 'POST', formData, function(data) {
		 var dataArray = data.split("_");
		 var status = dataArray[0].toUpperCase();
		 if (status == "SUCCESS") {
			 $('#showSuccessMsg').html(dataArray[1]);
			 $('#showSuccessMsg').show();		 
			 $('#showErrorMsg').hide();
			 updateTokenList("",dataArray[2]);
			 return false;
		 } else if(status == "ERROR") {
			 $('#showErrorMsg').html(dataArray[1]);
			 $('#showErrorMsg').show();
			 $('#showSuccessMsg').hide();
		 }
	 });
}
function unallocateStudentsForBatches()
{
	var subjectId = $("#subjects").val();
	var sectionId = $("#section").val();
	
	var idType=1;
    if(getElectiveSubjects.hasOwnProperty(subjectId)){
        idType=2;      	
    }
    
    var batchName = $('select[name=subjectBatchDetailId] option:selected').text();    
    var batchClassId = $("#batchClassId").val();
    
	var SubjectBatchDetailId = $("#oldSubjectBatchDetailId").val();
	
	var oldBatchName = $("#batchName").text();	
		
	var val = [];
	var studentArray = [];
	var buildingId_yourArray = [];
	$('#SubjectBatchDetailTable').DataTable().rows().every( function ( rowIdx, tableLoop, rowLoop ) {
		var studentId=$(this.node()).children().find('input').attr("id");
		var values="";				
		if($(this.node()).children().find('input').is(':checked')){
			studentArray.push(studentId);	
		}		
	});
	
	if (studentArray.length <1)
		{
		showMessage("Please Select atleast one Student", "error");
		return false;
		}
	
	var formData = {
			controllerMode : 9910, 
			actionType : 188,
			subjectId : subjectId,
			sectionId : sectionId,
			SubjectBatchDetailId : SubjectBatchDetailId,
			studentArray : JSON.stringify(studentArray),
			batchName : batchName,
			batchClassId : batchClassId,
			idType : idType,
			menuId : this.menuId			
	}	
	
	getConfirmDialog("Unallocate Students", "Are you sure you want to unallocate the students from <b>"+oldBatchName+"</b>", function() {
		 bgCurtain();		 
			doAjaxCall(this.url, 'get', formData, function(data) {				
				var dataArray = data.split("_");
				var status = dataArray[0].toUpperCase();
				var statusResp = dataArray[1];
				if (status == "SUCCESS") {
					showMessage(statusResp, "success");
					getManageBatchStudentcountbysection();
					getStudentsBasedOnSection(2,9910,160,SubjectBatchDetailId);					
				} else if (status == "ERROR") {
					showMessage(statusResp, "error");
				}
				removeBgCurtain();
			});
			
	});	
}



function generateSectionBatchesForUnAllocatedStudents(noOfBatches){
	var sectionName=$('select[name=section] option:selected').text();
	sectionName=sectionName[sectionName.length -1].toUpperCase();
	var totalNoOfStds=parseInt($('#unAllocateStudents').val());
	var noStudentsFrmdb=parseInt($('#noStudents').val());
	var tempTotalStudents=totalNoOfStds+noStudentsFrmdb;
	noOfBatches=parseInt(noOfBatches);
	if(SubjectBatchValidation(noOfBatches,tempTotalStudents)){
		return;
	}

	var text="";
	var remainNoOfStd = parseInt((totalNoOfStds % noOfBatches));
	var assignNoOfStd = parseInt((totalNoOfStds / noOfBatches));
	var toassignNoOfStd=0;
	var totalNumberOfStudents=0;

	text +="<table id='subjectBatchTable' class='table compact table-striped table-bordered' style='width: 100%;'><tr><th>Batch Name</th><th class='text-center'>No. Of Students</th></tr>";
	var clonedObj=$.extend(true,{},generateSectionBatchesInfo);
	for(i=1;i<=noOfBatches;i++){
		var tempSectionName=sectionName+""+i;
		var tempAssignNoOfStd=assignNoOfStd;
		var tempSubjectBatchDetailId=0;
		var existingStudents=0;
		if(Object.keys(generateSectionBatchesInfo).length==noOfBatches){
			tempSectionName=getSectionNameFromExitingBatch(clonedObj);
		}
		var getExistingStudentsCount=getStudentsFromGenerateSectionBatchesInfoObj(tempSectionName);
		if(Object.keys(getExistingStudentsCount).length!=0){
			existingStudents=getExistingStudentsCount['noStudents'];
			tempAssignNoOfStd=parseInt((existingStudents + assignNoOfStd));
			tempSubjectBatchDetailId=getExistingStudentsCount['subjectBatchDetailId'];
		}
		text +="<tr><td><label' for='noOfSections'>"+tempSectionName+"</label>" +
		"<input type='hidden' name='batchName' id='batchName_"+i+"' value='"+tempSectionName+"' >" +
		"</td>" +
		"<td><input type='text' class='form-control' data-existingStudents="+existingStudents+" data-assignedStudents="+assignNoOfStd+" data-subjectBatchDetailId='"+tempSubjectBatchDetailId+"' data-batchName='"+tempSectionName+"' ata-validate='only-numeric' name='noOfStdsEachSection_"+i+"' id='noOfStdsEachSection_"+i+"' value='"+tempAssignNoOfStd+"' placeholder='No of students' autocomplete='off' style='max-width: 60px; margin: auto;' required readonly></td></tr>";
		toassignNoOfStd = parseInt((toassignNoOfStd + tempAssignNoOfStd));

	}

	text +="</table>";
	$('#showBatchSections').empty();
	$('#showBatchSections').append(text); 


	if(remainNoOfStd > 0){
		for(i=1;i<=noOfBatches;i++){
			if(noStudentsFrmdb > toassignNoOfStd)
			{
				var assignValue = parseInt($('#noOfStdsEachSection_'+i).val()) + 1;
				$('#noOfStdsEachSection_'+i).val(assignValue);
				var dataAssignedStudents=parseInt($('#noOfStdsEachSection_'+i).attr('data-assignedStudents'))+1;
				$('#noOfStdsEachSection_'+i).attr('data-assignedStudents',dataAssignedStudents);
				toassignNoOfStd = parseInt((toassignNoOfStd + 1));
			}
		}
	}




}



function handleAdhocStudents(controllerMode,actionType,id,groupId,selectedId)
{
	var formData = {
			controllerMode : controllerMode,
			actionType : 199,
			esaId : id,
			groupId:groupId,
			selectedId : selectedId,
			menuId : this.menuId
	};
	var title="Manage Adhoc Students : ";
	bgCurtain();
	var buttons = [ 
		{
			type : "button",
			label : "<span class='glyphicon glyphicon-ok-circle' aria-hidden='true' id=''></span>print",
			className : "btn-sm btn-default adhocstdclass ",
			callback : function(e) {
				var instId=$("#institutionId").val();
				var roomId=$("#roomId").val();
				var groupid=$("#groupid").val();
				var seatingallocationid=$("#seatingallocationid").val();
				modalDialog.modal('show');
				var url="reports/Reports/generateAdHocReports/"+seatingallocationid+"/"+groupid+"/5/"+instId+"/"+roomId;
					var w=window.open(url,null);
				return false;
			   
		}
		},
		{
			type : "cancel",
			label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Cancel",
			className : "btn-sm btn-default adhocstdclass",
			callback : function(e) {

				
			}
		}];
      doAjaxCall(this.url, 'GET', formData, function(data) {
		getModalDialog('large', title, data, buttons, function() {
			//$("#groupid").val(groupId);
			var instId=$("#institutionId").val();
			var roomId=$("#roomId").val();
            displayAdhocStudent(groupId,instId,roomId);
			localStorage.setItem('groupId',groupId);

			//closeadhocStudents();
		});
	});
}
function displayAdhocStudent (groupId,instId,roomId)
{
   var formData = {
		   controllerMode : 370,
			actionType : 201,
			groupId : groupId,
			instId:instId,
			roomId:roomId,
			menuId : this.menuId
	};
   
   doAjaxCall(this.url, 'GET', formData, function(data) {
	   
	   var index = data.indexOf("record not found");
		if(index>=0)
		{
		$("#adhocrequestedData").html("");
        $(".adhocstdclass").hide();
		}else
		{
		$(".adhocstdclass").show();
	    $("#adhocrequestedData").html("");
		$("#adhocrequestedData").html(data);
		}

	  });
   }



var groupsubjectJson="";
var groupsubjectInfoJson="";
function getgroupSubjectBySearch(where,id,groupid){
	if(!where)
	  return;
		var formData = {
				menuId:this.menuId,
				where:where,
				groupId:groupid,
				id:id,
			};
			doAjaxCall('/Academy/a/i/groupBasedsubjectCodes/'+groupid, 'GET', formData, function(data) {
			if(data){
				groupsubjectJson="";
				groupsubjectJson=JSON.parse(data);
				groupsubjectInfoJson=groupsubjectJson;

				var rep="";
				var finalJson={};
				for(i=0;i<groupsubjectJson.length;i++){
					var SubjectId=groupsubjectJson[i].subjectId;
					var SubjectCode=groupsubjectJson[i].subjectCode.trim().toUpperCase();
					var SubjectName=groupsubjectJson[i].subjectName.trim().toUpperCase();
					SubjectName=SubjectName.replace(/\s\s+/g, ' ');
					var rep="<option data-value='"+SubjectId+"'>"+SubjectCode+"-"+SubjectName+"</option>";
					finalJson[SubjectCode+"-"+SubjectName]=rep;
					}
				groupsubjectJson=finalJson;
			}
		});
				
}

var equivalentgroupSubjectCodeValue="";
function getgroupEqvSubjectCodeData(){
	$("#equivalentgroupSubjectId").on('input',function(){
		equivalentgroupSubjectCodeValue="";
		var thisReq=$(this);
		var enteredValue = $(thisReq).val();
	    var currentDataList=$(thisReq).attr('list');
	    
	    var respVal=showgroupSubjectCodeDataList(enteredValue,currentDataList,$(thisReq).attr('id'));
	    if(respVal){
	    	enteredValue=respVal;
	    }
	   $('#'+currentDataList + ' option').filter(function() {
		  			if($(this).val() === enteredValue && enteredValue){
		  				equivalentgroupSubjectCodeValue=$(this).attr('data-value');
		  				$('#'+currentDataList).empty();
		  				return equivalentgroupSubjectCodeValue;
		  		}
	       });	  
	    return equivalentgroupSubjectCodeValue ; // contains value
	});
	
}


function showgroupSubjectCodeDataList(value,dataListId,inuptId)
{
	$('#'+dataListId).empty();
	var rep="";
	if(value){
	var name=value.trim().toUpperCase();
	var count=0;
		for(var f in groupsubjectJson){
			if(f.indexOf(name)>=0){
				rep+=groupsubjectJson[f];
				count++;
				if(count==10)break;
			}
	}
	}
			$('#'+dataListId).append(rep); 
}

function addStudentsForManageAdhoc(status)
{
	if (!$("#genericSave").valid())
 		return false;
	var institutionId=$("#institutionId").val();
	var roomId=$("#roomId").val();
	var groupId=$("#groupid").val();
	var srn = $('#srn').val();
	
	var eqvsubId ="";
	var subjectId ="";
	var eqvsubCode ="";
	var subjectCode ="";
	for(var i = 0; i < subjectInfoJson.length; i++)
	{
		
		if(subjectInfoJson[i].subjectId == subjectCodeValue)
		{
			subjectId = subjectInfoJson[i].subjectId;
			subjectCode = subjectInfoJson[i].subjectCode;
		}
	}
	for(var i = 0; i < groupsubjectInfoJson.length; i++)
	{
		if(groupsubjectInfoJson[i].subjectId == equivalentgroupSubjectCodeValue)
		{
			eqvsubId = groupsubjectInfoJson[i].subjectId;
			eqvsubCode = groupsubjectInfoJson[i].subjectCode;
		}
		
	}
	
	
	if(institutionId=='')
		{
		showMessage("Select Institute", "error");
		return false;
		}
	else if(roomId=='')
		{
		showMessage("Select Room", "error");
		return false;groupId
		}
	else if(srn.trim()=='')
	{
		showMessage("Please enter SRN/LoginId", "error");
		return false;
	}
	else if(eqvsubId=='')
	{
		showMessage("Please add Equivalent subject", "error");
		return false;
	}
	else if(subjectId=='')
	{
		showMessage("Please add Actucal subject", "error");
		return false;
	}
	
	/*else 
	{
		showMessage("Please add equivalent subject", "error");
		return false;
	}
	*/
	var formData = {
			controllerMode : 370,
			actionType : 200,
			instituteId:institutionId,
			roomId:roomId,
			groupId:groupId,
			srn:srn,
			actSubjectId:subjectId,
			actSubjectCode:subjectCode,
			eqvSubectId:eqvsubId,
			eqvSubjectCode:eqvsubCode,
			status:status,
			menuId : this.menuId
	};
	bgCurtain();
	doAjaxCall(this.url, 'GET', formData, function(data) {
	 	removeBgCurtain();
	 	var dataArray = data.split("_");
	 	var status = dataArray[0].toUpperCase();
	 	var statusResp = dataArray[1];
	 	if (status == "SUCCESS") {
	 		showMessage(statusResp, "success");
	 	/*$("#institutionId").val("");
	 	$("#roomId").val("");
	 	$("#groupid").val("");*/
	 	 $('#srn').val("");
	 	 $("#equivalentgroupSubjectId").val("");
	 	 $("#subjectId").val("");
	 	var instId=$("#institutionId").val();
		var roomId=$("#roomId").val();
        displayAdhocStudent(groupId,instId,roomId);
          }
	 	else if (status == "DUPLICATE") {
	 	getConfirmDialog(
	 			"SRN:"+srn,
				" SRN Already Exist. Are you sure want to save again ?",
				function() {
					addStudentsForManageAdhoc(1);
			});
	 	}	 	
	 	
	 	else{
	 		showMessage(statusResp, "error");
	 	}
	});

//addStudentsForManageBacklogsStd(srn,subjectId,subjectCode,eqvsubId,eqvsubCode);
}
function resetAdhocStd()
{
	$('#srn').val("");
 	 $("#equivalentgroupSubjectId").val("");
 	 $("#subjectId").val("");
 	
	}

//paste usns for show subjects and remove std for std promotions start

function removeSelectedStudentsFromClass(controlleMode,actionType){
	$('#getAvailableStudentsForPromotions').DataTable().search("").draw();
	var formData={};

	var oldClassBatchSections=$('#classBatchSection').val();
	var oldBatchClass=$('#batchClass').val();
	var selectedStudetnts=[];
	var selectedStudetntsCbsId=[];
	var selectedStdsNameAndUsns=[];
	if(oldBatchClass){
		 $('input[name=promotedStudents]:checked').each(function() {
			 selectedStudetnts.push($(this).attr('data-value').split("_")[0]);
			 selectedStdsNameAndUsns.push($(this).attr('usnAndName').split("_")[0]+'<br>');
			 selectedStudetntsCbsId.push($(this).attr('usnAndName').split("_")[1])
		     });
		if(oldBatchClass && selectedStudetntsCbsId && selectedStudetntsCbsId.length>0 && selectedStudetnts && selectedStudetnts.length>0){
			formData.controllerMode=controllerMode;
			formData.actionType=actionType;
			formData.selectedStudents=selectedStudetnts.toString();
			formData.oldBatchClass=oldBatchClass;
			formData.menuId=this.menuId;
			formData.oldClassBatchSections=selectedStudetntsCbsId.toString();
			var title='Remove Student';
			var titleValue=(selectedStdsNameAndUsns.toString()).replace(/,/g, "");
			
			var message= '<p><strong>Kindly Note</strong> : You have selected '+selectedStudetnts.length+' students.!<br> Are you sure want to remove these students ?<br><br>'+titleValue+'</p>';
			getConfirmDialog(title, message,function(data) {
			doAjaxCall('appAdmin', 'POST', formData,function(data) {
					if (data.indexOf("SUCCESS") > -1) {
						showMessage("Selected students removed successfully..","success");
						handleGetAvailableStudents(502,8);
					}
					else{
						showMessage("Selected students not removed successfully..","error");
					}
					
			});
			},false);
		}
		else{
			showMessage("Please select students");
		}
	}
}



function pasteUSNs(subjectId,subjectCode){
	
	var pasteDialog=    '<div class="wrapper-modal-content-area-pad">'+
    '<form class="form-horizontal">'+
    ' <div class="col-md-12">'+'<fieldset class="grp_frmfld" style="padding-top: 15px;">'+
         '<div class="form-group pastinblk">'+'<label class="col-md-12 control-label" for="">Please paste the SRNs here </label>'+
         '<p class="error"><strong>Quick Help:</strong> Please paste the values separated with comma(,) <br>ex:- <br>PES12017XXXXX<br>01FB14ECSXXX</p>'+
         '<div class="col-md-12">'+'<textarea class="form-control" autofocus id="pastedUsns"></textarea>'+'</div>'+
        '     </div>'+
         '</fieldset>'+'</div>'+' </form>'+'</div>';
	
	var buttons = [ {
		type : "button",
		label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>OK",
		className : "btn btn-sm btn-default",
		callback : function(e){
			pasteValue(subjectId);
		}
	} ];
	
	getModalDialog('medium','Paste Usns for '+subjectCode+' Subject',pasteDialog,buttons,function() {
	});
 
}



function pasteValue(subjectId){
	var val=$("#pastedUsns").val();
	if(val && val.length>0)
		var vals=val.split("\n");
	else{
		showMessage("No data provided.");
		return false;
	}
		
	var isChanged=false;
	$("#studentsSubjects >tbody tr").each(function(i){
		$(this).children().each(function(){
			var ctx=$(this).children('input[subjAndUsnId^=stdUsn_]');
			if($(ctx).length>0){
				var usn=$(ctx).attr('subjAndUsnId').trim();
				
				for(var i in vals){
					var t=vals[i].split(",");
					chkId="stdUsn_"+(t[0].toUpperCase()).trim()+"_"+subjectId;
					if(chkId===usn){
						 $("input[subjAndUsnId='" + chkId + "']").prop('checked', true);
						 $("input[subjAndUsnId='" + chkId + "']").attr("ischanged",1); 
						 isChanged=true;
					}
					
					
					
				}
				if(isChanged){
					$("#showAllocateSubjectsId").removeClass('disabled');
				}
				 
			}
		})
	});

	}

//paste usns for show subjects and remove std for std promotions end


//delete Adhoc student
function deleteStudentsForManageAdhoc(ESAStudentSeatingAllocationId,ESABacklogStudentsId,USN) {	
	var institutionId=$("#institutionId").val();
	var roomId=$("#roomId").val();
	var groupId=$("#groupid").val();
	var formData = {
			controllerMode : 370,
			actionType : 203,
			ESAStudentSeatingAllocationId:ESAStudentSeatingAllocationId,
			ESABacklogStudentsId:ESABacklogStudentsId,
			USN:USN,
			groupId:groupId,
			instId:institutionId,
			menuId : this.menuId
	};
	getConfirmDialog("SRN:"+USN,"Are you sure want to Delete This Record ?<br>Note:This "+USN+" Will Remove From Here(If Same Equivalent Subject).",function() {
		 bgCurtain();
			doAjaxCall(this.url, 'get', formData, function(data) {	
				var dataArray = data.split("_");
				var status = dataArray[0].toUpperCase();
				var statusResp = dataArray[1];
				if (status == "SUCCESS") {
					showMessage("Record Deleted successfully", "success");
					displayAdhocStudent(groupId,institutionId,roomId);
				} else if (status == "ERROR") {
					//showMessage(statusResp, "error");
					showMessage("Record Not Deleted ", "error");
				} 
					removeBgCurtain();
			});
});
}

 





function handleISAReport(){
	var ret = [];
	var instid = $('#institutionId').val();
	var batchClassId = $('#batchClassId').val();
	var isapprog = $('#isapprog').val();
	var isapbatch = $('#isapbatch').val();
	$("#batchClassSecId option:selected").each(function(i) {
		ret.push($(this).val());
	});
	
	var isapdept = $('#isapdept').val();
	var isapclass = $('#isapclass').val();
	 
	if(instid==null)
	{
	  
	showMessage("Please Select Institute", "error");
	return false;
	}

else if(isapprog==null)
{
	showMessage("Please Select Program", "error");
	return false;
}
 
else if(isapclass==null)
{
	showMessage("Please Select Semester ", "error");
	return false;
}else if(batchClassId==null)
	{
	showMessage("Please Select Class", "error");
	return false;
	}else{
		
		var formData={
			controllerMode:9930,
			actionType:210,
			val:JSON.stringify(ret),
			instid:instid,
			batchClassId:batchClassId,
			menuId:this.menuId
			}
		
		bgCurtain();
		doAjaxCall(this.url, 'POST', formData, function(data) {
			
		//console.log(data);
			if(data==null){
				$("#noresultsid").html("No results fount");
				
			}else{
				if(data=="NoReportsData"){
					$("#reportPreview").html(data);
				}else{
					$("#reportPreview").html(data);
					charts();
					removeBgCurtain();
				}
			
			} 
		});
} 
	 
}

function reset(){
	$("#academicyear").val('');
	$(".reset").val('');
	$("#reportPreview").html('');
}
 




 
// Puneeth R,.
// Add New And Remove Batches.
function addNewAndRemoveSectionBatch() {
	
	var htmlText;
	var sectionName;
	var totalNoOfStds;
	var addBatchesRequest;
	var rowCountIsNoOfBatches;
	
	sectionName = $('select[name=section] option:selected').text();
    sectionName = sectionName[sectionName.length -1].toUpperCase();
	totalNoOfStds = parseInt($('#noStudents').val());
	addBatchesRequest = parseInt($('#addBatchesRequest').val());
	
	if(addBatchesRequest == 1) {
		htmlText = "";
		htmlText +="<table id='subjectBatchTable' class='table compact table-striped table-bordered' style='width: 100%; margin-bottom: 0;'><tr><th class='text-center'>Batch Name</th><th class='text-center'>No. Of Students</th><th class='text-center'>Action</th></tr></table>";
		$('#showBatchSections').empty();
		$('#showBatchSections').append(htmlText);
		$('#addBatchesRequest').val(2)	// Setting 2 Fr 2nd And All Next Request.
	}
	
	rowCountIsNoOfBatches = $('#subjectBatchTable tr').length;
	
	var idCount = 0;
	$("[id^=batchName_]").each(function() {
		var batch_id = $(this).attr('id');
		if(parseInt(batch_id.split("_")[1]) > idCount)
			idCount = parseInt(batch_id.split("_")[1]);
	});
	idCount++;
	
	if(rowCountIsNoOfBatches <= 250) {
		
		htmlText = "";
		htmlText += "<tr>" +
		
		"<td class='text-center'>" +
		"<label for='noOfSections'>" + sectionName + "" + idCount + "</label>" +
		"<input type='hidden' name='batchNameNew' id='batchName_" + idCount + "' value='" + sectionName + "" + idCount + "'>" +
		"</td>" +
		
		"<td class='text-center'>" +
		"<label for='noOfSections'>" + 0 + "</label>" +
		"<input type='hidden' class='form-control' data-validate='only-numeric' name='noOfStdsEachSection_" + idCount + "' id='noOfStdsEachSection_" + idCount + "' value='0' autocomplete='off' style='max-width: 60px; margin: auto;' required readonly>" +
		"</td>" +
		
		"<td class='text-center' style='vertical-align: middle;'>" +
		"<a id='removeId_" + idCount + "' class='btn btn-default btn-xs outside-action-btn removeBatch'><span class='glyphicon glyphicon-minus' aria-hidden='true'></span>Remove</a>" +
		"</td>" +
		"</tr>";
		
		$('#subjectBatchTable tbody').append(htmlText);
		
//		Enabling And Dissabling Save Button.
		var newBatches = document.getElementsByName("batchNameNew");
		if (newBatches !== null && newBatches !== undefined) {
			if(newBatches.length > 0) {
				$('#saveBatches').removeClass('disabled')
			} else {
				$('#saveBatches').addClass('disabled');
			}
		}
	} else {
		showMessage("Maximux Limit Of Creating Batches Is 250", "error");
	}
	
//	Remove Batches Function.
	$("#subjectBatchTable").on("click", ".removeBatch", function() {
		$(this).closest("tr").remove();
//		var remove_id = $(this).attr('id');
		
//		Enabling And Dissabling Save Button.
		var newBatches = document.getElementsByName("batchNameNew");
		if (newBatches !== null && newBatches !== undefined) {
			if(newBatches.length > 0) {
				$('#saveBatches').removeClass('disabled')
			} else {
				$('#saveBatches').addClass('disabled');
			}
		}
	});
}
 
//////////Div Curtain ////////


function elemcurtain(id){
	$("#"+id).showLoading();
	////Element Curtain
	////////// Use Class loading-indicator-target
}
function elemremovecurtain(id){
	$("#"+id).hideLoading();
}


function getStudentAcademicDetails(){
	bgCurtain();
	var formData = {
			controllerMode : 369,
			actionType : 91,
			userId:$('#userId').val(),
			cbsId:$('#cbsId').val(),
			menuId:this.menuId,			
		};	
		doAjaxCall('instituteApp', 'POST', formData, function(data) {
			$('#academydetails').html(data);
			removeBgCurtain();
			});	
}
function getfacultyDetails(UserId){
	//alert(types);
	//var status=$("#st").val();
	var formData = {
			controllerMode : 9930,
			actionType : 215,
			UserId:UserId,
			page :"facultyDetails",
			menuId:this.menuId,
			
		};
	title='Faculty Details';
	var buttons = [
		{
			type : "cancel",
			label : "<span class='glyphicon glyphicon-remove-circle' aria-hidden='true'></span>Close",
			className : "btn-sm btn-default",
			callback : null
		} ];
	doAjaxCall('instituteApp', 'GET', formData, function(data) {
		 	 if((typeof(data)!= "undefined")){
		 		getModalDialog('large', title, data, buttons,  function() {			
				});	
		 		//$('#facultystatus').attr(status);
		 	 }
		
		});
	  
}


function saveFacultyDetails(type){
	
	var classId=type+"_input_info";
	var dob=$("#dob").val();
	if(type==1){
	if(dob==''){
		showMessage("Please Enter Date Of Birth ", "error");
		return false;
	}
	}
	var formContext = $("#genericSave");
	var controllerMode = parseInt($('#controllerMode').val());
	var actionType = parseInt($('#actionType').val());
	var postData = formContext.serializeArray();
	var formURL = formContext.attr("action");
	var formData = new FormData(formContext[0]);
	formData.append("menuId",this.menuId);
	formData.append("type",type);
	
	bgCurtain();
	//changeTabStatusSI(type);
		doAjaxCall('instituteApp', 'POST', formData, function(data) {
			var dataArray = data.split("_");
			var status = dataArray[0].toUpperCase();
			var statusResp = dataArray[1];
			if (status == "SUCCESS") {
				showMessage(statusResp, "success");
				handleAcademicFaculty();
				document.getElementById(`${type}_save`).style.display = "none";
				document.getElementById(`${type}_edit`).style.display = "block";
				$('input.'+classId).attr('disabled','disabled');
			}else{
				showMessage(statusResp, "error");
			}
			//studentInfoCallBack(type);
			removeBgCurtain();
			},false,false);
}

////////End ///////////